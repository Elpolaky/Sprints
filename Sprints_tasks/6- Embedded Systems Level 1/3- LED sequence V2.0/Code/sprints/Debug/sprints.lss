
sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000600  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000600  00000694  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  00000696  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000696  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001be6  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097d  00000000  00000000  0000243a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cfa  00000000  00000000  00002db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00003ab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f8  00000000  00000000  00003da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a96  00000000  00000000  0000449c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004f32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_1>
   8:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_2>
   c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  8a:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SetFlag>:

uint8_t flag = 0,error_value=0 ,error_value2=0 ;

void SetFlag(){
	
	if(flag <7){
  92:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flag>
  96:	87 30       	cpi	r24, 0x07	; 7
  98:	20 f4       	brcc	.+8      	; 0xa2 <SetFlag+0x10>
		
		flag++;
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <flag>
  a0:	08 95       	ret
		
	}else{
		
		flag = 0;
  a2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <flag>
  a6:	08 95       	ret

000000a8 <app_init>:
	
}

void app_init(void){
	
	 BUTTON_init(BUTTON_INT0_PORT,BUTTON_INT0_PIN);
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 0f 01 	call	0x21e	; 0x21e <BUTTON_init>
	 LED_init(PORT_B,PIN_0);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_init>
	 LED_init(PORT_B,PIN_1);
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_init>
	 LED_init(PORT_B,PIN_2);
  c0:	62 e0       	ldi	r22, 0x02	; 2
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_init>
	 LED_init(PORT_B,PIN_3);
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_init>
	 
	 // INTERRUPT
	 SEI;
  d0:	8f b7       	in	r24, 0x3f	; 63
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8f bf       	out	0x3f, r24	; 63
	error_value= ExtInt_init(); 
  d6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <ExtInt_init>
  da:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <error_value>
	 error_value2=INT0_SetCallback(SetFlag);
  de:	89 e4       	ldi	r24, 0x49	; 73
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <INT0_SetCallback>
  e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  ea:	08 95       	ret

000000ec <app_start>:

}


void app_start(){
	if (flag == 0){
  ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <flag>
  f0:	81 11       	cpse	r24, r1
  f2:	11 c0       	rjmp	.+34     	; 0x116 <app_start+0x2a>
		LED_off(PORT_B,PIN_0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PIN_1);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PIN_2);
 104:	62 e0       	ldi	r22, 0x02	; 2
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PIN_3);	
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
 114:	08 95       	ret

	}
	else if(flag == 1){
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	81 f4       	brne	.+32     	; 0x13a <app_start+0x4e>
		LED_on(PORT_B,PIN_0);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_off(PORT_B,PIN_1);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PIN_2);
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PIN_3);
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
 138:	08 95       	ret
		
		
	}else if (flag == 2){
 13a:	82 30       	cpi	r24, 0x02	; 2
 13c:	89 f4       	brne	.+34     	; 0x160 <app_start+0x74>
		LED_on(PORT_B,PIN_0);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_on(PORT_B,PIN_1);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_off(PORT_B,PIN_2);
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PIN_3);
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
 15e:	08 95       	ret
		
		
	}else if (flag == 3){
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	89 f4       	brne	.+34     	; 0x186 <app_start+0x9a>
		LED_on(PORT_B,PIN_0);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_on(PORT_B,PIN_1);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_on(PORT_B,PIN_2);
 174:	62 e0       	ldi	r22, 0x02	; 2
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_off(PORT_B,PIN_3);
 17c:	63 e0       	ldi	r22, 0x03	; 3
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
 184:	08 95       	ret
		
		
	}else if (flag == 4){
 186:	84 30       	cpi	r24, 0x04	; 4
 188:	89 f4       	brne	.+34     	; 0x1ac <app_start+0xc0>
		LED_on(PORT_B,PIN_0);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_on(PORT_B,PIN_1);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_on(PORT_B,PIN_2);
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_on(PORT_B,PIN_3);
 1a2:	63 e0       	ldi	r22, 0x03	; 3
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
 1aa:	08 95       	ret
		
	}else if (flag == 5){
 1ac:	85 30       	cpi	r24, 0x05	; 5
 1ae:	89 f4       	brne	.+34     	; 0x1d2 <app_start+0xe6>
		LED_off(PORT_B,PIN_0);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_on(PORT_B,PIN_1);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_on(PORT_B,PIN_2);
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_on(PORT_B,PIN_3);
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
 1d0:	08 95       	ret
		
		
	}else if (flag == 6){
 1d2:	86 30       	cpi	r24, 0x06	; 6
 1d4:	89 f4       	brne	.+34     	; 0x1f8 <app_start+0x10c>
		LED_off(PORT_B,PIN_0);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PIN_1);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_on(PORT_B,PIN_2);
 1e6:	62 e0       	ldi	r22, 0x02	; 2
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
		LED_on(PORT_B,PIN_3);
 1ee:	63 e0       	ldi	r22, 0x03	; 3
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
 1f6:	08 95       	ret
		
	}
	else if (flag == 7){
 1f8:	87 30       	cpi	r24, 0x07	; 7
 1fa:	81 f4       	brne	.+32     	; 0x21c <app_start+0x130>
		LED_off(PORT_B,PIN_0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PIN_1);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_off(PORT_B,PIN_2);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 3f 01 	call	0x27e	; 0x27e <LED_off>
		LED_on(PORT_B,PIN_3);
 214:	63 e0       	ldi	r22, 0x03	; 3
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 2f 01 	call	0x25e	; 0x25e <LED_on>
 21c:	08 95       	ret

0000021e <BUTTON_init>:
 *  Author: moham
 */ 
#include "button.h"

Dio_ErrorStatus BUTTON_init(PORT_NUM portnum ,PIN_NUM pinnum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portnum,pinnum,INPUT);
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_init>
	if ( loc_errorStatus == Dio_PortError){
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	29 f0       	breq	.+10     	; 0x232 <BUTTON_init+0x14>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_PinError){
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	29 f0       	breq	.+10     	; 0x236 <BUTTON_init+0x18>
		
		return Dio_PinError;
		
		
	}else if (loc_errorStatus == Dio_DirectionError){
 22c:	84 30       	cpi	r24, 0x04	; 4
 22e:	29 f4       	brne	.+10     	; 0x23a <BUTTON_init+0x1c>
 230:	08 95       	ret

Dio_ErrorStatus BUTTON_init(PORT_NUM portnum ,PIN_NUM pinnum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portnum,pinnum,INPUT);
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	08 95       	ret
		
	}else if (loc_errorStatus == Dio_PinError){
		
		return Dio_PinError;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	08 95       	ret
	}else if (loc_errorStatus == Dio_DirectionError){
	
		return Dio_DirectionError;
	
	}else{
		return Dio_Ok;
 23a:	80 e0       	ldi	r24, 0x00	; 0
}
}
 23c:	08 95       	ret

0000023e <LED_init>:
 *  Author: moham
 */ 
#include "led.h"

Dio_ErrorStatus LED_init(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portNum,pinNum,OUTPUT);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	0e 94 50 01 	call	0x2a0	; 0x2a0 <DIO_init>
	
	if ( loc_errorStatus == Dio_PortError){
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	29 f0       	breq	.+10     	; 0x252 <LED_init+0x14>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_PinError){
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	29 f0       	breq	.+10     	; 0x256 <LED_init+0x18>
	
		return Dio_PinError;
	
	
	}else if (loc_errorStatus == Dio_DirectionError){
 24c:	84 30       	cpi	r24, 0x04	; 4
 24e:	29 f4       	brne	.+10     	; 0x25a <LED_init+0x1c>
 250:	08 95       	ret
Dio_ErrorStatus LED_init(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portNum,pinNum,OUTPUT);
	
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	08 95       	ret
		
	}else if (loc_errorStatus == Dio_PinError){
	
		return Dio_PinError;
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	08 95       	ret
	}else if (loc_errorStatus == Dio_DirectionError){
		
		return Dio_DirectionError;
		
	}else{
		return Dio_Ok;
 25a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 25c:	08 95       	ret

0000025e <LED_on>:

Dio_ErrorStatus LED_on (PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,HIGH);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_write>
	
	if ( loc_errorStatus == Dio_PortError){
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	29 f0       	breq	.+10     	; 0x272 <LED_on+0x14>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_PinError){
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	29 f0       	breq	.+10     	; 0x276 <LED_on+0x18>
	
	return Dio_PinError;
	
	
	}
	else if (loc_errorStatus == Dio_ValueError){
 26c:	83 30       	cpi	r24, 0x03	; 3
 26e:	29 f4       	brne	.+10     	; 0x27a <LED_on+0x1c>
 270:	08 95       	ret
Dio_ErrorStatus LED_on (PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,HIGH);
	
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	08 95       	ret
		
	}else if (loc_errorStatus == Dio_PinError){
	
	return Dio_PinError;
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	08 95       	ret
	else if (loc_errorStatus == Dio_ValueError){
		
		return Dio_ValueError;
		
	}else{
		return Dio_Ok;
 27a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 27c:	08 95       	ret

0000027e <LED_off>:

Dio_ErrorStatus LED_off(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,LOW);	
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_write>
	
	if ( loc_errorStatus == Dio_PortError){
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	19 f0       	breq	.+6      	; 0x28e <LED_off+0x10>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_ValueError){
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	19 f4       	brne	.+6      	; 0x292 <LED_off+0x14>
 28c:	08 95       	ret
Dio_ErrorStatus LED_off(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,LOW);	
	
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret
	}else if (loc_errorStatus == Dio_ValueError){
		
		return Dio_ValueError;
		
	}else{
		return Dio_Ok;
 292:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
 294:	08 95       	ret

00000296 <main>:
 

 
int main(void)
{
	app_init();
 296:	0e 94 54 00 	call	0xa8	; 0xa8 <app_init>
	
	while (1){
		app_start();	
 29a:	0e 94 76 00 	call	0xec	; 0xec <app_start>
 29e:	fd cf       	rjmp	.-6      	; 0x29a <main+0x4>

000002a0 <DIO_init>:
#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 2a0:	68 30       	cpi	r22, 0x08	; 8
 2a2:	08 f0       	brcs	.+2      	; 0x2a6 <DIO_init+0x6>
 2a4:	80 c0       	rjmp	.+256    	; 0x3a6 <DIO_init+0x106>
		loc_ErrorStatus = Dio_PinError ;
	}
	else{	
		switch (PortNum)
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	31 f1       	breq	.+76     	; 0x2f6 <DIO_init+0x56>
 2aa:	38 f0       	brcs	.+14     	; 0x2ba <DIO_init+0x1a>
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	09 f4       	brne	.+2      	; 0x2b2 <DIO_init+0x12>
 2b0:	40 c0       	rjmp	.+128    	; 0x332 <DIO_init+0x92>
 2b2:	83 30       	cpi	r24, 0x03	; 3
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <DIO_init+0x18>
 2b6:	5a c0       	rjmp	.+180    	; 0x36c <DIO_init+0xcc>
 2b8:	78 c0       	rjmp	.+240    	; 0x3aa <DIO_init+0x10a>
		{

			case PORT_A :
					if (direction == INPUT)
 2ba:	41 11       	cpse	r20, r1
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <DIO_init+0x38>
					{
						CLR_BIT(DDRA,PinNum);
 2be:	2a b3       	in	r18, 0x1a	; 26
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_init+0x2a>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_init+0x26>
 2ce:	80 95       	com	r24
 2d0:	82 23       	and	r24, r18
 2d2:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret

			case PORT_A :
					if (direction == INPUT)
					{
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
 2d8:	41 30       	cpi	r20, 0x01	; 1
 2da:	09 f0       	breq	.+2      	; 0x2de <DIO_init+0x3e>
 2dc:	68 c0       	rjmp	.+208    	; 0x3ae <DIO_init+0x10e>
						SET_BIT(DDRA,PinNum);
 2de:	2a b3       	in	r18, 0x1a	; 26
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_init+0x4a>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	6a 95       	dec	r22
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_init+0x46>
 2ee:	82 2b       	or	r24, r18
 2f0:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret
					}
					break;
		
		
			case PORT_B :
					if (direction == INPUT)
 2f6:	41 11       	cpse	r20, r1
 2f8:	0d c0       	rjmp	.+26     	; 0x314 <DIO_init+0x74>
					{
						CLR_BIT(DDRB,PinNum);
 2fa:	27 b3       	in	r18, 0x17	; 23
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_init+0x66>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_init+0x62>
 30a:	80 95       	com	r24
 30c:	82 23       	and	r24, r18
 30e:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
		
			case PORT_B :
					if (direction == INPUT)
					{
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
 314:	41 30       	cpi	r20, 0x01	; 1
 316:	09 f0       	breq	.+2      	; 0x31a <DIO_init+0x7a>
 318:	4c c0       	rjmp	.+152    	; 0x3b2 <DIO_init+0x112>
						SET_BIT(DDRB,PinNum);
 31a:	27 b3       	in	r18, 0x17	; 23
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_init+0x86>
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	6a 95       	dec	r22
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_init+0x82>
 32a:	82 2b       	or	r24, r18
 32c:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret
					break;
		
		
		
			case PORT_C :
					if (direction == INPUT)
 332:	41 11       	cpse	r20, r1
 334:	0d c0       	rjmp	.+26     	; 0x350 <DIO_init+0xb0>
					{
						CLR_BIT(DDRC,PinNum);
 336:	24 b3       	in	r18, 0x14	; 20
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_init+0xa2>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_init+0x9e>
 346:	80 95       	com	r24
 348:	82 23       	and	r24, r18
 34a:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret
		
			case PORT_C :
					if (direction == INPUT)
					{
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
 350:	41 30       	cpi	r20, 0x01	; 1
 352:	89 f5       	brne	.+98     	; 0x3b6 <DIO_init+0x116>
						SET_BIT(DDRC,PinNum);
 354:	24 b3       	in	r18, 0x14	; 20
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_init+0xc0>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_init+0xbc>
 364:	82 2b       	or	r24, r18
 366:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	08 95       	ret
					break;
		
		
		
			case PORT_D :
					if (direction == INPUT)
 36c:	41 11       	cpse	r20, r1
 36e:	0d c0       	rjmp	.+26     	; 0x38a <DIO_init+0xea>
					{
						CLR_BIT(DDRD,PinNum);
 370:	21 b3       	in	r18, 0x11	; 17
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_init+0xdc>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_init+0xd8>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret
		
			case PORT_D :
					if (direction == INPUT)
					{
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
 38a:	41 30       	cpi	r20, 0x01	; 1
 38c:	b1 f4       	brne	.+44     	; 0x3ba <DIO_init+0x11a>
						SET_BIT(DDRD,PinNum);
 38e:	21 b3       	in	r18, 0x11	; 17
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_init+0xfa>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_init+0xf6>
 39e:	82 2b       	or	r24, r18
 3a0:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_ErrorStatus = Dio_PinError ;
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	08 95       	ret
					}
					break;
		
			default:
			//error handling
					loc_ErrorStatus = Dio_PortError;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	08 95       	ret
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRA,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	08 95       	ret
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRB,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 3b2:	84 e0       	ldi	r24, 0x04	; 4
 3b4:	08 95       	ret
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRC,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	08 95       	ret
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRD,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 3ba:	84 e0       	ldi	r24, 0x04	; 4
		}
					}
	
	return loc_ErrorStatus ;

}
 3bc:	08 95       	ret

000003be <DIO_write>:


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 3be:	68 30       	cpi	r22, 0x08	; 8
 3c0:	08 f0       	brcs	.+2      	; 0x3c4 <DIO_write+0x6>
 3c2:	80 c0       	rjmp	.+256    	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
		loc_errorStatus = Dio_PinError ;
	}
	else{
		switch (PortNum)
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	31 f1       	breq	.+76     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3c8:	38 f0       	brcs	.+14     	; 0x3d8 <DIO_write+0x1a>
 3ca:	82 30       	cpi	r24, 0x02	; 2
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <DIO_write+0x12>
 3ce:	40 c0       	rjmp	.+128    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <DIO_write+0x18>
 3d4:	5a c0       	rjmp	.+180    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 3d6:	78 c0       	rjmp	.+240    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
		{
			case PORT_A :
			
					if (value == LOW)
 3d8:	41 11       	cpse	r20, r1
 3da:	0d c0       	rjmp	.+26     	; 0x3f6 <DIO_write+0x38>
					{
						CLR_BIT(PORTA,PinNum);
 3dc:	2b b3       	in	r18, 0x1b	; 27
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_write+0x2a>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	6a 95       	dec	r22
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_write+0x26>
 3ec:	80 95       	com	r24
 3ee:	82 23       	and	r24, r18
 3f0:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
			
					if (value == LOW)
					{
						CLR_BIT(PORTA,PinNum);
			
					}else if ( value == HIGH){
 3f6:	41 30       	cpi	r20, 0x01	; 1
 3f8:	09 f0       	breq	.+2      	; 0x3fc <DIO_write+0x3e>
 3fa:	68 c0       	rjmp	.+208    	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
			
						SET_BIT(PORTA,PinNum);
 3fc:	2b b3       	in	r18, 0x1b	; 27
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	82 2b       	or	r24, r18
 40e:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_B :
					if (value == LOW)
 414:	41 11       	cpse	r20, r1
 416:	0d c0       	rjmp	.+26     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
					{
						CLR_BIT(PORTB,PinNum);
 418:	28 b3       	in	r18, 0x18	; 24
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	80 95       	com	r24
 42a:	82 23       	and	r24, r18
 42c:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	08 95       	ret
			case PORT_B :
					if (value == LOW)
					{
						CLR_BIT(PORTB,PinNum);
			
					}else if ( value == HIGH){
 432:	41 30       	cpi	r20, 0x01	; 1
 434:	09 f0       	breq	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	4c c0       	rjmp	.+152    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			
						SET_BIT(PORTB,PinNum);
 438:	28 b3       	in	r18, 0x18	; 24
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	82 2b       	or	r24, r18
 44a:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_C :
					if (value == LOW)
 450:	41 11       	cpse	r20, r1
 452:	0d c0       	rjmp	.+26     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
					{
						CLR_BIT(PORTC,PinNum);
 454:	25 b3       	in	r18, 0x15	; 21
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	6a 95       	dec	r22
 462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	80 95       	com	r24
 466:	82 23       	and	r24, r18
 468:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret
			case PORT_C :
					if (value == LOW)
					{
						CLR_BIT(PORTC,PinNum);
			
					}else if ( value == HIGH){
 46e:	41 30       	cpi	r20, 0x01	; 1
 470:	89 f5       	brne	.+98     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
			
						SET_BIT(PORTC,PinNum);
 472:	25 b3       	in	r18, 0x15	; 21
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	82 2b       	or	r24, r18
 484:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_D :
					if (value == LOW)
 48a:	41 11       	cpse	r20, r1
 48c:	0d c0       	rjmp	.+26     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
					{
						CLR_BIT(PORTD,PinNum);
 48e:	22 b3       	in	r18, 0x12	; 18
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	08 95       	ret
			case PORT_D :
					if (value == LOW)
					{
						CLR_BIT(PORTD,PinNum);
			
					}else if ( value == HIGH){
 4a8:	41 30       	cpi	r20, 0x01	; 1
 4aa:	b1 f4       	brne	.+44     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
			
						SET_BIT(PORTD,PinNum);
 4ac:	22 b3       	in	r18, 0x12	; 18
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	82 2b       	or	r24, r18
 4be:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_errorStatus = Dio_PinError ;
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	08 95       	ret
					break;
		
		
			default:
			//error handling
				loc_errorStatus = Dio_PortError ;
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTA,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTB,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 4d0:	83 e0       	ldi	r24, 0x03	; 3
 4d2:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTC,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 4d4:	83 e0       	ldi	r24, 0x03	; 3
 4d6:	08 95       	ret
			
						SET_BIT(PORTD,PinNum);
			
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 4d8:	83 e0       	ldi	r24, 0x03	; 3
				break;
		
				}
		}
	return loc_errorStatus;
	}
 4da:	08 95       	ret

000004dc <ExtInt_init>:

// CALLBACK FUNCTION TO INT_2
Ext_intErrorStatus INT2_SetCallback(void(*callback)(void)){

	P2_CallbackFunction=callback;
}
 4dc:	85 b7       	in	r24, 0x35	; 53
 4de:	82 60       	ori	r24, 0x02	; 2
 4e0:	85 bf       	out	0x35, r24	; 53
 4e2:	85 b7       	in	r24, 0x35	; 53
 4e4:	8e 7f       	andi	r24, 0xFE	; 254
 4e6:	85 bf       	out	0x35, r24	; 53
 4e8:	8b b7       	in	r24, 0x3b	; 59
 4ea:	80 64       	ori	r24, 0x40	; 64
 4ec:	8b bf       	out	0x3b, r24	; 59
 4ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4f2:	08 95       	ret

000004f4 <INT0_SetCallback>:
 4f4:	9c 01       	movw	r18, r24
 4f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4fa:	83 30       	cpi	r24, 0x03	; 3
 4fc:	49 f4       	brne	.+18     	; 0x510 <INT0_SetCallback+0x1c>
 4fe:	21 15       	cp	r18, r1
 500:	31 05       	cpc	r19, r1
 502:	29 f0       	breq	.+10     	; 0x50e <INT0_SetCallback+0x1a>
 504:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <P0_CallbackFunction+0x1>
 508:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <P0_CallbackFunction>
 50c:	08 95       	ret
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	08 95       	ret

00000512 <__vector_1>:
//					 ISR FUNCTION
/***************************************************/
 
/**********  ISR OF INT_0  ************/

ISR(EXT_INT_0){
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	2f 93       	push	r18
 51e:	3f 93       	push	r19
 520:	4f 93       	push	r20
 522:	5f 93       	push	r21
 524:	6f 93       	push	r22
 526:	7f 93       	push	r23
 528:	8f 93       	push	r24
 52a:	9f 93       	push	r25
 52c:	af 93       	push	r26
 52e:	bf 93       	push	r27
 530:	ef 93       	push	r30
 532:	ff 93       	push	r31

	
		P0_CallbackFunction();
 534:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <P0_CallbackFunction>
 538:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <P0_CallbackFunction+0x1>
 53c:	09 95       	icall
	
	
}
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	bf 91       	pop	r27
 544:	af 91       	pop	r26
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	7f 91       	pop	r23
 54c:	6f 91       	pop	r22
 54e:	5f 91       	pop	r21
 550:	4f 91       	pop	r20
 552:	3f 91       	pop	r19
 554:	2f 91       	pop	r18
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <__vector_2>:


/**********  ISR OF INT_1  ************/

ISR(EXT_INT_1){
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	2f 93       	push	r18
 56c:	3f 93       	push	r19
 56e:	4f 93       	push	r20
 570:	5f 93       	push	r21
 572:	6f 93       	push	r22
 574:	7f 93       	push	r23
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	af 93       	push	r26
 57c:	bf 93       	push	r27
 57e:	ef 93       	push	r30
 580:	ff 93       	push	r31

	
		P1_CallbackFunction();
 582:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <P1_CallbackFunction>
 586:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <P1_CallbackFunction+0x1>
 58a:	09 95       	icall
	
	
}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__vector_3>:


/**********  ISR OF INT_2  ************/

ISR(EXT_INT_2){
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31

	
		P2_CallbackFunction();
 5d0:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <P2_CallbackFunction>
 5d4:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <P2_CallbackFunction+0x1>
 5d8:	09 95       	icall
	
	
 5da:	ff 91       	pop	r31
 5dc:	ef 91       	pop	r30
 5de:	bf 91       	pop	r27
 5e0:	af 91       	pop	r26
 5e2:	9f 91       	pop	r25
 5e4:	8f 91       	pop	r24
 5e6:	7f 91       	pop	r23
 5e8:	6f 91       	pop	r22
 5ea:	5f 91       	pop	r21
 5ec:	4f 91       	pop	r20
 5ee:	3f 91       	pop	r19
 5f0:	2f 91       	pop	r18
 5f2:	0f 90       	pop	r0
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	0f 90       	pop	r0
 5f8:	1f 90       	pop	r1
 5fa:	18 95       	reti

000005fc <_exit>:
 5fc:	f8 94       	cli

000005fe <__stop_program>:
 5fe:	ff cf       	rjmp	.-2      	; 0x5fe <__stop_program>
