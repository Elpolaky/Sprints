
sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000e30  00000ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080006a  0080006a  00000ece  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000212c  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aac  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010bc  00000000  00000000  00003cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00004d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086a  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce6  00000000  00000000  00005976  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000665c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__vector_1>
   8:	0c 94 0a 04 	jmp	0x814	; 0x814 <__vector_2>
   c:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7f 02 	call	0x4fe	; 0x4fe <main>
  8a:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SetFlag>:
uint8_t flag = 0,flag2=0 ,error_value=0 ,error_value2=0 ;
float delay_on=100,delay_off=900;

void SetFlag(){
	
	if(flag <7){
  92:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
  96:	87 30       	cpi	r24, 0x07	; 7
  98:	20 f4       	brcc	.+8      	; 0xa2 <SetFlag+0x10>
		
		flag++;
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flag>
  a0:	08 95       	ret
		
	}else{
		
		flag = 0;
  a2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <flag>
  a6:	08 95       	ret

000000a8 <SetDelay>:
	
}

void SetDelay(){
	
	flag2++;
  a8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flag2>
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <flag2>
	switch(flag2){
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	19 f1       	breq	.+70     	; 0xfc <SetDelay+0x54>
  b6:	18 f4       	brcc	.+6      	; 0xbe <SetDelay+0x16>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	39 f0       	breq	.+14     	; 0xca <SetDelay+0x22>
  bc:	66 c0       	rjmp	.+204    	; 0x18a <SetDelay+0xe2>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	b1 f1       	breq	.+108    	; 0x12e <SetDelay+0x86>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	09 f4       	brne	.+2      	; 0xc8 <SetDelay+0x20>
  c6:	48 c0       	rjmp	.+144    	; 0x158 <SetDelay+0xb0>
  c8:	60 c0       	rjmp	.+192    	; 0x18a <SetDelay+0xe2>
	
		
	case 1 :
	delay_on=200;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	a8 e4       	ldi	r26, 0x48	; 72
  d0:	b3 e4       	ldi	r27, 0x43	; 67
  d2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
  d6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
  da:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
  de:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
	delay_off=800;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a8 e4       	ldi	r26, 0x48	; 72
  e8:	b4 e4       	ldi	r27, 0x44	; 68
  ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  f6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	break;
  fa:	08 95       	ret
	
	case 2 :
	delay_on=300;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	a6 e9       	ldi	r26, 0x96	; 150
 102:	b3 e4       	ldi	r27, 0x43	; 67
 104:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 108:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 10c:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 110:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
	delay_off=700;
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	af e2       	ldi	r26, 0x2F	; 47
 11a:	b4 e4       	ldi	r27, 0x44	; 68
 11c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 128:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	break;
 12c:	08 95       	ret
	
	case 3 :
	delay_on=500;
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	aa ef       	ldi	r26, 0xFA	; 250
 134:	b3 e4       	ldi	r27, 0x43	; 67
 136:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 13a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 13e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 142:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
	delay_off=500;
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 152:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	break;
 156:	08 95       	ret
	
	case 4 :
	delay_on=800;
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	a8 e4       	ldi	r26, 0x48	; 72
 15e:	b4 e4       	ldi	r27, 0x44	; 68
 160:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 164:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 168:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 16c:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
	delay_off=200;
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	a8 e4       	ldi	r26, 0x48	; 72
 176:	b3 e4       	ldi	r27, 0x43	; 67
 178:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 17c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	break;
 188:	08 95       	ret
	
	
	default:
		flag2 = 0 ;
 18a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <flag2>
		delay_on=100;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	a8 ec       	ldi	r26, 0xC8	; 200
 194:	b2 e4       	ldi	r27, 0x42	; 66
 196:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 19a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 19e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 1a2:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
		delay_off=900;
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	a1 e6       	ldi	r26, 0x61	; 97
 1ac:	b4 e4       	ldi	r27, 0x44	; 68
 1ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ba:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1be:	08 95       	ret

000001c0 <app_init>:
	
	
}
void app_init(void){
	
	 BUTTON_init(BUTTON_INT0_PORT,BUTTON_INT0_PIN);
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	0e 94 6f 02 	call	0x4de	; 0x4de <BUTTON_init>
	 BUTTON_init(BUTTON_INT1_PORT,BUTTON_INT1_PIN);
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 6f 02 	call	0x4de	; 0x4de <BUTTON_init>

	 LED_init(PORT_B,PIN_0);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_init>
	 LED_init(PORT_B,PIN_1);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_init>
	 LED_init(PORT_B,PIN_2);
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_init>
	 LED_init(PORT_B,PIN_3);
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_init>
	 
	 // INTERRUPT
	 SEI;
 1f0:	8f b7       	in	r24, 0x3f	; 63
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	8f bf       	out	0x3f, r24	; 63
	error_value= ExtInt_init(); 
 1f6:	0e 94 a2 03 	call	0x744	; 0x744 <ExtInt_init>
 1fa:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <error_value>
	error_value2=INT0_SetCallback(SetFlag);
 1fe:	89 e4       	ldi	r24, 0x49	; 73
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 b7 03 	call	0x76e	; 0x76e <INT0_SetCallback>
 206:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	INT1_SetCallback(SetDelay);
 20a:	84 e5       	ldi	r24, 0x54	; 84
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 cd 03 	call	0x79a	; 0x79a <INT1_SetCallback>
 212:	08 95       	ret

00000214 <app_start>:
}


void app_start(){
	if (flag == 0){
 214:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
 218:	81 11       	cpse	r24, r1
 21a:	11 c0       	rjmp	.+34     	; 0x23e <app_start+0x2a>
		LED_off(PORT_B,PIN_0);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_1);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_2);
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_3);	
 234:	63 e0       	ldi	r22, 0x03	; 3
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
 23c:	08 95       	ret

	}
	else if(flag == 1){
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	41 f5       	brne	.+80     	; 0x292 <app_start+0x7e>
		LED_on(PORT_B,PIN_0);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 248:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 24c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 250:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 254:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 258:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		LED_off(PORT_B,PIN_0);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 264:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 268:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 26c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 270:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 274:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		LED_off(PORT_B,PIN_1);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_2);
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_3);
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
 290:	08 95       	ret
		
		
	}else if (flag == 2){
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	69 f5       	brne	.+90     	; 0x2f0 <app_start+0xdc>
		LED_on(PORT_B,PIN_0);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		LED_on(PORT_B,PIN_1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 2a6:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 2aa:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 2ae:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 2b2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 2b6:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		LED_off(PORT_B,PIN_0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 2ca:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ce:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2d6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2da:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		
		LED_off(PORT_B,PIN_2);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_3);
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
 2ee:	08 95       	ret
		
		
	}else if (flag == 3){
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	89 f5       	brne	.+98     	; 0x356 <app_start+0x142>
		LED_on(PORT_B,PIN_0);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		LED_on(PORT_B,PIN_1);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		LED_on(PORT_B,PIN_2);
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 30c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 310:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 314:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 318:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 31c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		LED_off(PORT_B,PIN_0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_1);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_2);
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 338:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 33c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 340:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 344:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 348:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		LED_off(PORT_B,PIN_3);
 34c:	63 e0       	ldi	r22, 0x03	; 3
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
 354:	08 95       	ret
		
		
	}else if (flag == 4){
 356:	84 30       	cpi	r24, 0x04	; 4
 358:	a9 f5       	brne	.+106    	; 0x3c4 <app_start+0x1b0>
		LED_on(PORT_B,PIN_0);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		LED_on(PORT_B,PIN_1);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		LED_on(PORT_B,PIN_2);
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		LED_on(PORT_B,PIN_3);
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 37a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 37e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 382:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 386:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 38a:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		LED_off(PORT_B,PIN_0);
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_1);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_2);
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_3);
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 3ae:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3b2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3ba:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3be:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
 3c2:	08 95       	ret
	}else if (flag == 5){
 3c4:	85 30       	cpi	r24, 0x05	; 5
 3c6:	89 f5       	brne	.+98     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		LED_off(PORT_B,PIN_0);
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		
		LED_on(PORT_B,PIN_1);
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		LED_on(PORT_B,PIN_2);
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		LED_on(PORT_B,PIN_3);
 3e0:	63 e0       	ldi	r22, 0x03	; 3
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 3e8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 3ec:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 3f0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 3f4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 3f8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		LED_off(PORT_B,PIN_1);
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_2);
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_3);
 40c:	63 e0       	ldi	r22, 0x03	; 3
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 414:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 418:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 41c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 420:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 424:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
 428:	08 95       	ret
		
	}else if (flag == 6){
 42a:	86 30       	cpi	r24, 0x06	; 6
 42c:	69 f5       	brne	.+90     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		LED_off(PORT_B,PIN_0);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_1);
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		
		LED_on(PORT_B,PIN_2);
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		LED_on(PORT_B,PIN_3);
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 44e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 452:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 456:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 45a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 45e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		LED_off(PORT_B,PIN_2);
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_3);
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 472:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 476:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 47a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 47e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 482:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
 486:	08 95       	ret
		
	}
	else if (flag == 7){
 488:	87 30       	cpi	r24, 0x07	; 7
 48a:	41 f5       	brne	.+80     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
		LED_off(PORT_B,PIN_0);
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_1);
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_off(PORT_B,PIN_2);
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		LED_on(PORT_B,PIN_3);
 4a4:	63 e0       	ldi	r22, 0x03	; 3
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 77 02 	call	0x4ee	; 0x4ee <LED_on>
		TIMER_0_DELAY_MS(delay_on);
 4ac:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 4b0:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 4b4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 4b8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 4bc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
		LED_off(PORT_B,PIN_3);
 4c0:	63 e0       	ldi	r22, 0x03	; 3
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LED_off>
		TIMER_0_DELAY_MS(delay_off);
 4c8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4cc:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 4d4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 4d8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <TIMER_0_DELAY_MS>
 4dc:	08 95       	ret

000004de <BUTTON_init>:
 *  Author: moham
 */ 
#include "button.h"

enu_Dio_ErrorStatus BUTTON_init(enu_PORT_NUM portnum ,enu_PIN_NUM pinnum){
	enu_Dio_ErrorStatus loc_errorStatus = DIO_init(portnum,pinnum,INPUT);
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	0e 94 84 02 	call	0x508	; 0x508 <DIO_init>
	return loc_errorStatus ;
}
 4e4:	08 95       	ret

000004e6 <LED_init>:
 *  Author: moham
 */ 
#include "led.h"

enu_Dio_ErrorStatus LED_init(enu_PORT_NUM portNum , enu_PIN_NUM pinNum){
	enu_Dio_ErrorStatus loc_errorStatus = DIO_init(portNum,pinNum,OUTPUT);
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	0e 94 84 02 	call	0x508	; 0x508 <DIO_init>
	
		return loc_errorStatus ;
}
 4ec:	08 95       	ret

000004ee <LED_on>:

enu_Dio_ErrorStatus LED_on (enu_PORT_NUM portNum , enu_PIN_NUM pinNum){
	enu_Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,HIGH);
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	0e 94 13 03 	call	0x626	; 0x626 <DIO_write>
	
		return loc_errorStatus ;
}
 4f4:	08 95       	ret

000004f6 <LED_off>:

enu_Dio_ErrorStatus LED_off(enu_PORT_NUM portNum , enu_PIN_NUM pinNum){
	enu_Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,LOW);	
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	0e 94 13 03 	call	0x626	; 0x626 <DIO_write>
	
	return loc_errorStatus ;
	
}
 4fc:	08 95       	ret

000004fe <main>:
 

 
int main(void)
{
	app_init();
 4fe:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <app_init>
	
	while (1){
		app_start();
 502:	0e 94 0a 01 	call	0x214	; 0x214 <app_start>
 506:	fd cf       	rjmp	.-6      	; 0x502 <main+0x4>

00000508 <DIO_init>:
#include "dio.h"

enu_Dio_ErrorStatus DIO_init(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_PIN_DIR direction){
	enu_Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
	
	if( (PinNum<PIN_0) || (PinNum>PIN_7) ){
 508:	68 30       	cpi	r22, 0x08	; 8
 50a:	08 f0       	brcs	.+2      	; 0x50e <DIO_init+0x6>
 50c:	80 c0       	rjmp	.+256    	; 0x60e <DIO_init+0x106>
		loc_ErrorStatus = Dio_PinError ;
	}
	else{	
		switch (PortNum)
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	31 f1       	breq	.+76     	; 0x55e <DIO_init+0x56>
 512:	38 f0       	brcs	.+14     	; 0x522 <DIO_init+0x1a>
 514:	82 30       	cpi	r24, 0x02	; 2
 516:	09 f4       	brne	.+2      	; 0x51a <DIO_init+0x12>
 518:	40 c0       	rjmp	.+128    	; 0x59a <DIO_init+0x92>
 51a:	83 30       	cpi	r24, 0x03	; 3
 51c:	09 f4       	brne	.+2      	; 0x520 <DIO_init+0x18>
 51e:	5a c0       	rjmp	.+180    	; 0x5d4 <DIO_init+0xcc>
 520:	78 c0       	rjmp	.+240    	; 0x612 <DIO_init+0x10a>
		{
			case PORT_A :
				{
					if (direction == INPUT)
 522:	41 11       	cpse	r20, r1
 524:	0d c0       	rjmp	.+26     	; 0x540 <DIO_init+0x38>
					{
						CLR_BIT(DDRA,PinNum);
 526:	2a b3       	in	r18, 0x1a	; 26
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_init+0x2a>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_init+0x26>
 536:	80 95       	com	r24
 538:	82 23       	and	r24, r18
 53a:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

enu_Dio_ErrorStatus DIO_init(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_PIN_DIR direction){
	enu_Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	08 95       	ret
			case PORT_A :
				{
					if (direction == INPUT)
					{
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
 540:	41 30       	cpi	r20, 0x01	; 1
 542:	09 f0       	breq	.+2      	; 0x546 <DIO_init+0x3e>
 544:	68 c0       	rjmp	.+208    	; 0x616 <DIO_init+0x10e>
						SET_BIT(DDRA,PinNum);
 546:	2a b3       	in	r18, 0x1a	; 26
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_init+0x4a>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_init+0x46>
 556:	82 2b       	or	r24, r18
 558:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

enu_Dio_ErrorStatus DIO_init(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_PIN_DIR direction){
	enu_Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	08 95       	ret
				break;
		
		
			case PORT_B :
				{
					if (direction == INPUT)
 55e:	41 11       	cpse	r20, r1
 560:	0d c0       	rjmp	.+26     	; 0x57c <DIO_init+0x74>
					{
						CLR_BIT(DDRB,PinNum);
 562:	27 b3       	in	r18, 0x17	; 23
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_init+0x66>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_init+0x62>
 572:	80 95       	com	r24
 574:	82 23       	and	r24, r18
 576:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

enu_Dio_ErrorStatus DIO_init(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_PIN_DIR direction){
	enu_Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	08 95       	ret
			case PORT_B :
				{
					if (direction == INPUT)
					{
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
 57c:	41 30       	cpi	r20, 0x01	; 1
 57e:	09 f0       	breq	.+2      	; 0x582 <DIO_init+0x7a>
 580:	4c c0       	rjmp	.+152    	; 0x61a <DIO_init+0x112>
						SET_BIT(DDRB,PinNum);
 582:	27 b3       	in	r18, 0x17	; 23
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_init+0x86>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_init+0x82>
 592:	82 2b       	or	r24, r18
 594:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

enu_Dio_ErrorStatus DIO_init(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_PIN_DIR direction){
	enu_Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	08 95       	ret
		
		
		
			case PORT_C :
				{
					if (direction == INPUT)
 59a:	41 11       	cpse	r20, r1
 59c:	0d c0       	rjmp	.+26     	; 0x5b8 <DIO_init+0xb0>
					{
						CLR_BIT(DDRC,PinNum);
 59e:	24 b3       	in	r18, 0x14	; 20
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_init+0xa2>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_init+0x9e>
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

enu_Dio_ErrorStatus DIO_init(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_PIN_DIR direction){
	enu_Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
			case PORT_C :
				{
					if (direction == INPUT)
					{
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
 5b8:	41 30       	cpi	r20, 0x01	; 1
 5ba:	89 f5       	brne	.+98     	; 0x61e <DIO_init+0x116>
						SET_BIT(DDRC,PinNum);
 5bc:	24 b3       	in	r18, 0x14	; 20
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_init+0xc0>
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	6a 95       	dec	r22
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_init+0xbc>
 5cc:	82 2b       	or	r24, r18
 5ce:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

enu_Dio_ErrorStatus DIO_init(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_PIN_DIR direction){
	enu_Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	08 95       	ret
		
		
		
			case PORT_D :
				{
					if (direction == INPUT)
 5d4:	41 11       	cpse	r20, r1
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <DIO_init+0xea>
					{
						CLR_BIT(DDRD,PinNum);
 5d8:	21 b3       	in	r18, 0x11	; 17
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_init+0xdc>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_init+0xd8>
 5e8:	80 95       	com	r24
 5ea:	82 23       	and	r24, r18
 5ec:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

enu_Dio_ErrorStatus DIO_init(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_PIN_DIR direction){
	enu_Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret
			case PORT_D :
				{
					if (direction == INPUT)
					{
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
 5f2:	41 30       	cpi	r20, 0x01	; 1
 5f4:	b1 f4       	brne	.+44     	; 0x622 <DIO_init+0x11a>
						SET_BIT(DDRD,PinNum);
 5f6:	21 b3       	in	r18, 0x11	; 17
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_init+0xfa>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_init+0xf6>
 606:	82 2b       	or	r24, r18
 608:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

enu_Dio_ErrorStatus DIO_init(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_PIN_DIR direction){
	enu_Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	08 95       	ret
	
	if( (PinNum<PIN_0) || (PinNum>PIN_7) ){
		loc_ErrorStatus = Dio_PinError ;
 60e:	82 e0       	ldi	r24, 0x02	; 2
 610:	08 95       	ret
				}
				break;
		
			default:
			//error handling
				loc_ErrorStatus = Dio_PortError;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	08 95       	ret
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRA,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 616:	84 e0       	ldi	r24, 0x04	; 4
 618:	08 95       	ret
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRB,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 61a:	84 e0       	ldi	r24, 0x04	; 4
 61c:	08 95       	ret
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRC,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	08 95       	ret
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRD,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 622:	84 e0       	ldi	r24, 0x04	; 4
		}
					}
	
	return loc_ErrorStatus ;

}
 624:	08 95       	ret

00000626 <DIO_write>:


enu_Dio_ErrorStatus DIO_write(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_VALUE value){
	enu_Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
	
	if( (PinNum<PIN_0) || (PinNum>PIN_7) ){
 626:	68 30       	cpi	r22, 0x08	; 8
 628:	08 f0       	brcs	.+2      	; 0x62c <DIO_write+0x6>
 62a:	80 c0       	rjmp	.+256    	; 0x72c <DIO_write+0x106>
		loc_errorStatus = Dio_PinError ;
	}
	else{
		switch (PortNum)
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	31 f1       	breq	.+76     	; 0x67c <DIO_write+0x56>
 630:	38 f0       	brcs	.+14     	; 0x640 <DIO_write+0x1a>
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	09 f4       	brne	.+2      	; 0x638 <DIO_write+0x12>
 636:	40 c0       	rjmp	.+128    	; 0x6b8 <DIO_write+0x92>
 638:	83 30       	cpi	r24, 0x03	; 3
 63a:	09 f4       	brne	.+2      	; 0x63e <DIO_write+0x18>
 63c:	5a c0       	rjmp	.+180    	; 0x6f2 <DIO_write+0xcc>
 63e:	78 c0       	rjmp	.+240    	; 0x730 <DIO_write+0x10a>
		{
			case PORT_A :
				{
					if (value == LOW)
 640:	41 11       	cpse	r20, r1
 642:	0d c0       	rjmp	.+26     	; 0x65e <DIO_write+0x38>
					{
						CLR_BIT(PORTA,PinNum);
 644:	2b b3       	in	r18, 0x1b	; 27
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_write+0x2a>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_write+0x26>
 654:	80 95       	com	r24
 656:	82 23       	and	r24, r18
 658:	8b bb       	out	0x1b, r24	; 27

}


enu_Dio_ErrorStatus DIO_write(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_VALUE value){
	enu_Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret
				{
					if (value == LOW)
					{
						CLR_BIT(PORTA,PinNum);
			
					}else if ( value == HIGH){
 65e:	41 30       	cpi	r20, 0x01	; 1
 660:	09 f0       	breq	.+2      	; 0x664 <DIO_write+0x3e>
 662:	68 c0       	rjmp	.+208    	; 0x734 <DIO_write+0x10e>
			
						SET_BIT(PORTA,PinNum);
 664:	2b b3       	in	r18, 0x1b	; 27
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_write+0x4a>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	6a 95       	dec	r22
 672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_write+0x46>
 674:	82 2b       	or	r24, r18
 676:	8b bb       	out	0x1b, r24	; 27

}


enu_Dio_ErrorStatus DIO_write(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_VALUE value){
	enu_Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret
				}
				break;
		
			case PORT_B :
				{
					if (value == LOW)
 67c:	41 11       	cpse	r20, r1
 67e:	0d c0       	rjmp	.+26     	; 0x69a <DIO_write+0x74>
					{
						CLR_BIT(PORTB,PinNum);
 680:	28 b3       	in	r18, 0x18	; 24
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_write+0x66>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_write+0x62>
 690:	80 95       	com	r24
 692:	82 23       	and	r24, r18
 694:	88 bb       	out	0x18, r24	; 24

}


enu_Dio_ErrorStatus DIO_write(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_VALUE value){
	enu_Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	08 95       	ret
				{
					if (value == LOW)
					{
						CLR_BIT(PORTB,PinNum);
			
					}else if ( value == HIGH){
 69a:	41 30       	cpi	r20, 0x01	; 1
 69c:	09 f0       	breq	.+2      	; 0x6a0 <DIO_write+0x7a>
 69e:	4c c0       	rjmp	.+152    	; 0x738 <DIO_write+0x112>
			
						SET_BIT(PORTB,PinNum);
 6a0:	28 b3       	in	r18, 0x18	; 24
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_write+0x86>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	6a 95       	dec	r22
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_write+0x82>
 6b0:	82 2b       	or	r24, r18
 6b2:	88 bb       	out	0x18, r24	; 24

}


enu_Dio_ErrorStatus DIO_write(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_VALUE value){
	enu_Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	08 95       	ret
				}
				break;
		
			case PORT_C :
				{
					if (value == LOW)
 6b8:	41 11       	cpse	r20, r1
 6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <DIO_write+0xb0>
					{
						CLR_BIT(PORTC,PinNum);
 6bc:	25 b3       	in	r18, 0x15	; 21
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_write+0xa2>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	6a 95       	dec	r22
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_write+0x9e>
 6cc:	80 95       	com	r24
 6ce:	82 23       	and	r24, r18
 6d0:	85 bb       	out	0x15, r24	; 21

}


enu_Dio_ErrorStatus DIO_write(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_VALUE value){
	enu_Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	08 95       	ret
				{
					if (value == LOW)
					{
						CLR_BIT(PORTC,PinNum);
			
					}else if ( value == HIGH){
 6d6:	41 30       	cpi	r20, 0x01	; 1
 6d8:	89 f5       	brne	.+98     	; 0x73c <DIO_write+0x116>
			
						SET_BIT(PORTC,PinNum);
 6da:	25 b3       	in	r18, 0x15	; 21
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_write+0xc0>
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	6a 95       	dec	r22
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_write+0xbc>
 6ea:	82 2b       	or	r24, r18
 6ec:	85 bb       	out	0x15, r24	; 21

}


enu_Dio_ErrorStatus DIO_write(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_VALUE value){
	enu_Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	08 95       	ret
				}
				break;
		
			case PORT_D :
				{
					if (value == LOW)
 6f2:	41 11       	cpse	r20, r1
 6f4:	0d c0       	rjmp	.+26     	; 0x710 <DIO_write+0xea>
					{
						CLR_BIT(PORTD,PinNum);
 6f6:	22 b3       	in	r18, 0x12	; 18
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <DIO_write+0xdc>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	6a 95       	dec	r22
 704:	e2 f7       	brpl	.-8      	; 0x6fe <DIO_write+0xd8>
 706:	80 95       	com	r24
 708:	82 23       	and	r24, r18
 70a:	82 bb       	out	0x12, r24	; 18

}


enu_Dio_ErrorStatus DIO_write(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_VALUE value){
	enu_Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	08 95       	ret
				{
					if (value == LOW)
					{
						CLR_BIT(PORTD,PinNum);
			
					}else if ( value == HIGH){
 710:	41 30       	cpi	r20, 0x01	; 1
 712:	b1 f4       	brne	.+44     	; 0x740 <DIO_write+0x11a>
			
						SET_BIT(PORTD,PinNum);
 714:	22 b3       	in	r18, 0x12	; 18
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_write+0xfa>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_write+0xf6>
 724:	82 2b       	or	r24, r18
 726:	82 bb       	out	0x12, r24	; 18

}


enu_Dio_ErrorStatus DIO_write(enu_PORT_NUM PortNum, enu_PIN_NUM PinNum , enu_VALUE value){
	enu_Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	08 95       	ret
	
	if( (PinNum<PIN_0) || (PinNum>PIN_7) ){
		loc_errorStatus = Dio_PinError ;
 72c:	82 e0       	ldi	r24, 0x02	; 2
 72e:	08 95       	ret
				break;
		
		
			default:
			//error handling
				loc_errorStatus = Dio_PortError ;
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTA,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 734:	83 e0       	ldi	r24, 0x03	; 3
 736:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTB,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 738:	83 e0       	ldi	r24, 0x03	; 3
 73a:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTC,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 73c:	83 e0       	ldi	r24, 0x03	; 3
 73e:	08 95       	ret
			
						SET_BIT(PORTD,PinNum);
			
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 740:	83 e0       	ldi	r24, 0x03	; 3
				break;
		
			}
		}
	return loc_errorStatus;
	}
 742:	08 95       	ret

00000744 <ExtInt_init>:
		{
			error_status = NULL_POINTE;
		}
	}
	return error_status;
}
 744:	85 b7       	in	r24, 0x35	; 53
 746:	82 60       	ori	r24, 0x02	; 2
 748:	85 bf       	out	0x35, r24	; 53
 74a:	85 b7       	in	r24, 0x35	; 53
 74c:	8e 7f       	andi	r24, 0xFE	; 254
 74e:	85 bf       	out	0x35, r24	; 53
 750:	8b b7       	in	r24, 0x3b	; 59
 752:	80 64       	ori	r24, 0x40	; 64
 754:	8b bf       	out	0x3b, r24	; 59
 756:	85 b7       	in	r24, 0x35	; 53
 758:	88 60       	ori	r24, 0x08	; 8
 75a:	85 bf       	out	0x35, r24	; 53
 75c:	85 b7       	in	r24, 0x35	; 53
 75e:	8b 7f       	andi	r24, 0xFB	; 251
 760:	85 bf       	out	0x35, r24	; 53
 762:	8b b7       	in	r24, 0x3b	; 59
 764:	80 68       	ori	r24, 0x80	; 128
 766:	8b bf       	out	0x3b, r24	; 59
 768:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_status>
 76c:	08 95       	ret

0000076e <INT0_SetCallback>:
 76e:	9c 01       	movw	r18, r24
 770:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <error_status>
 774:	93 30       	cpi	r25, 0x03	; 3
 776:	71 f4       	brne	.+28     	; 0x794 <INT0_SetCallback+0x26>
 778:	21 15       	cp	r18, r1
 77a:	31 05       	cpc	r19, r1
 77c:	41 f0       	breq	.+16     	; 0x78e <INT0_SetCallback+0x20>
 77e:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <P0_CallbackFunction+0x1>
 782:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <P0_CallbackFunction>
 786:	83 e0       	ldi	r24, 0x03	; 3
 788:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_status>
 78c:	03 c0       	rjmp	.+6      	; 0x794 <INT0_SetCallback+0x26>
 78e:	82 e0       	ldi	r24, 0x02	; 2
 790:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_status>
 794:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_status>
 798:	08 95       	ret

0000079a <INT1_SetCallback>:
 79a:	9c 01       	movw	r18, r24
 79c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <error_status>
 7a0:	93 30       	cpi	r25, 0x03	; 3
 7a2:	71 f4       	brne	.+28     	; 0x7c0 <INT1_SetCallback+0x26>
 7a4:	21 15       	cp	r18, r1
 7a6:	31 05       	cpc	r19, r1
 7a8:	41 f0       	breq	.+16     	; 0x7ba <INT1_SetCallback+0x20>
 7aa:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <P1_CallbackFunction+0x1>
 7ae:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <P1_CallbackFunction>
 7b2:	83 e0       	ldi	r24, 0x03	; 3
 7b4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_status>
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <INT1_SetCallback+0x26>
 7ba:	82 e0       	ldi	r24, 0x02	; 2
 7bc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_status>
 7c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_status>
 7c4:	08 95       	ret

000007c6 <__vector_1>:
//					 ISR FUNCTION
/***************************************************/
 
/**********  ISR OF INT_0  ************/

ISR(EXT_INT_0){
 7c6:	1f 92       	push	r1
 7c8:	0f 92       	push	r0
 7ca:	0f b6       	in	r0, 0x3f	; 63
 7cc:	0f 92       	push	r0
 7ce:	11 24       	eor	r1, r1
 7d0:	2f 93       	push	r18
 7d2:	3f 93       	push	r19
 7d4:	4f 93       	push	r20
 7d6:	5f 93       	push	r21
 7d8:	6f 93       	push	r22
 7da:	7f 93       	push	r23
 7dc:	8f 93       	push	r24
 7de:	9f 93       	push	r25
 7e0:	af 93       	push	r26
 7e2:	bf 93       	push	r27
 7e4:	ef 93       	push	r30
 7e6:	ff 93       	push	r31

	
		P0_CallbackFunction();
 7e8:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <P0_CallbackFunction>
 7ec:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <P0_CallbackFunction+0x1>
 7f0:	09 95       	icall
	
	
}
 7f2:	ff 91       	pop	r31
 7f4:	ef 91       	pop	r30
 7f6:	bf 91       	pop	r27
 7f8:	af 91       	pop	r26
 7fa:	9f 91       	pop	r25
 7fc:	8f 91       	pop	r24
 7fe:	7f 91       	pop	r23
 800:	6f 91       	pop	r22
 802:	5f 91       	pop	r21
 804:	4f 91       	pop	r20
 806:	3f 91       	pop	r19
 808:	2f 91       	pop	r18
 80a:	0f 90       	pop	r0
 80c:	0f be       	out	0x3f, r0	; 63
 80e:	0f 90       	pop	r0
 810:	1f 90       	pop	r1
 812:	18 95       	reti

00000814 <__vector_2>:


/**********  ISR OF INT_1  ************/

ISR(EXT_INT_1){
 814:	1f 92       	push	r1
 816:	0f 92       	push	r0
 818:	0f b6       	in	r0, 0x3f	; 63
 81a:	0f 92       	push	r0
 81c:	11 24       	eor	r1, r1
 81e:	2f 93       	push	r18
 820:	3f 93       	push	r19
 822:	4f 93       	push	r20
 824:	5f 93       	push	r21
 826:	6f 93       	push	r22
 828:	7f 93       	push	r23
 82a:	8f 93       	push	r24
 82c:	9f 93       	push	r25
 82e:	af 93       	push	r26
 830:	bf 93       	push	r27
 832:	ef 93       	push	r30
 834:	ff 93       	push	r31

	
		P1_CallbackFunction();
 836:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P1_CallbackFunction>
 83a:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P1_CallbackFunction+0x1>
 83e:	09 95       	icall
	
	
}
 840:	ff 91       	pop	r31
 842:	ef 91       	pop	r30
 844:	bf 91       	pop	r27
 846:	af 91       	pop	r26
 848:	9f 91       	pop	r25
 84a:	8f 91       	pop	r24
 84c:	7f 91       	pop	r23
 84e:	6f 91       	pop	r22
 850:	5f 91       	pop	r21
 852:	4f 91       	pop	r20
 854:	3f 91       	pop	r19
 856:	2f 91       	pop	r18
 858:	0f 90       	pop	r0
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	0f 90       	pop	r0
 85e:	1f 90       	pop	r1
 860:	18 95       	reti

00000862 <__vector_3>:


/**********  ISR OF INT_2  ************/

ISR(EXT_INT_2){
 862:	1f 92       	push	r1
 864:	0f 92       	push	r0
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	0f 92       	push	r0
 86a:	11 24       	eor	r1, r1
 86c:	2f 93       	push	r18
 86e:	3f 93       	push	r19
 870:	4f 93       	push	r20
 872:	5f 93       	push	r21
 874:	6f 93       	push	r22
 876:	7f 93       	push	r23
 878:	8f 93       	push	r24
 87a:	9f 93       	push	r25
 87c:	af 93       	push	r26
 87e:	bf 93       	push	r27
 880:	ef 93       	push	r30
 882:	ff 93       	push	r31

	
		P2_CallbackFunction();
 884:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <P2_CallbackFunction>
 888:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <P2_CallbackFunction+0x1>
 88c:	09 95       	icall
	
	
 88e:	ff 91       	pop	r31
 890:	ef 91       	pop	r30
 892:	bf 91       	pop	r27
 894:	af 91       	pop	r26
 896:	9f 91       	pop	r25
 898:	8f 91       	pop	r24
 89a:	7f 91       	pop	r23
 89c:	6f 91       	pop	r22
 89e:	5f 91       	pop	r21
 8a0:	4f 91       	pop	r20
 8a2:	3f 91       	pop	r19
 8a4:	2f 91       	pop	r18
 8a6:	0f 90       	pop	r0
 8a8:	0f be       	out	0x3f, r0	; 63
 8aa:	0f 90       	pop	r0
 8ac:	1f 90       	pop	r1
 8ae:	18 95       	reti

000008b0 <TIMER_0_init>:

void TIMER_0_stop(void){
	
	CLR_BIT(TCCR0,CS00);
	CLR_BIT(TCCR0,CS01);
	CLR_BIT(TCCR0,CS02);
 8b0:	81 30       	cpi	r24, 0x01	; 1
 8b2:	f1 f0       	breq	.+60     	; 0x8f0 <TIMER_0_init+0x40>
 8b4:	28 f0       	brcs	.+10     	; 0x8c0 <TIMER_0_init+0x10>
 8b6:	82 30       	cpi	r24, 0x02	; 2
 8b8:	99 f0       	breq	.+38     	; 0x8e0 <TIMER_0_init+0x30>
 8ba:	83 30       	cpi	r24, 0x03	; 3
 8bc:	49 f0       	breq	.+18     	; 0x8d0 <TIMER_0_init+0x20>
 8be:	20 c0       	rjmp	.+64     	; 0x900 <TIMER_0_init+0x50>
 8c0:	83 b7       	in	r24, 0x33	; 51
 8c2:	8f 7b       	andi	r24, 0xBF	; 191
 8c4:	83 bf       	out	0x33, r24	; 51
 8c6:	83 b7       	in	r24, 0x33	; 51
 8c8:	87 7f       	andi	r24, 0xF7	; 247
 8ca:	83 bf       	out	0x33, r24	; 51
 8cc:	84 e0       	ldi	r24, 0x04	; 4
 8ce:	08 95       	ret
 8d0:	83 b7       	in	r24, 0x33	; 51
 8d2:	80 64       	ori	r24, 0x40	; 64
 8d4:	83 bf       	out	0x33, r24	; 51
 8d6:	83 b7       	in	r24, 0x33	; 51
 8d8:	87 7f       	andi	r24, 0xF7	; 247
 8da:	83 bf       	out	0x33, r24	; 51
 8dc:	84 e0       	ldi	r24, 0x04	; 4
 8de:	08 95       	ret
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	8f 7b       	andi	r24, 0xBF	; 191
 8e4:	83 bf       	out	0x33, r24	; 51
 8e6:	83 b7       	in	r24, 0x33	; 51
 8e8:	88 60       	ori	r24, 0x08	; 8
 8ea:	83 bf       	out	0x33, r24	; 51
 8ec:	84 e0       	ldi	r24, 0x04	; 4
 8ee:	08 95       	ret
 8f0:	83 b7       	in	r24, 0x33	; 51
 8f2:	80 64       	ori	r24, 0x40	; 64
 8f4:	83 bf       	out	0x33, r24	; 51
 8f6:	83 b7       	in	r24, 0x33	; 51
 8f8:	88 60       	ori	r24, 0x08	; 8
 8fa:	83 bf       	out	0x33, r24	; 51
 8fc:	84 e0       	ldi	r24, 0x04	; 4
 8fe:	08 95       	ret
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	08 95       	ret

00000904 <TIMER_0_start>:
 904:	82 30       	cpi	r24, 0x02	; 2
 906:	09 f1       	breq	.+66     	; 0x94a <TIMER_0_start+0x46>
 908:	28 f4       	brcc	.+10     	; 0x914 <TIMER_0_start+0x10>
 90a:	88 23       	and	r24, r24
 90c:	41 f0       	breq	.+16     	; 0x91e <TIMER_0_start+0x1a>
 90e:	81 30       	cpi	r24, 0x01	; 1
 910:	89 f0       	breq	.+34     	; 0x934 <TIMER_0_start+0x30>
 912:	3c c0       	rjmp	.+120    	; 0x98c <TIMER_0_start+0x88>
 914:	83 30       	cpi	r24, 0x03	; 3
 916:	21 f1       	breq	.+72     	; 0x960 <TIMER_0_start+0x5c>
 918:	84 30       	cpi	r24, 0x04	; 4
 91a:	69 f1       	breq	.+90     	; 0x976 <TIMER_0_start+0x72>
 91c:	37 c0       	rjmp	.+110    	; 0x98c <TIMER_0_start+0x88>
 91e:	83 b7       	in	r24, 0x33	; 51
 920:	81 60       	ori	r24, 0x01	; 1
 922:	83 bf       	out	0x33, r24	; 51
 924:	83 b7       	in	r24, 0x33	; 51
 926:	8d 7f       	andi	r24, 0xFD	; 253
 928:	83 bf       	out	0x33, r24	; 51
 92a:	83 b7       	in	r24, 0x33	; 51
 92c:	8b 7f       	andi	r24, 0xFB	; 251
 92e:	83 bf       	out	0x33, r24	; 51
 930:	84 e0       	ldi	r24, 0x04	; 4
 932:	08 95       	ret
 934:	83 b7       	in	r24, 0x33	; 51
 936:	82 60       	ori	r24, 0x02	; 2
 938:	83 bf       	out	0x33, r24	; 51
 93a:	83 b7       	in	r24, 0x33	; 51
 93c:	8e 7f       	andi	r24, 0xFE	; 254
 93e:	83 bf       	out	0x33, r24	; 51
 940:	83 b7       	in	r24, 0x33	; 51
 942:	8b 7f       	andi	r24, 0xFB	; 251
 944:	83 bf       	out	0x33, r24	; 51
 946:	84 e0       	ldi	r24, 0x04	; 4
 948:	08 95       	ret
 94a:	83 b7       	in	r24, 0x33	; 51
 94c:	81 60       	ori	r24, 0x01	; 1
 94e:	83 bf       	out	0x33, r24	; 51
 950:	83 b7       	in	r24, 0x33	; 51
 952:	82 60       	ori	r24, 0x02	; 2
 954:	83 bf       	out	0x33, r24	; 51
 956:	83 b7       	in	r24, 0x33	; 51
 958:	8b 7f       	andi	r24, 0xFB	; 251
 95a:	83 bf       	out	0x33, r24	; 51
 95c:	84 e0       	ldi	r24, 0x04	; 4
 95e:	08 95       	ret
 960:	83 b7       	in	r24, 0x33	; 51
 962:	84 60       	ori	r24, 0x04	; 4
 964:	83 bf       	out	0x33, r24	; 51
 966:	83 b7       	in	r24, 0x33	; 51
 968:	8d 7f       	andi	r24, 0xFD	; 253
 96a:	83 bf       	out	0x33, r24	; 51
 96c:	83 b7       	in	r24, 0x33	; 51
 96e:	8e 7f       	andi	r24, 0xFE	; 254
 970:	83 bf       	out	0x33, r24	; 51
 972:	84 e0       	ldi	r24, 0x04	; 4
 974:	08 95       	ret
 976:	83 b7       	in	r24, 0x33	; 51
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	83 bf       	out	0x33, r24	; 51
 97c:	83 b7       	in	r24, 0x33	; 51
 97e:	8d 7f       	andi	r24, 0xFD	; 253
 980:	83 bf       	out	0x33, r24	; 51
 982:	83 b7       	in	r24, 0x33	; 51
 984:	84 60       	ori	r24, 0x04	; 4
 986:	83 bf       	out	0x33, r24	; 51
 988:	84 e0       	ldi	r24, 0x04	; 4
 98a:	08 95       	ret
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	08 95       	ret

00000990 <TIMER_0_setIntialValue>:
enu_Timer_ErrorStatus TIMER_0_setIntialValue(uint8_t value){
	enu_Timer_ErrorStatus errorStatus = TIMER_OK;

	if(value < TIMR0_MAX_VALUE && value >= 0){
		
		TCNT0 = value ;
 990:	82 bf       	out	0x32, r24	; 50
	}else{
		errorStatus = INVALID_VALUE;
	}
	return errorStatus ;
}
 992:	84 e0       	ldi	r24, 0x04	; 4
 994:	08 95       	ret

00000996 <TIMER_0_OvfNum>:


enu_Timer_ErrorStatus TIMER_0_OvfNum(double overflow){
 996:	8f 92       	push	r8
 998:	9f 92       	push	r9
 99a:	af 92       	push	r10
 99c:	bf 92       	push	r11
 99e:	cf 92       	push	r12
 9a0:	df 92       	push	r13
 9a2:	ef 92       	push	r14
 9a4:	ff 92       	push	r15
 9a6:	4b 01       	movw	r8, r22
 9a8:	5c 01       	movw	r10, r24
	enu_Timer_ErrorStatus errorStatus = TIMER_OK;
	double num_ovf = 0;
	if (overflow > 0)
 9aa:	20 e0       	ldi	r18, 0x00	; 0
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	a9 01       	movw	r20, r18
 9b0:	0e 94 11 07 	call	0xe22	; 0xe22 <__gesf2>
 9b4:	18 16       	cp	r1, r24
 9b6:	94 f0       	brlt	.+36     	; 0x9dc <TIMER_0_OvfNum+0x46>
 9b8:	1e c0       	rjmp	.+60     	; 0x9f6 <TIMER_0_OvfNum+0x60>
	{
		
		while(num_ovf < overflow){
			
			while(GET_BIT(TIFR,TOV0)==0);
 9ba:	08 b6       	in	r0, 0x38	; 56
 9bc:	00 fe       	sbrs	r0, 0
 9be:	fd cf       	rjmp	.-6      	; 0x9ba <TIMER_0_OvfNum+0x24>
			SET_BIT(TIFR,TOV0);
 9c0:	88 b7       	in	r24, 0x38	; 56
 9c2:	81 60       	ori	r24, 0x01	; 1
 9c4:	88 bf       	out	0x38, r24	; 56
			num_ovf++;
 9c6:	20 e0       	ldi	r18, 0x00	; 0
 9c8:	30 e0       	ldi	r19, 0x00	; 0
 9ca:	40 e8       	ldi	r20, 0x80	; 128
 9cc:	5f e3       	ldi	r21, 0x3F	; 63
 9ce:	c7 01       	movw	r24, r14
 9d0:	b6 01       	movw	r22, r12
 9d2:	0e 94 61 05 	call	0xac2	; 0xac2 <__addsf3>
 9d6:	6b 01       	movw	r12, r22
 9d8:	7c 01       	movw	r14, r24
 9da:	03 c0       	rjmp	.+6      	; 0x9e2 <TIMER_0_OvfNum+0x4c>
 9dc:	c1 2c       	mov	r12, r1
 9de:	d1 2c       	mov	r13, r1
 9e0:	76 01       	movw	r14, r12
	enu_Timer_ErrorStatus errorStatus = TIMER_OK;
	double num_ovf = 0;
	if (overflow > 0)
	{
		
		while(num_ovf < overflow){
 9e2:	a5 01       	movw	r20, r10
 9e4:	94 01       	movw	r18, r8
 9e6:	c7 01       	movw	r24, r14
 9e8:	b6 01       	movw	r22, r12
 9ea:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__cmpsf2>
 9ee:	88 23       	and	r24, r24
 9f0:	24 f3       	brlt	.-56     	; 0x9ba <TIMER_0_OvfNum+0x24>
	return errorStatus ;
}


enu_Timer_ErrorStatus TIMER_0_OvfNum(double overflow){
	enu_Timer_ErrorStatus errorStatus = TIMER_OK;
 9f2:	84 e0       	ldi	r24, 0x04	; 4
 9f4:	2a c0       	rjmp	.+84     	; 0xa4a <TIMER_0_OvfNum+0xb4>
			while(GET_BIT(TIFR,TOV0)==0);
			SET_BIT(TIFR,TOV0);
			num_ovf++;
		}
		num_ovf = 0;
	}else if (overflow <= 0)
 9f6:	20 e0       	ldi	r18, 0x00	; 0
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	a9 01       	movw	r20, r18
 9fc:	c5 01       	movw	r24, r10
 9fe:	b4 01       	movw	r22, r8
 a00:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__cmpsf2>
 a04:	18 16       	cp	r1, r24
 a06:	9c f4       	brge	.+38     	; 0xa2e <TIMER_0_OvfNum+0x98>
		}
		num_ovf = 0;
	}
		
		else{
			errorStatus = INVALID_OVF;
 a08:	82 e0       	ldi	r24, 0x02	; 2
 a0a:	1f c0       	rjmp	.+62     	; 0xa4a <TIMER_0_OvfNum+0xb4>
	}else if (overflow <= 0)
	{
		overflow = 1 ;
		while(num_ovf < overflow){
			
			while(GET_BIT(TIFR,TOV0)==0);
 a0c:	08 b6       	in	r0, 0x38	; 56
 a0e:	00 fe       	sbrs	r0, 0
 a10:	fd cf       	rjmp	.-6      	; 0xa0c <TIMER_0_OvfNum+0x76>
			SET_BIT(TIFR,TOV0);
 a12:	88 b7       	in	r24, 0x38	; 56
 a14:	81 60       	ori	r24, 0x01	; 1
 a16:	88 bf       	out	0x38, r24	; 56
			num_ovf++;
 a18:	20 e0       	ldi	r18, 0x00	; 0
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	40 e8       	ldi	r20, 0x80	; 128
 a1e:	5f e3       	ldi	r21, 0x3F	; 63
 a20:	c7 01       	movw	r24, r14
 a22:	b6 01       	movw	r22, r12
 a24:	0e 94 61 05 	call	0xac2	; 0xac2 <__addsf3>
 a28:	6b 01       	movw	r12, r22
 a2a:	7c 01       	movw	r14, r24
 a2c:	03 c0       	rjmp	.+6      	; 0xa34 <TIMER_0_OvfNum+0x9e>
 a2e:	c1 2c       	mov	r12, r1
 a30:	d1 2c       	mov	r13, r1
 a32:	76 01       	movw	r14, r12
		}
		num_ovf = 0;
	}else if (overflow <= 0)
	{
		overflow = 1 ;
		while(num_ovf < overflow){
 a34:	20 e0       	ldi	r18, 0x00	; 0
 a36:	30 e0       	ldi	r19, 0x00	; 0
 a38:	40 e8       	ldi	r20, 0x80	; 128
 a3a:	5f e3       	ldi	r21, 0x3F	; 63
 a3c:	c7 01       	movw	r24, r14
 a3e:	b6 01       	movw	r22, r12
 a40:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__cmpsf2>
 a44:	88 23       	and	r24, r24
 a46:	14 f3       	brlt	.-60     	; 0xa0c <TIMER_0_OvfNum+0x76>
	return errorStatus ;
}


enu_Timer_ErrorStatus TIMER_0_OvfNum(double overflow){
	enu_Timer_ErrorStatus errorStatus = TIMER_OK;
 a48:	84 e0       	ldi	r24, 0x04	; 4
		else{
			errorStatus = INVALID_OVF;
		}
	
	return errorStatus;
}
 a4a:	ff 90       	pop	r15
 a4c:	ef 90       	pop	r14
 a4e:	df 90       	pop	r13
 a50:	cf 90       	pop	r12
 a52:	bf 90       	pop	r11
 a54:	af 90       	pop	r10
 a56:	9f 90       	pop	r9
 a58:	8f 90       	pop	r8
 a5a:	08 95       	ret

00000a5c <TIMER_0_DELAY_MS>:

void TIMER_0_DELAY_MS(double time_ms){
	 t = time_ms/1000 ;
 a5c:	20 e0       	ldi	r18, 0x00	; 0
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	4a e7       	ldi	r20, 0x7A	; 122
 a62:	54 e4       	ldi	r21, 0x44	; 68
 a64:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__divsf3>
 a68:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <t>
 a6c:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <t+0x1>
 a70:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <t+0x2>
 a74:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <t+0x3>
	ovfNum = ceil (t / 0.000256) ;
 a78:	2d eb       	ldi	r18, 0xBD	; 189
 a7a:	37 e3       	ldi	r19, 0x37	; 55
 a7c:	46 e8       	ldi	r20, 0x86	; 134
 a7e:	59 e3       	ldi	r21, 0x39	; 57
 a80:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__divsf3>
 a84:	0e 94 cd 05 	call	0xb9a	; 0xb9a <ceil>
 a88:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <ovfNum>
 a8c:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <ovfNum+0x1>
 a90:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ovfNum+0x2>
 a94:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <ovfNum+0x3>
	TIMER_0_init(NORMAL_MODE);
 a98:	80 e0       	ldi	r24, 0x00	; 0
 a9a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <TIMER_0_init>
	TIMER_0_setIntialValue(0);
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	0e 94 c8 04 	call	0x990	; 0x990 <TIMER_0_setIntialValue>
	TIMER_0_start(PRECALER_1);
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	0e 94 82 04 	call	0x904	; 0x904 <TIMER_0_start>
	TIMER_0_OvfNum(ovfNum);
 aaa:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <ovfNum>
 aae:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <ovfNum+0x1>
 ab2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ovfNum+0x2>
 ab6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ovfNum+0x3>
 aba:	0e 94 cb 04 	call	0x996	; 0x996 <TIMER_0_OvfNum>
 abe:	08 95       	ret

00000ac0 <__subsf3>:
 ac0:	50 58       	subi	r21, 0x80	; 128

00000ac2 <__addsf3>:
 ac2:	bb 27       	eor	r27, r27
 ac4:	aa 27       	eor	r26, r26
 ac6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__addsf3x>
 aca:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_round>
 ace:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_pscA>
 ad2:	38 f0       	brcs	.+14     	; 0xae2 <__addsf3+0x20>
 ad4:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fp_pscB>
 ad8:	20 f0       	brcs	.+8      	; 0xae2 <__addsf3+0x20>
 ada:	39 f4       	brne	.+14     	; 0xaea <__addsf3+0x28>
 adc:	9f 3f       	cpi	r25, 0xFF	; 255
 ade:	19 f4       	brne	.+6      	; 0xae6 <__addsf3+0x24>
 ae0:	26 f4       	brtc	.+8      	; 0xaea <__addsf3+0x28>
 ae2:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_nan>
 ae6:	0e f4       	brtc	.+2      	; 0xaea <__addsf3+0x28>
 ae8:	e0 95       	com	r30
 aea:	e7 fb       	bst	r30, 7
 aec:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_inf>

00000af0 <__addsf3x>:
 af0:	e9 2f       	mov	r30, r25
 af2:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_split3>
 af6:	58 f3       	brcs	.-42     	; 0xace <__addsf3+0xc>
 af8:	ba 17       	cp	r27, r26
 afa:	62 07       	cpc	r22, r18
 afc:	73 07       	cpc	r23, r19
 afe:	84 07       	cpc	r24, r20
 b00:	95 07       	cpc	r25, r21
 b02:	20 f0       	brcs	.+8      	; 0xb0c <__addsf3x+0x1c>
 b04:	79 f4       	brne	.+30     	; 0xb24 <__addsf3x+0x34>
 b06:	a6 f5       	brtc	.+104    	; 0xb70 <__addsf3x+0x80>
 b08:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__fp_zero>
 b0c:	0e f4       	brtc	.+2      	; 0xb10 <__addsf3x+0x20>
 b0e:	e0 95       	com	r30
 b10:	0b 2e       	mov	r0, r27
 b12:	ba 2f       	mov	r27, r26
 b14:	a0 2d       	mov	r26, r0
 b16:	0b 01       	movw	r0, r22
 b18:	b9 01       	movw	r22, r18
 b1a:	90 01       	movw	r18, r0
 b1c:	0c 01       	movw	r0, r24
 b1e:	ca 01       	movw	r24, r20
 b20:	a0 01       	movw	r20, r0
 b22:	11 24       	eor	r1, r1
 b24:	ff 27       	eor	r31, r31
 b26:	59 1b       	sub	r21, r25
 b28:	99 f0       	breq	.+38     	; 0xb50 <__addsf3x+0x60>
 b2a:	59 3f       	cpi	r21, 0xF9	; 249
 b2c:	50 f4       	brcc	.+20     	; 0xb42 <__addsf3x+0x52>
 b2e:	50 3e       	cpi	r21, 0xE0	; 224
 b30:	68 f1       	brcs	.+90     	; 0xb8c <__addsf3x+0x9c>
 b32:	1a 16       	cp	r1, r26
 b34:	f0 40       	sbci	r31, 0x00	; 0
 b36:	a2 2f       	mov	r26, r18
 b38:	23 2f       	mov	r18, r19
 b3a:	34 2f       	mov	r19, r20
 b3c:	44 27       	eor	r20, r20
 b3e:	58 5f       	subi	r21, 0xF8	; 248
 b40:	f3 cf       	rjmp	.-26     	; 0xb28 <__addsf3x+0x38>
 b42:	46 95       	lsr	r20
 b44:	37 95       	ror	r19
 b46:	27 95       	ror	r18
 b48:	a7 95       	ror	r26
 b4a:	f0 40       	sbci	r31, 0x00	; 0
 b4c:	53 95       	inc	r21
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <__addsf3x+0x52>
 b50:	7e f4       	brtc	.+30     	; 0xb70 <__addsf3x+0x80>
 b52:	1f 16       	cp	r1, r31
 b54:	ba 0b       	sbc	r27, r26
 b56:	62 0b       	sbc	r22, r18
 b58:	73 0b       	sbc	r23, r19
 b5a:	84 0b       	sbc	r24, r20
 b5c:	ba f0       	brmi	.+46     	; 0xb8c <__addsf3x+0x9c>
 b5e:	91 50       	subi	r25, 0x01	; 1
 b60:	a1 f0       	breq	.+40     	; 0xb8a <__addsf3x+0x9a>
 b62:	ff 0f       	add	r31, r31
 b64:	bb 1f       	adc	r27, r27
 b66:	66 1f       	adc	r22, r22
 b68:	77 1f       	adc	r23, r23
 b6a:	88 1f       	adc	r24, r24
 b6c:	c2 f7       	brpl	.-16     	; 0xb5e <__addsf3x+0x6e>
 b6e:	0e c0       	rjmp	.+28     	; 0xb8c <__addsf3x+0x9c>
 b70:	ba 0f       	add	r27, r26
 b72:	62 1f       	adc	r22, r18
 b74:	73 1f       	adc	r23, r19
 b76:	84 1f       	adc	r24, r20
 b78:	48 f4       	brcc	.+18     	; 0xb8c <__addsf3x+0x9c>
 b7a:	87 95       	ror	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	b7 95       	ror	r27
 b82:	f7 95       	ror	r31
 b84:	9e 3f       	cpi	r25, 0xFE	; 254
 b86:	08 f0       	brcs	.+2      	; 0xb8a <__addsf3x+0x9a>
 b88:	b0 cf       	rjmp	.-160    	; 0xaea <__addsf3+0x28>
 b8a:	93 95       	inc	r25
 b8c:	88 0f       	add	r24, r24
 b8e:	08 f0       	brcs	.+2      	; 0xb92 <__addsf3x+0xa2>
 b90:	99 27       	eor	r25, r25
 b92:	ee 0f       	add	r30, r30
 b94:	97 95       	ror	r25
 b96:	87 95       	ror	r24
 b98:	08 95       	ret

00000b9a <ceil>:
 b9a:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_trunc>
 b9e:	90 f0       	brcs	.+36     	; 0xbc4 <ceil+0x2a>
 ba0:	9f 37       	cpi	r25, 0x7F	; 127
 ba2:	48 f4       	brcc	.+18     	; 0xbb6 <ceil+0x1c>
 ba4:	91 11       	cpse	r25, r1
 ba6:	16 f4       	brtc	.+4      	; 0xbac <ceil+0x12>
 ba8:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__fp_szero>
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	80 e8       	ldi	r24, 0x80	; 128
 bb2:	9f e3       	ldi	r25, 0x3F	; 63
 bb4:	08 95       	ret
 bb6:	26 f0       	brts	.+8      	; 0xbc0 <ceil+0x26>
 bb8:	1b 16       	cp	r1, r27
 bba:	61 1d       	adc	r22, r1
 bbc:	71 1d       	adc	r23, r1
 bbe:	81 1d       	adc	r24, r1
 bc0:	0c 94 85 06 	jmp	0xd0a	; 0xd0a <__fp_mintl>
 bc4:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__fp_mpack>

00000bc8 <__cmpsf2>:
 bc8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_cmp>
 bcc:	08 f4       	brcc	.+2      	; 0xbd0 <__cmpsf2+0x8>
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	08 95       	ret

00000bd2 <__divsf3>:
 bd2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__divsf3x>
 bd6:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_round>
 bda:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fp_pscB>
 bde:	58 f0       	brcs	.+22     	; 0xbf6 <__divsf3+0x24>
 be0:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_pscA>
 be4:	40 f0       	brcs	.+16     	; 0xbf6 <__divsf3+0x24>
 be6:	29 f4       	brne	.+10     	; 0xbf2 <__divsf3+0x20>
 be8:	5f 3f       	cpi	r21, 0xFF	; 255
 bea:	29 f0       	breq	.+10     	; 0xbf6 <__divsf3+0x24>
 bec:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_inf>
 bf0:	51 11       	cpse	r21, r1
 bf2:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__fp_szero>
 bf6:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_nan>

00000bfa <__divsf3x>:
 bfa:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_split3>
 bfe:	68 f3       	brcs	.-38     	; 0xbda <__divsf3+0x8>

00000c00 <__divsf3_pse>:
 c00:	99 23       	and	r25, r25
 c02:	b1 f3       	breq	.-20     	; 0xbf0 <__divsf3+0x1e>
 c04:	55 23       	and	r21, r21
 c06:	91 f3       	breq	.-28     	; 0xbec <__divsf3+0x1a>
 c08:	95 1b       	sub	r25, r21
 c0a:	55 0b       	sbc	r21, r21
 c0c:	bb 27       	eor	r27, r27
 c0e:	aa 27       	eor	r26, r26
 c10:	62 17       	cp	r22, r18
 c12:	73 07       	cpc	r23, r19
 c14:	84 07       	cpc	r24, r20
 c16:	38 f0       	brcs	.+14     	; 0xc26 <__divsf3_pse+0x26>
 c18:	9f 5f       	subi	r25, 0xFF	; 255
 c1a:	5f 4f       	sbci	r21, 0xFF	; 255
 c1c:	22 0f       	add	r18, r18
 c1e:	33 1f       	adc	r19, r19
 c20:	44 1f       	adc	r20, r20
 c22:	aa 1f       	adc	r26, r26
 c24:	a9 f3       	breq	.-22     	; 0xc10 <__divsf3_pse+0x10>
 c26:	35 d0       	rcall	.+106    	; 0xc92 <__divsf3_pse+0x92>
 c28:	0e 2e       	mov	r0, r30
 c2a:	3a f0       	brmi	.+14     	; 0xc3a <__divsf3_pse+0x3a>
 c2c:	e0 e8       	ldi	r30, 0x80	; 128
 c2e:	32 d0       	rcall	.+100    	; 0xc94 <__divsf3_pse+0x94>
 c30:	91 50       	subi	r25, 0x01	; 1
 c32:	50 40       	sbci	r21, 0x00	; 0
 c34:	e6 95       	lsr	r30
 c36:	00 1c       	adc	r0, r0
 c38:	ca f7       	brpl	.-14     	; 0xc2c <__divsf3_pse+0x2c>
 c3a:	2b d0       	rcall	.+86     	; 0xc92 <__divsf3_pse+0x92>
 c3c:	fe 2f       	mov	r31, r30
 c3e:	29 d0       	rcall	.+82     	; 0xc92 <__divsf3_pse+0x92>
 c40:	66 0f       	add	r22, r22
 c42:	77 1f       	adc	r23, r23
 c44:	88 1f       	adc	r24, r24
 c46:	bb 1f       	adc	r27, r27
 c48:	26 17       	cp	r18, r22
 c4a:	37 07       	cpc	r19, r23
 c4c:	48 07       	cpc	r20, r24
 c4e:	ab 07       	cpc	r26, r27
 c50:	b0 e8       	ldi	r27, 0x80	; 128
 c52:	09 f0       	breq	.+2      	; 0xc56 <__divsf3_pse+0x56>
 c54:	bb 0b       	sbc	r27, r27
 c56:	80 2d       	mov	r24, r0
 c58:	bf 01       	movw	r22, r30
 c5a:	ff 27       	eor	r31, r31
 c5c:	93 58       	subi	r25, 0x83	; 131
 c5e:	5f 4f       	sbci	r21, 0xFF	; 255
 c60:	3a f0       	brmi	.+14     	; 0xc70 <__divsf3_pse+0x70>
 c62:	9e 3f       	cpi	r25, 0xFE	; 254
 c64:	51 05       	cpc	r21, r1
 c66:	78 f0       	brcs	.+30     	; 0xc86 <__divsf3_pse+0x86>
 c68:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_inf>
 c6c:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__fp_szero>
 c70:	5f 3f       	cpi	r21, 0xFF	; 255
 c72:	e4 f3       	brlt	.-8      	; 0xc6c <__divsf3_pse+0x6c>
 c74:	98 3e       	cpi	r25, 0xE8	; 232
 c76:	d4 f3       	brlt	.-12     	; 0xc6c <__divsf3_pse+0x6c>
 c78:	86 95       	lsr	r24
 c7a:	77 95       	ror	r23
 c7c:	67 95       	ror	r22
 c7e:	b7 95       	ror	r27
 c80:	f7 95       	ror	r31
 c82:	9f 5f       	subi	r25, 0xFF	; 255
 c84:	c9 f7       	brne	.-14     	; 0xc78 <__divsf3_pse+0x78>
 c86:	88 0f       	add	r24, r24
 c88:	91 1d       	adc	r25, r1
 c8a:	96 95       	lsr	r25
 c8c:	87 95       	ror	r24
 c8e:	97 f9       	bld	r25, 7
 c90:	08 95       	ret
 c92:	e1 e0       	ldi	r30, 0x01	; 1
 c94:	66 0f       	add	r22, r22
 c96:	77 1f       	adc	r23, r23
 c98:	88 1f       	adc	r24, r24
 c9a:	bb 1f       	adc	r27, r27
 c9c:	62 17       	cp	r22, r18
 c9e:	73 07       	cpc	r23, r19
 ca0:	84 07       	cpc	r24, r20
 ca2:	ba 07       	cpc	r27, r26
 ca4:	20 f0       	brcs	.+8      	; 0xcae <__divsf3_pse+0xae>
 ca6:	62 1b       	sub	r22, r18
 ca8:	73 0b       	sbc	r23, r19
 caa:	84 0b       	sbc	r24, r20
 cac:	ba 0b       	sbc	r27, r26
 cae:	ee 1f       	adc	r30, r30
 cb0:	88 f7       	brcc	.-30     	; 0xc94 <__divsf3_pse+0x94>
 cb2:	e0 95       	com	r30
 cb4:	08 95       	ret

00000cb6 <__fp_cmp>:
 cb6:	99 0f       	add	r25, r25
 cb8:	00 08       	sbc	r0, r0
 cba:	55 0f       	add	r21, r21
 cbc:	aa 0b       	sbc	r26, r26
 cbe:	e0 e8       	ldi	r30, 0x80	; 128
 cc0:	fe ef       	ldi	r31, 0xFE	; 254
 cc2:	16 16       	cp	r1, r22
 cc4:	17 06       	cpc	r1, r23
 cc6:	e8 07       	cpc	r30, r24
 cc8:	f9 07       	cpc	r31, r25
 cca:	c0 f0       	brcs	.+48     	; 0xcfc <__fp_cmp+0x46>
 ccc:	12 16       	cp	r1, r18
 cce:	13 06       	cpc	r1, r19
 cd0:	e4 07       	cpc	r30, r20
 cd2:	f5 07       	cpc	r31, r21
 cd4:	98 f0       	brcs	.+38     	; 0xcfc <__fp_cmp+0x46>
 cd6:	62 1b       	sub	r22, r18
 cd8:	73 0b       	sbc	r23, r19
 cda:	84 0b       	sbc	r24, r20
 cdc:	95 0b       	sbc	r25, r21
 cde:	39 f4       	brne	.+14     	; 0xcee <__fp_cmp+0x38>
 ce0:	0a 26       	eor	r0, r26
 ce2:	61 f0       	breq	.+24     	; 0xcfc <__fp_cmp+0x46>
 ce4:	23 2b       	or	r18, r19
 ce6:	24 2b       	or	r18, r20
 ce8:	25 2b       	or	r18, r21
 cea:	21 f4       	brne	.+8      	; 0xcf4 <__fp_cmp+0x3e>
 cec:	08 95       	ret
 cee:	0a 26       	eor	r0, r26
 cf0:	09 f4       	brne	.+2      	; 0xcf4 <__fp_cmp+0x3e>
 cf2:	a1 40       	sbci	r26, 0x01	; 1
 cf4:	a6 95       	lsr	r26
 cf6:	8f ef       	ldi	r24, 0xFF	; 255
 cf8:	81 1d       	adc	r24, r1
 cfa:	81 1d       	adc	r24, r1
 cfc:	08 95       	ret

00000cfe <__fp_inf>:
 cfe:	97 f9       	bld	r25, 7
 d00:	9f 67       	ori	r25, 0x7F	; 127
 d02:	80 e8       	ldi	r24, 0x80	; 128
 d04:	70 e0       	ldi	r23, 0x00	; 0
 d06:	60 e0       	ldi	r22, 0x00	; 0
 d08:	08 95       	ret

00000d0a <__fp_mintl>:
 d0a:	88 23       	and	r24, r24
 d0c:	71 f4       	brne	.+28     	; 0xd2a <__fp_mintl+0x20>
 d0e:	77 23       	and	r23, r23
 d10:	21 f0       	breq	.+8      	; 0xd1a <__fp_mintl+0x10>
 d12:	98 50       	subi	r25, 0x08	; 8
 d14:	87 2b       	or	r24, r23
 d16:	76 2f       	mov	r23, r22
 d18:	07 c0       	rjmp	.+14     	; 0xd28 <__fp_mintl+0x1e>
 d1a:	66 23       	and	r22, r22
 d1c:	11 f4       	brne	.+4      	; 0xd22 <__fp_mintl+0x18>
 d1e:	99 27       	eor	r25, r25
 d20:	0d c0       	rjmp	.+26     	; 0xd3c <__fp_mintl+0x32>
 d22:	90 51       	subi	r25, 0x10	; 16
 d24:	86 2b       	or	r24, r22
 d26:	70 e0       	ldi	r23, 0x00	; 0
 d28:	60 e0       	ldi	r22, 0x00	; 0
 d2a:	2a f0       	brmi	.+10     	; 0xd36 <__fp_mintl+0x2c>
 d2c:	9a 95       	dec	r25
 d2e:	66 0f       	add	r22, r22
 d30:	77 1f       	adc	r23, r23
 d32:	88 1f       	adc	r24, r24
 d34:	da f7       	brpl	.-10     	; 0xd2c <__fp_mintl+0x22>
 d36:	88 0f       	add	r24, r24
 d38:	96 95       	lsr	r25
 d3a:	87 95       	ror	r24
 d3c:	97 f9       	bld	r25, 7
 d3e:	08 95       	ret

00000d40 <__fp_mpack>:
 d40:	9f 3f       	cpi	r25, 0xFF	; 255
 d42:	31 f0       	breq	.+12     	; 0xd50 <__fp_mpack_finite+0xc>

00000d44 <__fp_mpack_finite>:
 d44:	91 50       	subi	r25, 0x01	; 1
 d46:	20 f4       	brcc	.+8      	; 0xd50 <__fp_mpack_finite+0xc>
 d48:	87 95       	ror	r24
 d4a:	77 95       	ror	r23
 d4c:	67 95       	ror	r22
 d4e:	b7 95       	ror	r27
 d50:	88 0f       	add	r24, r24
 d52:	91 1d       	adc	r25, r1
 d54:	96 95       	lsr	r25
 d56:	87 95       	ror	r24
 d58:	97 f9       	bld	r25, 7
 d5a:	08 95       	ret

00000d5c <__fp_nan>:
 d5c:	9f ef       	ldi	r25, 0xFF	; 255
 d5e:	80 ec       	ldi	r24, 0xC0	; 192
 d60:	08 95       	ret

00000d62 <__fp_pscA>:
 d62:	00 24       	eor	r0, r0
 d64:	0a 94       	dec	r0
 d66:	16 16       	cp	r1, r22
 d68:	17 06       	cpc	r1, r23
 d6a:	18 06       	cpc	r1, r24
 d6c:	09 06       	cpc	r0, r25
 d6e:	08 95       	ret

00000d70 <__fp_pscB>:
 d70:	00 24       	eor	r0, r0
 d72:	0a 94       	dec	r0
 d74:	12 16       	cp	r1, r18
 d76:	13 06       	cpc	r1, r19
 d78:	14 06       	cpc	r1, r20
 d7a:	05 06       	cpc	r0, r21
 d7c:	08 95       	ret

00000d7e <__fp_round>:
 d7e:	09 2e       	mov	r0, r25
 d80:	03 94       	inc	r0
 d82:	00 0c       	add	r0, r0
 d84:	11 f4       	brne	.+4      	; 0xd8a <__fp_round+0xc>
 d86:	88 23       	and	r24, r24
 d88:	52 f0       	brmi	.+20     	; 0xd9e <__fp_round+0x20>
 d8a:	bb 0f       	add	r27, r27
 d8c:	40 f4       	brcc	.+16     	; 0xd9e <__fp_round+0x20>
 d8e:	bf 2b       	or	r27, r31
 d90:	11 f4       	brne	.+4      	; 0xd96 <__fp_round+0x18>
 d92:	60 ff       	sbrs	r22, 0
 d94:	04 c0       	rjmp	.+8      	; 0xd9e <__fp_round+0x20>
 d96:	6f 5f       	subi	r22, 0xFF	; 255
 d98:	7f 4f       	sbci	r23, 0xFF	; 255
 d9a:	8f 4f       	sbci	r24, 0xFF	; 255
 d9c:	9f 4f       	sbci	r25, 0xFF	; 255
 d9e:	08 95       	ret

00000da0 <__fp_split3>:
 da0:	57 fd       	sbrc	r21, 7
 da2:	90 58       	subi	r25, 0x80	; 128
 da4:	44 0f       	add	r20, r20
 da6:	55 1f       	adc	r21, r21
 da8:	59 f0       	breq	.+22     	; 0xdc0 <__fp_splitA+0x10>
 daa:	5f 3f       	cpi	r21, 0xFF	; 255
 dac:	71 f0       	breq	.+28     	; 0xdca <__fp_splitA+0x1a>
 dae:	47 95       	ror	r20

00000db0 <__fp_splitA>:
 db0:	88 0f       	add	r24, r24
 db2:	97 fb       	bst	r25, 7
 db4:	99 1f       	adc	r25, r25
 db6:	61 f0       	breq	.+24     	; 0xdd0 <__fp_splitA+0x20>
 db8:	9f 3f       	cpi	r25, 0xFF	; 255
 dba:	79 f0       	breq	.+30     	; 0xdda <__fp_splitA+0x2a>
 dbc:	87 95       	ror	r24
 dbe:	08 95       	ret
 dc0:	12 16       	cp	r1, r18
 dc2:	13 06       	cpc	r1, r19
 dc4:	14 06       	cpc	r1, r20
 dc6:	55 1f       	adc	r21, r21
 dc8:	f2 cf       	rjmp	.-28     	; 0xdae <__fp_split3+0xe>
 dca:	46 95       	lsr	r20
 dcc:	f1 df       	rcall	.-30     	; 0xdb0 <__fp_splitA>
 dce:	08 c0       	rjmp	.+16     	; 0xde0 <__fp_splitA+0x30>
 dd0:	16 16       	cp	r1, r22
 dd2:	17 06       	cpc	r1, r23
 dd4:	18 06       	cpc	r1, r24
 dd6:	99 1f       	adc	r25, r25
 dd8:	f1 cf       	rjmp	.-30     	; 0xdbc <__fp_splitA+0xc>
 dda:	86 95       	lsr	r24
 ddc:	71 05       	cpc	r23, r1
 dde:	61 05       	cpc	r22, r1
 de0:	08 94       	sec
 de2:	08 95       	ret

00000de4 <__fp_trunc>:
 de4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__fp_splitA>
 de8:	a0 f0       	brcs	.+40     	; 0xe12 <__fp_trunc+0x2e>
 dea:	be e7       	ldi	r27, 0x7E	; 126
 dec:	b9 17       	cp	r27, r25
 dee:	88 f4       	brcc	.+34     	; 0xe12 <__fp_trunc+0x2e>
 df0:	bb 27       	eor	r27, r27
 df2:	9f 38       	cpi	r25, 0x8F	; 143
 df4:	60 f4       	brcc	.+24     	; 0xe0e <__fp_trunc+0x2a>
 df6:	16 16       	cp	r1, r22
 df8:	b1 1d       	adc	r27, r1
 dfa:	67 2f       	mov	r22, r23
 dfc:	78 2f       	mov	r23, r24
 dfe:	88 27       	eor	r24, r24
 e00:	98 5f       	subi	r25, 0xF8	; 248
 e02:	f7 cf       	rjmp	.-18     	; 0xdf2 <__fp_trunc+0xe>
 e04:	86 95       	lsr	r24
 e06:	77 95       	ror	r23
 e08:	67 95       	ror	r22
 e0a:	b1 1d       	adc	r27, r1
 e0c:	93 95       	inc	r25
 e0e:	96 39       	cpi	r25, 0x96	; 150
 e10:	c8 f3       	brcs	.-14     	; 0xe04 <__fp_trunc+0x20>
 e12:	08 95       	ret

00000e14 <__fp_zero>:
 e14:	e8 94       	clt

00000e16 <__fp_szero>:
 e16:	bb 27       	eor	r27, r27
 e18:	66 27       	eor	r22, r22
 e1a:	77 27       	eor	r23, r23
 e1c:	cb 01       	movw	r24, r22
 e1e:	97 f9       	bld	r25, 7
 e20:	08 95       	ret

00000e22 <__gesf2>:
 e22:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_cmp>
 e26:	08 f4       	brcc	.+2      	; 0xe2a <__gesf2+0x8>
 e28:	8f ef       	ldi	r24, 0xFF	; 255
 e2a:	08 95       	ret

00000e2c <_exit>:
 e2c:	f8 94       	cli

00000e2e <__stop_program>:
 e2e:	ff cf       	rjmp	.-2      	; 0xe2e <__stop_program>
