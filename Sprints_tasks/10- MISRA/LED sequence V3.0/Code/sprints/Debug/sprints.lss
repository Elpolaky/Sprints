
sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000e58  00000eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080006a  0080006a  00000ef6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002136  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000abb  00000000  00000000  0000323a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000114d  00000000  00000000  00003cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000039c  00000000  00000000  00004e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000995  00000000  00000000  000051e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc4  00000000  00000000  00005b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_1>
   8:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__vector_2>
   c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 02 	call	0x556	; 0x556 <main>
  8a:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SetFlag>:
  92:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
  96:	87 30       	cpi	r24, 0x07	; 7
  98:	20 f4       	brcc	.+8      	; 0xa2 <SetFlag+0x10>
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <flag>
  a0:	08 95       	ret
  a2:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <flag>
  a6:	08 95       	ret

000000a8 <SetDelay>:
  a8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <flag2>
  ac:	8f 5f       	subi	r24, 0xFF	; 255
  ae:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <flag2>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	19 f1       	breq	.+70     	; 0xfc <SetDelay+0x54>
  b6:	18 f4       	brcc	.+6      	; 0xbe <SetDelay+0x16>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	39 f0       	breq	.+14     	; 0xca <SetDelay+0x22>
  bc:	66 c0       	rjmp	.+204    	; 0x18a <SetDelay+0xe2>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	b1 f1       	breq	.+108    	; 0x12e <SetDelay+0x86>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	09 f4       	brne	.+2      	; 0xc8 <SetDelay+0x20>
  c6:	48 c0       	rjmp	.+144    	; 0x158 <SetDelay+0xb0>
  c8:	60 c0       	rjmp	.+192    	; 0x18a <SetDelay+0xe2>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	a8 e4       	ldi	r26, 0x48	; 72
  d0:	b3 e4       	ldi	r27, 0x43	; 67
  d2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
  d6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
  da:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
  de:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a8 e4       	ldi	r26, 0x48	; 72
  e8:	b4 e4       	ldi	r27, 0x44	; 68
  ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  f6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  fa:	08 95       	ret
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	a6 e9       	ldi	r26, 0x96	; 150
 102:	b3 e4       	ldi	r27, 0x43	; 67
 104:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 108:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 10c:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 110:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	af e2       	ldi	r26, 0x2F	; 47
 11a:	b4 e4       	ldi	r27, 0x44	; 68
 11c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 128:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 12c:	08 95       	ret
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	aa ef       	ldi	r26, 0xFA	; 250
 134:	b3 e4       	ldi	r27, 0x43	; 67
 136:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 13a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 13e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 142:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
 146:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14e:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 152:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 156:	08 95       	ret
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	a8 e4       	ldi	r26, 0x48	; 72
 15e:	b4 e4       	ldi	r27, 0x44	; 68
 160:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 164:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 168:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 16c:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	a8 e4       	ldi	r26, 0x48	; 72
 176:	b3 e4       	ldi	r27, 0x43	; 67
 178:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 17c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 188:	08 95       	ret
 18a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <flag2>
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	a8 ec       	ldi	r26, 0xC8	; 200
 194:	b2 e4       	ldi	r27, 0x42	; 66
 196:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <delay_on>
 19a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <delay_on+0x1>
 19e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <delay_on+0x2>
 1a2:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <delay_on+0x3>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	a1 e6       	ldi	r26, 0x61	; 97
 1ac:	b4 e4       	ldi	r27, 0x44	; 68
 1ae:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1b6:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ba:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1be:	08 95       	ret

000001c0 <app_init>:
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	0e 94 6f 02 	call	0x4de	; 0x4de <BUTTON_init>
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 6f 02 	call	0x4de	; 0x4de <BUTTON_init>
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LED_init>
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LED_init>
 1e0:	62 e0       	ldi	r22, 0x02	; 2
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LED_init>
 1e8:	63 e0       	ldi	r22, 0x03	; 3
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 7f 02 	call	0x4fe	; 0x4fe <LED_init>
 1f0:	8f b7       	in	r24, 0x3f	; 63
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	8f bf       	out	0x3f, r24	; 63
 1f6:	0e 94 ce 03 	call	0x79c	; 0x79c <ExtInt_init>
 1fa:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <error_value>
 1fe:	89 e4       	ldi	r24, 0x49	; 73
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <INT0_SetCallback>
 206:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 20a:	84 e5       	ldi	r24, 0x54	; 84
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <INT1_SetCallback>
 212:	08 95       	ret

00000214 <app_start>:
 214:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <flag>
 218:	81 11       	cpse	r24, r1
 21a:	11 c0       	rjmp	.+34     	; 0x23e <app_start+0x2a>
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 234:	63 e0       	ldi	r22, 0x03	; 3
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 23c:	08 95       	ret
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	41 f5       	brne	.+80     	; 0x292 <app_start+0x7e>
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 248:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 24c:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 250:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 254:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 258:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 264:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 268:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 26c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 270:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 274:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 290:	08 95       	ret
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	69 f5       	brne	.+90     	; 0x2f0 <app_start+0xdc>
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 2a6:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 2aa:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 2ae:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 2b2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 2b6:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 2ca:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ce:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2d6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 2da:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 2ee:	08 95       	ret
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	89 f5       	brne	.+98     	; 0x356 <app_start+0x142>
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 30c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 310:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 314:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 318:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 31c:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 338:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 33c:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 340:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 344:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 348:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 34c:	63 e0       	ldi	r22, 0x03	; 3
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 354:	08 95       	ret
 356:	84 30       	cpi	r24, 0x04	; 4
 358:	a9 f5       	brne	.+106    	; 0x3c4 <app_start+0x1b0>
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 36a:	62 e0       	ldi	r22, 0x02	; 2
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 37a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 37e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 382:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 386:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 38a:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 3ae:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3b2:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3ba:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 3be:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 3c2:	08 95       	ret
 3c4:	85 30       	cpi	r24, 0x05	; 5
 3c6:	89 f5       	brne	.+98     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 3e0:	63 e0       	ldi	r22, 0x03	; 3
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 3e8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 3ec:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 3f0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 3f4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 3f8:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 404:	62 e0       	ldi	r22, 0x02	; 2
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 40c:	63 e0       	ldi	r22, 0x03	; 3
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 414:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 418:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 41c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 420:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 424:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 428:	08 95       	ret
 42a:	86 30       	cpi	r24, 0x06	; 6
 42c:	69 f5       	brne	.+90     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 436:	61 e0       	ldi	r22, 0x01	; 1
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 43e:	62 e0       	ldi	r22, 0x02	; 2
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 446:	63 e0       	ldi	r22, 0x03	; 3
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 44e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 452:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 456:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 45a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 45e:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 462:	62 e0       	ldi	r22, 0x02	; 2
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 472:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 476:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 47a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 47e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 482:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 486:	08 95       	ret
 488:	87 30       	cpi	r24, 0x07	; 7
 48a:	41 f5       	brne	.+80     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 4a4:	63 e0       	ldi	r22, 0x03	; 3
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 8f 02 	call	0x51e	; 0x51e <LED_on>
 4ac:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <delay_on>
 4b0:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <delay_on+0x1>
 4b4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <delay_on+0x2>
 4b8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <delay_on+0x3>
 4bc:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 4c0:	63 e0       	ldi	r22, 0x03	; 3
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	0e 94 9f 02 	call	0x53e	; 0x53e <LED_off>
 4c8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4cc:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 4d4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 4d8:	0e 94 42 05 	call	0xa84	; 0xa84 <TIMER_0_DELAY_MS>
 4dc:	08 95       	ret

000004de <BUTTON_init>:
 *  Author: moham
 */ 
#include "button.h"

Dio_ErrorStatus BUTTON_init(PORT_NUM portnum ,PIN_NUM pinnum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portnum,pinnum,INPUT);
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_init>
	if ( loc_errorStatus == Dio_PortError){
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	29 f0       	breq	.+10     	; 0x4f2 <BUTTON_init+0x14>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_PinError){
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	29 f0       	breq	.+10     	; 0x4f6 <BUTTON_init+0x18>
		
		return Dio_PinError;
		
		
	}else if (loc_errorStatus == Dio_DirectionError){
 4ec:	84 30       	cpi	r24, 0x04	; 4
 4ee:	29 f4       	brne	.+10     	; 0x4fa <BUTTON_init+0x1c>
 4f0:	08 95       	ret

Dio_ErrorStatus BUTTON_init(PORT_NUM portnum ,PIN_NUM pinnum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portnum,pinnum,INPUT);
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	08 95       	ret
		
	}else if (loc_errorStatus == Dio_PinError){
		
		return Dio_PinError;
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	08 95       	ret
	}else if (loc_errorStatus == Dio_DirectionError){
	
		return Dio_DirectionError;
	
	}else{
		return Dio_Ok;
 4fa:	80 e0       	ldi	r24, 0x00	; 0
}
}
 4fc:	08 95       	ret

000004fe <LED_init>:
 *  Author: moham
 */ 
#include "led.h"

Dio_ErrorStatus LED_init(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portNum,pinNum,OUTPUT);
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	0e 94 b0 02 	call	0x560	; 0x560 <DIO_init>
	
	if ( loc_errorStatus == Dio_PortError){
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	29 f0       	breq	.+10     	; 0x512 <LED_init+0x14>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_PinError){
 508:	82 30       	cpi	r24, 0x02	; 2
 50a:	29 f0       	breq	.+10     	; 0x516 <LED_init+0x18>
	
		return Dio_PinError;
	
	
	}else if (loc_errorStatus == Dio_DirectionError){
 50c:	84 30       	cpi	r24, 0x04	; 4
 50e:	29 f4       	brne	.+10     	; 0x51a <LED_init+0x1c>
 510:	08 95       	ret
Dio_ErrorStatus LED_init(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portNum,pinNum,OUTPUT);
	
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	08 95       	ret
		
	}else if (loc_errorStatus == Dio_PinError){
	
		return Dio_PinError;
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	08 95       	ret
	}else if (loc_errorStatus == Dio_DirectionError){
		
		return Dio_DirectionError;
		
	}else{
		return Dio_Ok;
 51a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 51c:	08 95       	ret

0000051e <LED_on>:

Dio_ErrorStatus LED_on (PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,HIGH);
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	0e 94 3f 03 	call	0x67e	; 0x67e <DIO_write>
	
	if ( loc_errorStatus == Dio_PortError){
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	29 f0       	breq	.+10     	; 0x532 <LED_on+0x14>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_PinError){
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	29 f0       	breq	.+10     	; 0x536 <LED_on+0x18>
	
	return Dio_PinError;
	
	
	}
	else if (loc_errorStatus == Dio_ValueError){
 52c:	83 30       	cpi	r24, 0x03	; 3
 52e:	29 f4       	brne	.+10     	; 0x53a <LED_on+0x1c>
 530:	08 95       	ret
Dio_ErrorStatus LED_on (PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,HIGH);
	
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	08 95       	ret
		
	}else if (loc_errorStatus == Dio_PinError){
	
	return Dio_PinError;
 536:	82 e0       	ldi	r24, 0x02	; 2
 538:	08 95       	ret
	else if (loc_errorStatus == Dio_ValueError){
		
		return Dio_ValueError;
		
	}else{
		return Dio_Ok;
 53a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 53c:	08 95       	ret

0000053e <LED_off>:

Dio_ErrorStatus LED_off(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,LOW);	
 53e:	40 e0       	ldi	r20, 0x00	; 0
 540:	0e 94 3f 03 	call	0x67e	; 0x67e <DIO_write>
	
	if ( loc_errorStatus == Dio_PortError){
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	19 f0       	breq	.+6      	; 0x54e <LED_off+0x10>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_ValueError){
 548:	83 30       	cpi	r24, 0x03	; 3
 54a:	19 f4       	brne	.+6      	; 0x552 <LED_off+0x14>
 54c:	08 95       	ret
Dio_ErrorStatus LED_off(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_write(portNum,pinNum,LOW);	
	
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	08 95       	ret
	}else if (loc_errorStatus == Dio_ValueError){
		
		return Dio_ValueError;
		
	}else{
		return Dio_Ok;
 552:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
 554:	08 95       	ret

00000556 <main>:
 556:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <app_init>
 55a:	0e 94 0a 01 	call	0x214	; 0x214 <app_start>
 55e:	fd cf       	rjmp	.-6      	; 0x55a <main+0x4>

00000560 <DIO_init>:
#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 560:	68 30       	cpi	r22, 0x08	; 8
 562:	08 f0       	brcs	.+2      	; 0x566 <DIO_init+0x6>
 564:	80 c0       	rjmp	.+256    	; 0x666 <DIO_init+0x106>
		loc_ErrorStatus = Dio_PinError ;
	}
	else{	
		switch (PortNum)
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	31 f1       	breq	.+76     	; 0x5b6 <DIO_init+0x56>
 56a:	38 f0       	brcs	.+14     	; 0x57a <DIO_init+0x1a>
 56c:	82 30       	cpi	r24, 0x02	; 2
 56e:	09 f4       	brne	.+2      	; 0x572 <DIO_init+0x12>
 570:	40 c0       	rjmp	.+128    	; 0x5f2 <DIO_init+0x92>
 572:	83 30       	cpi	r24, 0x03	; 3
 574:	09 f4       	brne	.+2      	; 0x578 <DIO_init+0x18>
 576:	5a c0       	rjmp	.+180    	; 0x62c <DIO_init+0xcc>
 578:	78 c0       	rjmp	.+240    	; 0x66a <DIO_init+0x10a>
		{

			case PORT_A :
					if (direction == INPUT)
 57a:	41 11       	cpse	r20, r1
 57c:	0d c0       	rjmp	.+26     	; 0x598 <DIO_init+0x38>
					{
						CLR_BIT(DDRA,PinNum);
 57e:	2a b3       	in	r18, 0x1a	; 26
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_init+0x2a>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_init+0x26>
 58e:	80 95       	com	r24
 590:	82 23       	and	r24, r18
 592:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	08 95       	ret

			case PORT_A :
					if (direction == INPUT)
					{
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
 598:	41 30       	cpi	r20, 0x01	; 1
 59a:	09 f0       	breq	.+2      	; 0x59e <DIO_init+0x3e>
 59c:	68 c0       	rjmp	.+208    	; 0x66e <DIO_init+0x10e>
						SET_BIT(DDRA,PinNum);
 59e:	2a b3       	in	r18, 0x1a	; 26
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_init+0x4a>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_init+0x46>
 5ae:	82 2b       	or	r24, r18
 5b0:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	08 95       	ret
					}
					break;
		
		
			case PORT_B :
					if (direction == INPUT)
 5b6:	41 11       	cpse	r20, r1
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <DIO_init+0x74>
					{
						CLR_BIT(DDRB,PinNum);
 5ba:	27 b3       	in	r18, 0x17	; 23
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_init+0x66>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_init+0x62>
 5ca:	80 95       	com	r24
 5cc:	82 23       	and	r24, r18
 5ce:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	08 95       	ret
		
			case PORT_B :
					if (direction == INPUT)
					{
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
 5d4:	41 30       	cpi	r20, 0x01	; 1
 5d6:	09 f0       	breq	.+2      	; 0x5da <DIO_init+0x7a>
 5d8:	4c c0       	rjmp	.+152    	; 0x672 <DIO_init+0x112>
						SET_BIT(DDRB,PinNum);
 5da:	27 b3       	in	r18, 0x17	; 23
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_init+0x86>
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_init+0x82>
 5ea:	82 2b       	or	r24, r18
 5ec:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret
					break;
		
		
		
			case PORT_C :
					if (direction == INPUT)
 5f2:	41 11       	cpse	r20, r1
 5f4:	0d c0       	rjmp	.+26     	; 0x610 <DIO_init+0xb0>
					{
						CLR_BIT(DDRC,PinNum);
 5f6:	24 b3       	in	r18, 0x14	; 20
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_init+0xa2>
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	6a 95       	dec	r22
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_init+0x9e>
 606:	80 95       	com	r24
 608:	82 23       	and	r24, r18
 60a:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	08 95       	ret
		
			case PORT_C :
					if (direction == INPUT)
					{
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
 610:	41 30       	cpi	r20, 0x01	; 1
 612:	89 f5       	brne	.+98     	; 0x676 <DIO_init+0x116>
						SET_BIT(DDRC,PinNum);
 614:	24 b3       	in	r18, 0x14	; 20
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_init+0xc0>
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	6a 95       	dec	r22
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_init+0xbc>
 624:	82 2b       	or	r24, r18
 626:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	08 95       	ret
					break;
		
		
		
			case PORT_D :
					if (direction == INPUT)
 62c:	41 11       	cpse	r20, r1
 62e:	0d c0       	rjmp	.+26     	; 0x64a <DIO_init+0xea>
					{
						CLR_BIT(DDRD,PinNum);
 630:	21 b3       	in	r18, 0x11	; 17
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_init+0xdc>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_init+0xd8>
 640:	80 95       	com	r24
 642:	82 23       	and	r24, r18
 644:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	08 95       	ret
		
			case PORT_D :
					if (direction == INPUT)
					{
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
 64a:	41 30       	cpi	r20, 0x01	; 1
 64c:	b1 f4       	brne	.+44     	; 0x67a <DIO_init+0x11a>
						SET_BIT(DDRD,PinNum);
 64e:	21 b3       	in	r18, 0x11	; 17
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_init+0xfa>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_init+0xf6>
 65e:	82 2b       	or	r24, r18
 660:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_ErrorStatus = Dio_PinError ;
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	08 95       	ret
					}
					break;
		
			default:
			//error handling
					loc_ErrorStatus = Dio_PortError;
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	08 95       	ret
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRA,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 66e:	84 e0       	ldi	r24, 0x04	; 4
 670:	08 95       	ret
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRB,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 672:	84 e0       	ldi	r24, 0x04	; 4
 674:	08 95       	ret
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRC,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 676:	84 e0       	ldi	r24, 0x04	; 4
 678:	08 95       	ret
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRD,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 67a:	84 e0       	ldi	r24, 0x04	; 4
		}
					}
	
	return loc_ErrorStatus ;

}
 67c:	08 95       	ret

0000067e <DIO_write>:


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 67e:	68 30       	cpi	r22, 0x08	; 8
 680:	08 f0       	brcs	.+2      	; 0x684 <DIO_write+0x6>
 682:	80 c0       	rjmp	.+256    	; 0x784 <DIO_write+0x106>
		loc_errorStatus = Dio_PinError ;
	}
	else{
		switch (PortNum)
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	31 f1       	breq	.+76     	; 0x6d4 <DIO_write+0x56>
 688:	38 f0       	brcs	.+14     	; 0x698 <DIO_write+0x1a>
 68a:	82 30       	cpi	r24, 0x02	; 2
 68c:	09 f4       	brne	.+2      	; 0x690 <DIO_write+0x12>
 68e:	40 c0       	rjmp	.+128    	; 0x710 <DIO_write+0x92>
 690:	83 30       	cpi	r24, 0x03	; 3
 692:	09 f4       	brne	.+2      	; 0x696 <DIO_write+0x18>
 694:	5a c0       	rjmp	.+180    	; 0x74a <DIO_write+0xcc>
 696:	78 c0       	rjmp	.+240    	; 0x788 <DIO_write+0x10a>
		{
			case PORT_A :
			
					if (value == LOW)
 698:	41 11       	cpse	r20, r1
 69a:	0d c0       	rjmp	.+26     	; 0x6b6 <DIO_write+0x38>
					{
						CLR_BIT(PORTA,PinNum);
 69c:	2b b3       	in	r18, 0x1b	; 27
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_write+0x2a>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	6a 95       	dec	r22
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <DIO_write+0x26>
 6ac:	80 95       	com	r24
 6ae:	82 23       	and	r24, r18
 6b0:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	08 95       	ret
			
					if (value == LOW)
					{
						CLR_BIT(PORTA,PinNum);
			
					}else if ( value == HIGH){
 6b6:	41 30       	cpi	r20, 0x01	; 1
 6b8:	09 f0       	breq	.+2      	; 0x6bc <DIO_write+0x3e>
 6ba:	68 c0       	rjmp	.+208    	; 0x78c <DIO_write+0x10e>
			
						SET_BIT(PORTA,PinNum);
 6bc:	2b b3       	in	r18, 0x1b	; 27
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_write+0x4a>
 6c4:	88 0f       	add	r24, r24
 6c6:	99 1f       	adc	r25, r25
 6c8:	6a 95       	dec	r22
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_write+0x46>
 6cc:	82 2b       	or	r24, r18
 6ce:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_B :
					if (value == LOW)
 6d4:	41 11       	cpse	r20, r1
 6d6:	0d c0       	rjmp	.+26     	; 0x6f2 <DIO_write+0x74>
					{
						CLR_BIT(PORTB,PinNum);
 6d8:	28 b3       	in	r18, 0x18	; 24
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_write+0x66>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	6a 95       	dec	r22
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_write+0x62>
 6e8:	80 95       	com	r24
 6ea:	82 23       	and	r24, r18
 6ec:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	08 95       	ret
			case PORT_B :
					if (value == LOW)
					{
						CLR_BIT(PORTB,PinNum);
			
					}else if ( value == HIGH){
 6f2:	41 30       	cpi	r20, 0x01	; 1
 6f4:	09 f0       	breq	.+2      	; 0x6f8 <DIO_write+0x7a>
 6f6:	4c c0       	rjmp	.+152    	; 0x790 <DIO_write+0x112>
			
						SET_BIT(PORTB,PinNum);
 6f8:	28 b3       	in	r18, 0x18	; 24
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_write+0x86>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	6a 95       	dec	r22
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_write+0x82>
 708:	82 2b       	or	r24, r18
 70a:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_C :
					if (value == LOW)
 710:	41 11       	cpse	r20, r1
 712:	0d c0       	rjmp	.+26     	; 0x72e <DIO_write+0xb0>
					{
						CLR_BIT(PORTC,PinNum);
 714:	25 b3       	in	r18, 0x15	; 21
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_write+0xa2>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_write+0x9e>
 724:	80 95       	com	r24
 726:	82 23       	and	r24, r18
 728:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	08 95       	ret
			case PORT_C :
					if (value == LOW)
					{
						CLR_BIT(PORTC,PinNum);
			
					}else if ( value == HIGH){
 72e:	41 30       	cpi	r20, 0x01	; 1
 730:	89 f5       	brne	.+98     	; 0x794 <DIO_write+0x116>
			
						SET_BIT(PORTC,PinNum);
 732:	25 b3       	in	r18, 0x15	; 21
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_write+0xc0>
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	6a 95       	dec	r22
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_write+0xbc>
 742:	82 2b       	or	r24, r18
 744:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_D :
					if (value == LOW)
 74a:	41 11       	cpse	r20, r1
 74c:	0d c0       	rjmp	.+26     	; 0x768 <DIO_write+0xea>
					{
						CLR_BIT(PORTD,PinNum);
 74e:	22 b3       	in	r18, 0x12	; 18
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_write+0xdc>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	6a 95       	dec	r22
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_write+0xd8>
 75e:	80 95       	com	r24
 760:	82 23       	and	r24, r18
 762:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	08 95       	ret
			case PORT_D :
					if (value == LOW)
					{
						CLR_BIT(PORTD,PinNum);
			
					}else if ( value == HIGH){
 768:	41 30       	cpi	r20, 0x01	; 1
 76a:	b1 f4       	brne	.+44     	; 0x798 <DIO_write+0x11a>
			
						SET_BIT(PORTD,PinNum);
 76c:	22 b3       	in	r18, 0x12	; 18
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_write+0xfa>
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	6a 95       	dec	r22
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_write+0xf6>
 77c:	82 2b       	or	r24, r18
 77e:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_errorStatus = Dio_PinError ;
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	08 95       	ret
					break;
		
		
			default:
			//error handling
				loc_errorStatus = Dio_PortError ;
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTA,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 78c:	83 e0       	ldi	r24, 0x03	; 3
 78e:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTB,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 790:	83 e0       	ldi	r24, 0x03	; 3
 792:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTC,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 794:	83 e0       	ldi	r24, 0x03	; 3
 796:	08 95       	ret
			
						SET_BIT(PORTD,PinNum);
			
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 798:	83 e0       	ldi	r24, 0x03	; 3
				break;
		
				}
		}
	return loc_errorStatus;
	}
 79a:	08 95       	ret

0000079c <ExtInt_init>:

// CALLBACK FUNCTION TO INT_2
Ext_intErrorStatus INT2_SetCallback(void(*callback)(void)){

	P2_CallbackFunction=callback;
}
 79c:	85 b7       	in	r24, 0x35	; 53
 79e:	82 60       	ori	r24, 0x02	; 2
 7a0:	85 bf       	out	0x35, r24	; 53
 7a2:	85 b7       	in	r24, 0x35	; 53
 7a4:	8e 7f       	andi	r24, 0xFE	; 254
 7a6:	85 bf       	out	0x35, r24	; 53
 7a8:	8b b7       	in	r24, 0x3b	; 59
 7aa:	80 64       	ori	r24, 0x40	; 64
 7ac:	8b bf       	out	0x3b, r24	; 59
 7ae:	85 b7       	in	r24, 0x35	; 53
 7b0:	88 60       	ori	r24, 0x08	; 8
 7b2:	85 bf       	out	0x35, r24	; 53
 7b4:	85 b7       	in	r24, 0x35	; 53
 7b6:	8b 7f       	andi	r24, 0xFB	; 251
 7b8:	85 bf       	out	0x35, r24	; 53
 7ba:	8b b7       	in	r24, 0x3b	; 59
 7bc:	80 68       	ori	r24, 0x80	; 128
 7be:	8b bf       	out	0x3b, r24	; 59
 7c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_status>
 7c4:	08 95       	ret

000007c6 <INT0_SetCallback>:
 7c6:	9c 01       	movw	r18, r24
 7c8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_status>
 7cc:	83 30       	cpi	r24, 0x03	; 3
 7ce:	49 f4       	brne	.+18     	; 0x7e2 <INT0_SetCallback+0x1c>
 7d0:	21 15       	cp	r18, r1
 7d2:	31 05       	cpc	r19, r1
 7d4:	29 f0       	breq	.+10     	; 0x7e0 <INT0_SetCallback+0x1a>
 7d6:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <P0_CallbackFunction+0x1>
 7da:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <P0_CallbackFunction>
 7de:	08 95       	ret
 7e0:	82 e0       	ldi	r24, 0x02	; 2
 7e2:	08 95       	ret

000007e4 <INT1_SetCallback>:
 7e4:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <P1_CallbackFunction+0x1>
 7e8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <P1_CallbackFunction>
 7ec:	08 95       	ret

000007ee <__vector_1>:
//					 ISR FUNCTION
/***************************************************/
 
/**********  ISR OF INT_0  ************/

ISR(EXT_INT_0){
 7ee:	1f 92       	push	r1
 7f0:	0f 92       	push	r0
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	0f 92       	push	r0
 7f6:	11 24       	eor	r1, r1
 7f8:	2f 93       	push	r18
 7fa:	3f 93       	push	r19
 7fc:	4f 93       	push	r20
 7fe:	5f 93       	push	r21
 800:	6f 93       	push	r22
 802:	7f 93       	push	r23
 804:	8f 93       	push	r24
 806:	9f 93       	push	r25
 808:	af 93       	push	r26
 80a:	bf 93       	push	r27
 80c:	ef 93       	push	r30
 80e:	ff 93       	push	r31

	
		P0_CallbackFunction();
 810:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <P0_CallbackFunction>
 814:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <P0_CallbackFunction+0x1>
 818:	09 95       	icall
	
	
}
 81a:	ff 91       	pop	r31
 81c:	ef 91       	pop	r30
 81e:	bf 91       	pop	r27
 820:	af 91       	pop	r26
 822:	9f 91       	pop	r25
 824:	8f 91       	pop	r24
 826:	7f 91       	pop	r23
 828:	6f 91       	pop	r22
 82a:	5f 91       	pop	r21
 82c:	4f 91       	pop	r20
 82e:	3f 91       	pop	r19
 830:	2f 91       	pop	r18
 832:	0f 90       	pop	r0
 834:	0f be       	out	0x3f, r0	; 63
 836:	0f 90       	pop	r0
 838:	1f 90       	pop	r1
 83a:	18 95       	reti

0000083c <__vector_2>:


/**********  ISR OF INT_1  ************/

ISR(EXT_INT_1){
 83c:	1f 92       	push	r1
 83e:	0f 92       	push	r0
 840:	0f b6       	in	r0, 0x3f	; 63
 842:	0f 92       	push	r0
 844:	11 24       	eor	r1, r1
 846:	2f 93       	push	r18
 848:	3f 93       	push	r19
 84a:	4f 93       	push	r20
 84c:	5f 93       	push	r21
 84e:	6f 93       	push	r22
 850:	7f 93       	push	r23
 852:	8f 93       	push	r24
 854:	9f 93       	push	r25
 856:	af 93       	push	r26
 858:	bf 93       	push	r27
 85a:	ef 93       	push	r30
 85c:	ff 93       	push	r31

	
		P1_CallbackFunction();
 85e:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <P1_CallbackFunction>
 862:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <P1_CallbackFunction+0x1>
 866:	09 95       	icall
	
	
}
 868:	ff 91       	pop	r31
 86a:	ef 91       	pop	r30
 86c:	bf 91       	pop	r27
 86e:	af 91       	pop	r26
 870:	9f 91       	pop	r25
 872:	8f 91       	pop	r24
 874:	7f 91       	pop	r23
 876:	6f 91       	pop	r22
 878:	5f 91       	pop	r21
 87a:	4f 91       	pop	r20
 87c:	3f 91       	pop	r19
 87e:	2f 91       	pop	r18
 880:	0f 90       	pop	r0
 882:	0f be       	out	0x3f, r0	; 63
 884:	0f 90       	pop	r0
 886:	1f 90       	pop	r1
 888:	18 95       	reti

0000088a <__vector_3>:


/**********  ISR OF INT_2  ************/

ISR(EXT_INT_2){
 88a:	1f 92       	push	r1
 88c:	0f 92       	push	r0
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	0f 92       	push	r0
 892:	11 24       	eor	r1, r1
 894:	2f 93       	push	r18
 896:	3f 93       	push	r19
 898:	4f 93       	push	r20
 89a:	5f 93       	push	r21
 89c:	6f 93       	push	r22
 89e:	7f 93       	push	r23
 8a0:	8f 93       	push	r24
 8a2:	9f 93       	push	r25
 8a4:	af 93       	push	r26
 8a6:	bf 93       	push	r27
 8a8:	ef 93       	push	r30
 8aa:	ff 93       	push	r31

	
		P2_CallbackFunction();
 8ac:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <P2_CallbackFunction>
 8b0:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <P2_CallbackFunction+0x1>
 8b4:	09 95       	icall
	
	
 8b6:	ff 91       	pop	r31
 8b8:	ef 91       	pop	r30
 8ba:	bf 91       	pop	r27
 8bc:	af 91       	pop	r26
 8be:	9f 91       	pop	r25
 8c0:	8f 91       	pop	r24
 8c2:	7f 91       	pop	r23
 8c4:	6f 91       	pop	r22
 8c6:	5f 91       	pop	r21
 8c8:	4f 91       	pop	r20
 8ca:	3f 91       	pop	r19
 8cc:	2f 91       	pop	r18
 8ce:	0f 90       	pop	r0
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	0f 90       	pop	r0
 8d4:	1f 90       	pop	r1
 8d6:	18 95       	reti

000008d8 <TIMER_0_init>:

void TIMER_0_stop(void){
	
	CLR_BIT(TCCR0,CS00);
	CLR_BIT(TCCR0,CS01);
	CLR_BIT(TCCR0,CS02);
 8d8:	81 30       	cpi	r24, 0x01	; 1
 8da:	f1 f0       	breq	.+60     	; 0x918 <TIMER_0_init+0x40>
 8dc:	28 f0       	brcs	.+10     	; 0x8e8 <TIMER_0_init+0x10>
 8de:	82 30       	cpi	r24, 0x02	; 2
 8e0:	99 f0       	breq	.+38     	; 0x908 <TIMER_0_init+0x30>
 8e2:	83 30       	cpi	r24, 0x03	; 3
 8e4:	49 f0       	breq	.+18     	; 0x8f8 <TIMER_0_init+0x20>
 8e6:	20 c0       	rjmp	.+64     	; 0x928 <TIMER_0_init+0x50>
 8e8:	83 b7       	in	r24, 0x33	; 51
 8ea:	8f 7b       	andi	r24, 0xBF	; 191
 8ec:	83 bf       	out	0x33, r24	; 51
 8ee:	83 b7       	in	r24, 0x33	; 51
 8f0:	87 7f       	andi	r24, 0xF7	; 247
 8f2:	83 bf       	out	0x33, r24	; 51
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	08 95       	ret
 8f8:	83 b7       	in	r24, 0x33	; 51
 8fa:	80 64       	ori	r24, 0x40	; 64
 8fc:	83 bf       	out	0x33, r24	; 51
 8fe:	83 b7       	in	r24, 0x33	; 51
 900:	87 7f       	andi	r24, 0xF7	; 247
 902:	83 bf       	out	0x33, r24	; 51
 904:	84 e0       	ldi	r24, 0x04	; 4
 906:	08 95       	ret
 908:	83 b7       	in	r24, 0x33	; 51
 90a:	8f 7b       	andi	r24, 0xBF	; 191
 90c:	83 bf       	out	0x33, r24	; 51
 90e:	83 b7       	in	r24, 0x33	; 51
 910:	88 60       	ori	r24, 0x08	; 8
 912:	83 bf       	out	0x33, r24	; 51
 914:	84 e0       	ldi	r24, 0x04	; 4
 916:	08 95       	ret
 918:	83 b7       	in	r24, 0x33	; 51
 91a:	80 64       	ori	r24, 0x40	; 64
 91c:	83 bf       	out	0x33, r24	; 51
 91e:	83 b7       	in	r24, 0x33	; 51
 920:	88 60       	ori	r24, 0x08	; 8
 922:	83 bf       	out	0x33, r24	; 51
 924:	84 e0       	ldi	r24, 0x04	; 4
 926:	08 95       	ret
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	08 95       	ret

0000092c <TIMER_0_start>:
 92c:	82 30       	cpi	r24, 0x02	; 2
 92e:	09 f1       	breq	.+66     	; 0x972 <TIMER_0_start+0x46>
 930:	28 f4       	brcc	.+10     	; 0x93c <TIMER_0_start+0x10>
 932:	88 23       	and	r24, r24
 934:	41 f0       	breq	.+16     	; 0x946 <TIMER_0_start+0x1a>
 936:	81 30       	cpi	r24, 0x01	; 1
 938:	89 f0       	breq	.+34     	; 0x95c <TIMER_0_start+0x30>
 93a:	3c c0       	rjmp	.+120    	; 0x9b4 <TIMER_0_start+0x88>
 93c:	83 30       	cpi	r24, 0x03	; 3
 93e:	21 f1       	breq	.+72     	; 0x988 <TIMER_0_start+0x5c>
 940:	84 30       	cpi	r24, 0x04	; 4
 942:	69 f1       	breq	.+90     	; 0x99e <TIMER_0_start+0x72>
 944:	37 c0       	rjmp	.+110    	; 0x9b4 <TIMER_0_start+0x88>
 946:	83 b7       	in	r24, 0x33	; 51
 948:	81 60       	ori	r24, 0x01	; 1
 94a:	83 bf       	out	0x33, r24	; 51
 94c:	83 b7       	in	r24, 0x33	; 51
 94e:	8d 7f       	andi	r24, 0xFD	; 253
 950:	83 bf       	out	0x33, r24	; 51
 952:	83 b7       	in	r24, 0x33	; 51
 954:	8b 7f       	andi	r24, 0xFB	; 251
 956:	83 bf       	out	0x33, r24	; 51
 958:	84 e0       	ldi	r24, 0x04	; 4
 95a:	08 95       	ret
 95c:	83 b7       	in	r24, 0x33	; 51
 95e:	82 60       	ori	r24, 0x02	; 2
 960:	83 bf       	out	0x33, r24	; 51
 962:	83 b7       	in	r24, 0x33	; 51
 964:	8e 7f       	andi	r24, 0xFE	; 254
 966:	83 bf       	out	0x33, r24	; 51
 968:	83 b7       	in	r24, 0x33	; 51
 96a:	8b 7f       	andi	r24, 0xFB	; 251
 96c:	83 bf       	out	0x33, r24	; 51
 96e:	84 e0       	ldi	r24, 0x04	; 4
 970:	08 95       	ret
 972:	83 b7       	in	r24, 0x33	; 51
 974:	81 60       	ori	r24, 0x01	; 1
 976:	83 bf       	out	0x33, r24	; 51
 978:	83 b7       	in	r24, 0x33	; 51
 97a:	82 60       	ori	r24, 0x02	; 2
 97c:	83 bf       	out	0x33, r24	; 51
 97e:	83 b7       	in	r24, 0x33	; 51
 980:	8b 7f       	andi	r24, 0xFB	; 251
 982:	83 bf       	out	0x33, r24	; 51
 984:	84 e0       	ldi	r24, 0x04	; 4
 986:	08 95       	ret
 988:	83 b7       	in	r24, 0x33	; 51
 98a:	84 60       	ori	r24, 0x04	; 4
 98c:	83 bf       	out	0x33, r24	; 51
 98e:	83 b7       	in	r24, 0x33	; 51
 990:	8d 7f       	andi	r24, 0xFD	; 253
 992:	83 bf       	out	0x33, r24	; 51
 994:	83 b7       	in	r24, 0x33	; 51
 996:	8e 7f       	andi	r24, 0xFE	; 254
 998:	83 bf       	out	0x33, r24	; 51
 99a:	84 e0       	ldi	r24, 0x04	; 4
 99c:	08 95       	ret
 99e:	83 b7       	in	r24, 0x33	; 51
 9a0:	81 60       	ori	r24, 0x01	; 1
 9a2:	83 bf       	out	0x33, r24	; 51
 9a4:	83 b7       	in	r24, 0x33	; 51
 9a6:	8d 7f       	andi	r24, 0xFD	; 253
 9a8:	83 bf       	out	0x33, r24	; 51
 9aa:	83 b7       	in	r24, 0x33	; 51
 9ac:	84 60       	ori	r24, 0x04	; 4
 9ae:	83 bf       	out	0x33, r24	; 51
 9b0:	84 e0       	ldi	r24, 0x04	; 4
 9b2:	08 95       	ret
 9b4:	80 e0       	ldi	r24, 0x00	; 0
 9b6:	08 95       	ret

000009b8 <TIMER_0_setIntialValue>:
	enu_Timer_ErrorStatus errorStatus ;
	errorStatus = TIMER_OK;

	if(value < TIMR0_MAX_VALUE && value >= 0){
		
		TCNT0 = value ;
 9b8:	82 bf       	out	0x32, r24	; 50
	}else{
		errorStatus = INVALID_VALUE;
	}
	return errorStatus ;
}
 9ba:	84 e0       	ldi	r24, 0x04	; 4
 9bc:	08 95       	ret

000009be <TIMER_0_OvfNum>:


enu_Timer_ErrorStatus TIMER_0_OvfNum(double overflow){
 9be:	8f 92       	push	r8
 9c0:	9f 92       	push	r9
 9c2:	af 92       	push	r10
 9c4:	bf 92       	push	r11
 9c6:	cf 92       	push	r12
 9c8:	df 92       	push	r13
 9ca:	ef 92       	push	r14
 9cc:	ff 92       	push	r15
 9ce:	4b 01       	movw	r8, r22
 9d0:	5c 01       	movw	r10, r24
	enu_Timer_ErrorStatus errorStatus ;
	errorStatus = TIMER_OK;
	
	double num_ovf = 0;
	if (overflow > 0)
 9d2:	20 e0       	ldi	r18, 0x00	; 0
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	a9 01       	movw	r20, r18
 9d8:	0e 94 25 07 	call	0xe4a	; 0xe4a <__gesf2>
 9dc:	18 16       	cp	r1, r24
 9de:	94 f0       	brlt	.+36     	; 0xa04 <TIMER_0_OvfNum+0x46>
 9e0:	1e c0       	rjmp	.+60     	; 0xa1e <TIMER_0_OvfNum+0x60>
	{
		
		while(num_ovf < overflow){
			
			while(GET_BIT(TIFR,TOV0)==0);
 9e2:	08 b6       	in	r0, 0x38	; 56
 9e4:	00 fe       	sbrs	r0, 0
 9e6:	fd cf       	rjmp	.-6      	; 0x9e2 <TIMER_0_OvfNum+0x24>
			SET_BIT(TIFR,TOV0);
 9e8:	88 b7       	in	r24, 0x38	; 56
 9ea:	81 60       	ori	r24, 0x01	; 1
 9ec:	88 bf       	out	0x38, r24	; 56
			num_ovf++;
 9ee:	20 e0       	ldi	r18, 0x00	; 0
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	40 e8       	ldi	r20, 0x80	; 128
 9f4:	5f e3       	ldi	r21, 0x3F	; 63
 9f6:	c7 01       	movw	r24, r14
 9f8:	b6 01       	movw	r22, r12
 9fa:	0e 94 75 05 	call	0xaea	; 0xaea <__addsf3>
 9fe:	6b 01       	movw	r12, r22
 a00:	7c 01       	movw	r14, r24
 a02:	03 c0       	rjmp	.+6      	; 0xa0a <TIMER_0_OvfNum+0x4c>
 a04:	c1 2c       	mov	r12, r1
 a06:	d1 2c       	mov	r13, r1
 a08:	76 01       	movw	r14, r12
	
	double num_ovf = 0;
	if (overflow > 0)
	{
		
		while(num_ovf < overflow){
 a0a:	a5 01       	movw	r20, r10
 a0c:	94 01       	movw	r18, r8
 a0e:	c7 01       	movw	r24, r14
 a10:	b6 01       	movw	r22, r12
 a12:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__cmpsf2>
 a16:	88 23       	and	r24, r24
 a18:	24 f3       	brlt	.-56     	; 0x9e2 <TIMER_0_OvfNum+0x24>
}


enu_Timer_ErrorStatus TIMER_0_OvfNum(double overflow){
	enu_Timer_ErrorStatus errorStatus ;
	errorStatus = TIMER_OK;
 a1a:	84 e0       	ldi	r24, 0x04	; 4
 a1c:	2a c0       	rjmp	.+84     	; 0xa72 <TIMER_0_OvfNum+0xb4>
			num_ovf++;
		}
		num_ovf = 0;
	}
	
	else if (overflow <= 0)
 a1e:	20 e0       	ldi	r18, 0x00	; 0
 a20:	30 e0       	ldi	r19, 0x00	; 0
 a22:	a9 01       	movw	r20, r18
 a24:	c5 01       	movw	r24, r10
 a26:	b4 01       	movw	r22, r8
 a28:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__cmpsf2>
 a2c:	18 16       	cp	r1, r24
 a2e:	9c f4       	brge	.+38     	; 0xa56 <TIMER_0_OvfNum+0x98>
		num_ovf = 0;
	}
		
	else
	{
		errorStatus = INVALID_OVF;
 a30:	82 e0       	ldi	r24, 0x02	; 2
 a32:	1f c0       	rjmp	.+62     	; 0xa72 <TIMER_0_OvfNum+0xb4>
	else if (overflow <= 0)
	{
		overflow = 1 ;
		while(num_ovf < overflow){
			
			while(GET_BIT(TIFR,TOV0)==0);
 a34:	08 b6       	in	r0, 0x38	; 56
 a36:	00 fe       	sbrs	r0, 0
 a38:	fd cf       	rjmp	.-6      	; 0xa34 <TIMER_0_OvfNum+0x76>
			SET_BIT(TIFR,TOV0);
 a3a:	88 b7       	in	r24, 0x38	; 56
 a3c:	81 60       	ori	r24, 0x01	; 1
 a3e:	88 bf       	out	0x38, r24	; 56
			num_ovf++;
 a40:	20 e0       	ldi	r18, 0x00	; 0
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	40 e8       	ldi	r20, 0x80	; 128
 a46:	5f e3       	ldi	r21, 0x3F	; 63
 a48:	c7 01       	movw	r24, r14
 a4a:	b6 01       	movw	r22, r12
 a4c:	0e 94 75 05 	call	0xaea	; 0xaea <__addsf3>
 a50:	6b 01       	movw	r12, r22
 a52:	7c 01       	movw	r14, r24
 a54:	03 c0       	rjmp	.+6      	; 0xa5c <TIMER_0_OvfNum+0x9e>
 a56:	c1 2c       	mov	r12, r1
 a58:	d1 2c       	mov	r13, r1
 a5a:	76 01       	movw	r14, r12
	}
	
	else if (overflow <= 0)
	{
		overflow = 1 ;
		while(num_ovf < overflow){
 a5c:	20 e0       	ldi	r18, 0x00	; 0
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	40 e8       	ldi	r20, 0x80	; 128
 a62:	5f e3       	ldi	r21, 0x3F	; 63
 a64:	c7 01       	movw	r24, r14
 a66:	b6 01       	movw	r22, r12
 a68:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__cmpsf2>
 a6c:	88 23       	and	r24, r24
 a6e:	14 f3       	brlt	.-60     	; 0xa34 <TIMER_0_OvfNum+0x76>
}


enu_Timer_ErrorStatus TIMER_0_OvfNum(double overflow){
	enu_Timer_ErrorStatus errorStatus ;
	errorStatus = TIMER_OK;
 a70:	84 e0       	ldi	r24, 0x04	; 4
	{
		errorStatus = INVALID_OVF;
	}
	
	return errorStatus;
}
 a72:	ff 90       	pop	r15
 a74:	ef 90       	pop	r14
 a76:	df 90       	pop	r13
 a78:	cf 90       	pop	r12
 a7a:	bf 90       	pop	r11
 a7c:	af 90       	pop	r10
 a7e:	9f 90       	pop	r9
 a80:	8f 90       	pop	r8
 a82:	08 95       	ret

00000a84 <TIMER_0_DELAY_MS>:

void TIMER_0_DELAY_MS(double time_ms){
	 t = time_ms/1000 ;
 a84:	20 e0       	ldi	r18, 0x00	; 0
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	4a e7       	ldi	r20, 0x7A	; 122
 a8a:	54 e4       	ldi	r21, 0x44	; 68
 a8c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__divsf3>
 a90:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <t>
 a94:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <t+0x1>
 a98:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <t+0x2>
 a9c:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <t+0x3>
	ovfNum = ceil (t / 0.000256) ;
 aa0:	2d eb       	ldi	r18, 0xBD	; 189
 aa2:	37 e3       	ldi	r19, 0x37	; 55
 aa4:	46 e8       	ldi	r20, 0x86	; 134
 aa6:	59 e3       	ldi	r21, 0x39	; 57
 aa8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__divsf3>
 aac:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <ceil>
 ab0:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <ovfNum>
 ab4:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <ovfNum+0x1>
 ab8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ovfNum+0x2>
 abc:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <ovfNum+0x3>
	TIMER_0_init(NORMAL_MODE);
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <TIMER_0_init>
	TIMER_0_setIntialValue(0);
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TIMER_0_setIntialValue>
	TIMER_0_start(PRECALER_1);
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	0e 94 96 04 	call	0x92c	; 0x92c <TIMER_0_start>
	TIMER_0_OvfNum(ovfNum);
 ad2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <ovfNum>
 ad6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <ovfNum+0x1>
 ada:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ovfNum+0x2>
 ade:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <ovfNum+0x3>
 ae2:	0e 94 df 04 	call	0x9be	; 0x9be <TIMER_0_OvfNum>
 ae6:	08 95       	ret

00000ae8 <__subsf3>:
 ae8:	50 58       	subi	r21, 0x80	; 128

00000aea <__addsf3>:
 aea:	bb 27       	eor	r27, r27
 aec:	aa 27       	eor	r26, r26
 aee:	0e 94 8c 05 	call	0xb18	; 0xb18 <__addsf3x>
 af2:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__fp_round>
 af6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscA>
 afa:	38 f0       	brcs	.+14     	; 0xb0a <__addsf3+0x20>
 afc:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscB>
 b00:	20 f0       	brcs	.+8      	; 0xb0a <__addsf3+0x20>
 b02:	39 f4       	brne	.+14     	; 0xb12 <__addsf3+0x28>
 b04:	9f 3f       	cpi	r25, 0xFF	; 255
 b06:	19 f4       	brne	.+6      	; 0xb0e <__addsf3+0x24>
 b08:	26 f4       	brtc	.+8      	; 0xb12 <__addsf3+0x28>
 b0a:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_nan>
 b0e:	0e f4       	brtc	.+2      	; 0xb12 <__addsf3+0x28>
 b10:	e0 95       	com	r30
 b12:	e7 fb       	bst	r30, 7
 b14:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>

00000b18 <__addsf3x>:
 b18:	e9 2f       	mov	r30, r25
 b1a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_split3>
 b1e:	58 f3       	brcs	.-42     	; 0xaf6 <__addsf3+0xc>
 b20:	ba 17       	cp	r27, r26
 b22:	62 07       	cpc	r22, r18
 b24:	73 07       	cpc	r23, r19
 b26:	84 07       	cpc	r24, r20
 b28:	95 07       	cpc	r25, r21
 b2a:	20 f0       	brcs	.+8      	; 0xb34 <__addsf3x+0x1c>
 b2c:	79 f4       	brne	.+30     	; 0xb4c <__addsf3x+0x34>
 b2e:	a6 f5       	brtc	.+104    	; 0xb98 <__addsf3x+0x80>
 b30:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__fp_zero>
 b34:	0e f4       	brtc	.+2      	; 0xb38 <__addsf3x+0x20>
 b36:	e0 95       	com	r30
 b38:	0b 2e       	mov	r0, r27
 b3a:	ba 2f       	mov	r27, r26
 b3c:	a0 2d       	mov	r26, r0
 b3e:	0b 01       	movw	r0, r22
 b40:	b9 01       	movw	r22, r18
 b42:	90 01       	movw	r18, r0
 b44:	0c 01       	movw	r0, r24
 b46:	ca 01       	movw	r24, r20
 b48:	a0 01       	movw	r20, r0
 b4a:	11 24       	eor	r1, r1
 b4c:	ff 27       	eor	r31, r31
 b4e:	59 1b       	sub	r21, r25
 b50:	99 f0       	breq	.+38     	; 0xb78 <__addsf3x+0x60>
 b52:	59 3f       	cpi	r21, 0xF9	; 249
 b54:	50 f4       	brcc	.+20     	; 0xb6a <__addsf3x+0x52>
 b56:	50 3e       	cpi	r21, 0xE0	; 224
 b58:	68 f1       	brcs	.+90     	; 0xbb4 <__addsf3x+0x9c>
 b5a:	1a 16       	cp	r1, r26
 b5c:	f0 40       	sbci	r31, 0x00	; 0
 b5e:	a2 2f       	mov	r26, r18
 b60:	23 2f       	mov	r18, r19
 b62:	34 2f       	mov	r19, r20
 b64:	44 27       	eor	r20, r20
 b66:	58 5f       	subi	r21, 0xF8	; 248
 b68:	f3 cf       	rjmp	.-26     	; 0xb50 <__addsf3x+0x38>
 b6a:	46 95       	lsr	r20
 b6c:	37 95       	ror	r19
 b6e:	27 95       	ror	r18
 b70:	a7 95       	ror	r26
 b72:	f0 40       	sbci	r31, 0x00	; 0
 b74:	53 95       	inc	r21
 b76:	c9 f7       	brne	.-14     	; 0xb6a <__addsf3x+0x52>
 b78:	7e f4       	brtc	.+30     	; 0xb98 <__addsf3x+0x80>
 b7a:	1f 16       	cp	r1, r31
 b7c:	ba 0b       	sbc	r27, r26
 b7e:	62 0b       	sbc	r22, r18
 b80:	73 0b       	sbc	r23, r19
 b82:	84 0b       	sbc	r24, r20
 b84:	ba f0       	brmi	.+46     	; 0xbb4 <__addsf3x+0x9c>
 b86:	91 50       	subi	r25, 0x01	; 1
 b88:	a1 f0       	breq	.+40     	; 0xbb2 <__addsf3x+0x9a>
 b8a:	ff 0f       	add	r31, r31
 b8c:	bb 1f       	adc	r27, r27
 b8e:	66 1f       	adc	r22, r22
 b90:	77 1f       	adc	r23, r23
 b92:	88 1f       	adc	r24, r24
 b94:	c2 f7       	brpl	.-16     	; 0xb86 <__addsf3x+0x6e>
 b96:	0e c0       	rjmp	.+28     	; 0xbb4 <__addsf3x+0x9c>
 b98:	ba 0f       	add	r27, r26
 b9a:	62 1f       	adc	r22, r18
 b9c:	73 1f       	adc	r23, r19
 b9e:	84 1f       	adc	r24, r20
 ba0:	48 f4       	brcc	.+18     	; 0xbb4 <__addsf3x+0x9c>
 ba2:	87 95       	ror	r24
 ba4:	77 95       	ror	r23
 ba6:	67 95       	ror	r22
 ba8:	b7 95       	ror	r27
 baa:	f7 95       	ror	r31
 bac:	9e 3f       	cpi	r25, 0xFE	; 254
 bae:	08 f0       	brcs	.+2      	; 0xbb2 <__addsf3x+0x9a>
 bb0:	b0 cf       	rjmp	.-160    	; 0xb12 <__addsf3+0x28>
 bb2:	93 95       	inc	r25
 bb4:	88 0f       	add	r24, r24
 bb6:	08 f0       	brcs	.+2      	; 0xbba <__addsf3x+0xa2>
 bb8:	99 27       	eor	r25, r25
 bba:	ee 0f       	add	r30, r30
 bbc:	97 95       	ror	r25
 bbe:	87 95       	ror	r24
 bc0:	08 95       	ret

00000bc2 <ceil>:
 bc2:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fp_trunc>
 bc6:	90 f0       	brcs	.+36     	; 0xbec <ceil+0x2a>
 bc8:	9f 37       	cpi	r25, 0x7F	; 127
 bca:	48 f4       	brcc	.+18     	; 0xbde <ceil+0x1c>
 bcc:	91 11       	cpse	r25, r1
 bce:	16 f4       	brtc	.+4      	; 0xbd4 <ceil+0x12>
 bd0:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_szero>
 bd4:	60 e0       	ldi	r22, 0x00	; 0
 bd6:	70 e0       	ldi	r23, 0x00	; 0
 bd8:	80 e8       	ldi	r24, 0x80	; 128
 bda:	9f e3       	ldi	r25, 0x3F	; 63
 bdc:	08 95       	ret
 bde:	26 f0       	brts	.+8      	; 0xbe8 <ceil+0x26>
 be0:	1b 16       	cp	r1, r27
 be2:	61 1d       	adc	r22, r1
 be4:	71 1d       	adc	r23, r1
 be6:	81 1d       	adc	r24, r1
 be8:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_mintl>
 bec:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_mpack>

00000bf0 <__cmpsf2>:
 bf0:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_cmp>
 bf4:	08 f4       	brcc	.+2      	; 0xbf8 <__cmpsf2+0x8>
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	08 95       	ret

00000bfa <__divsf3>:
 bfa:	0e 94 11 06 	call	0xc22	; 0xc22 <__divsf3x>
 bfe:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__fp_round>
 c02:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscB>
 c06:	58 f0       	brcs	.+22     	; 0xc1e <__divsf3+0x24>
 c08:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__fp_pscA>
 c0c:	40 f0       	brcs	.+16     	; 0xc1e <__divsf3+0x24>
 c0e:	29 f4       	brne	.+10     	; 0xc1a <__divsf3+0x20>
 c10:	5f 3f       	cpi	r21, 0xFF	; 255
 c12:	29 f0       	breq	.+10     	; 0xc1e <__divsf3+0x24>
 c14:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>
 c18:	51 11       	cpse	r21, r1
 c1a:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_szero>
 c1e:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_nan>

00000c22 <__divsf3x>:
 c22:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__fp_split3>
 c26:	68 f3       	brcs	.-38     	; 0xc02 <__divsf3+0x8>

00000c28 <__divsf3_pse>:
 c28:	99 23       	and	r25, r25
 c2a:	b1 f3       	breq	.-20     	; 0xc18 <__divsf3+0x1e>
 c2c:	55 23       	and	r21, r21
 c2e:	91 f3       	breq	.-28     	; 0xc14 <__divsf3+0x1a>
 c30:	95 1b       	sub	r25, r21
 c32:	55 0b       	sbc	r21, r21
 c34:	bb 27       	eor	r27, r27
 c36:	aa 27       	eor	r26, r26
 c38:	62 17       	cp	r22, r18
 c3a:	73 07       	cpc	r23, r19
 c3c:	84 07       	cpc	r24, r20
 c3e:	38 f0       	brcs	.+14     	; 0xc4e <__divsf3_pse+0x26>
 c40:	9f 5f       	subi	r25, 0xFF	; 255
 c42:	5f 4f       	sbci	r21, 0xFF	; 255
 c44:	22 0f       	add	r18, r18
 c46:	33 1f       	adc	r19, r19
 c48:	44 1f       	adc	r20, r20
 c4a:	aa 1f       	adc	r26, r26
 c4c:	a9 f3       	breq	.-22     	; 0xc38 <__divsf3_pse+0x10>
 c4e:	35 d0       	rcall	.+106    	; 0xcba <__divsf3_pse+0x92>
 c50:	0e 2e       	mov	r0, r30
 c52:	3a f0       	brmi	.+14     	; 0xc62 <__divsf3_pse+0x3a>
 c54:	e0 e8       	ldi	r30, 0x80	; 128
 c56:	32 d0       	rcall	.+100    	; 0xcbc <__divsf3_pse+0x94>
 c58:	91 50       	subi	r25, 0x01	; 1
 c5a:	50 40       	sbci	r21, 0x00	; 0
 c5c:	e6 95       	lsr	r30
 c5e:	00 1c       	adc	r0, r0
 c60:	ca f7       	brpl	.-14     	; 0xc54 <__divsf3_pse+0x2c>
 c62:	2b d0       	rcall	.+86     	; 0xcba <__divsf3_pse+0x92>
 c64:	fe 2f       	mov	r31, r30
 c66:	29 d0       	rcall	.+82     	; 0xcba <__divsf3_pse+0x92>
 c68:	66 0f       	add	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	bb 1f       	adc	r27, r27
 c70:	26 17       	cp	r18, r22
 c72:	37 07       	cpc	r19, r23
 c74:	48 07       	cpc	r20, r24
 c76:	ab 07       	cpc	r26, r27
 c78:	b0 e8       	ldi	r27, 0x80	; 128
 c7a:	09 f0       	breq	.+2      	; 0xc7e <__divsf3_pse+0x56>
 c7c:	bb 0b       	sbc	r27, r27
 c7e:	80 2d       	mov	r24, r0
 c80:	bf 01       	movw	r22, r30
 c82:	ff 27       	eor	r31, r31
 c84:	93 58       	subi	r25, 0x83	; 131
 c86:	5f 4f       	sbci	r21, 0xFF	; 255
 c88:	3a f0       	brmi	.+14     	; 0xc98 <__divsf3_pse+0x70>
 c8a:	9e 3f       	cpi	r25, 0xFE	; 254
 c8c:	51 05       	cpc	r21, r1
 c8e:	78 f0       	brcs	.+30     	; 0xcae <__divsf3_pse+0x86>
 c90:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__fp_inf>
 c94:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_szero>
 c98:	5f 3f       	cpi	r21, 0xFF	; 255
 c9a:	e4 f3       	brlt	.-8      	; 0xc94 <__divsf3_pse+0x6c>
 c9c:	98 3e       	cpi	r25, 0xE8	; 232
 c9e:	d4 f3       	brlt	.-12     	; 0xc94 <__divsf3_pse+0x6c>
 ca0:	86 95       	lsr	r24
 ca2:	77 95       	ror	r23
 ca4:	67 95       	ror	r22
 ca6:	b7 95       	ror	r27
 ca8:	f7 95       	ror	r31
 caa:	9f 5f       	subi	r25, 0xFF	; 255
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__divsf3_pse+0x78>
 cae:	88 0f       	add	r24, r24
 cb0:	91 1d       	adc	r25, r1
 cb2:	96 95       	lsr	r25
 cb4:	87 95       	ror	r24
 cb6:	97 f9       	bld	r25, 7
 cb8:	08 95       	ret
 cba:	e1 e0       	ldi	r30, 0x01	; 1
 cbc:	66 0f       	add	r22, r22
 cbe:	77 1f       	adc	r23, r23
 cc0:	88 1f       	adc	r24, r24
 cc2:	bb 1f       	adc	r27, r27
 cc4:	62 17       	cp	r22, r18
 cc6:	73 07       	cpc	r23, r19
 cc8:	84 07       	cpc	r24, r20
 cca:	ba 07       	cpc	r27, r26
 ccc:	20 f0       	brcs	.+8      	; 0xcd6 <__divsf3_pse+0xae>
 cce:	62 1b       	sub	r22, r18
 cd0:	73 0b       	sbc	r23, r19
 cd2:	84 0b       	sbc	r24, r20
 cd4:	ba 0b       	sbc	r27, r26
 cd6:	ee 1f       	adc	r30, r30
 cd8:	88 f7       	brcc	.-30     	; 0xcbc <__divsf3_pse+0x94>
 cda:	e0 95       	com	r30
 cdc:	08 95       	ret

00000cde <__fp_cmp>:
 cde:	99 0f       	add	r25, r25
 ce0:	00 08       	sbc	r0, r0
 ce2:	55 0f       	add	r21, r21
 ce4:	aa 0b       	sbc	r26, r26
 ce6:	e0 e8       	ldi	r30, 0x80	; 128
 ce8:	fe ef       	ldi	r31, 0xFE	; 254
 cea:	16 16       	cp	r1, r22
 cec:	17 06       	cpc	r1, r23
 cee:	e8 07       	cpc	r30, r24
 cf0:	f9 07       	cpc	r31, r25
 cf2:	c0 f0       	brcs	.+48     	; 0xd24 <__fp_cmp+0x46>
 cf4:	12 16       	cp	r1, r18
 cf6:	13 06       	cpc	r1, r19
 cf8:	e4 07       	cpc	r30, r20
 cfa:	f5 07       	cpc	r31, r21
 cfc:	98 f0       	brcs	.+38     	; 0xd24 <__fp_cmp+0x46>
 cfe:	62 1b       	sub	r22, r18
 d00:	73 0b       	sbc	r23, r19
 d02:	84 0b       	sbc	r24, r20
 d04:	95 0b       	sbc	r25, r21
 d06:	39 f4       	brne	.+14     	; 0xd16 <__fp_cmp+0x38>
 d08:	0a 26       	eor	r0, r26
 d0a:	61 f0       	breq	.+24     	; 0xd24 <__fp_cmp+0x46>
 d0c:	23 2b       	or	r18, r19
 d0e:	24 2b       	or	r18, r20
 d10:	25 2b       	or	r18, r21
 d12:	21 f4       	brne	.+8      	; 0xd1c <__fp_cmp+0x3e>
 d14:	08 95       	ret
 d16:	0a 26       	eor	r0, r26
 d18:	09 f4       	brne	.+2      	; 0xd1c <__fp_cmp+0x3e>
 d1a:	a1 40       	sbci	r26, 0x01	; 1
 d1c:	a6 95       	lsr	r26
 d1e:	8f ef       	ldi	r24, 0xFF	; 255
 d20:	81 1d       	adc	r24, r1
 d22:	81 1d       	adc	r24, r1
 d24:	08 95       	ret

00000d26 <__fp_inf>:
 d26:	97 f9       	bld	r25, 7
 d28:	9f 67       	ori	r25, 0x7F	; 127
 d2a:	80 e8       	ldi	r24, 0x80	; 128
 d2c:	70 e0       	ldi	r23, 0x00	; 0
 d2e:	60 e0       	ldi	r22, 0x00	; 0
 d30:	08 95       	ret

00000d32 <__fp_mintl>:
 d32:	88 23       	and	r24, r24
 d34:	71 f4       	brne	.+28     	; 0xd52 <__fp_mintl+0x20>
 d36:	77 23       	and	r23, r23
 d38:	21 f0       	breq	.+8      	; 0xd42 <__fp_mintl+0x10>
 d3a:	98 50       	subi	r25, 0x08	; 8
 d3c:	87 2b       	or	r24, r23
 d3e:	76 2f       	mov	r23, r22
 d40:	07 c0       	rjmp	.+14     	; 0xd50 <__fp_mintl+0x1e>
 d42:	66 23       	and	r22, r22
 d44:	11 f4       	brne	.+4      	; 0xd4a <__fp_mintl+0x18>
 d46:	99 27       	eor	r25, r25
 d48:	0d c0       	rjmp	.+26     	; 0xd64 <__fp_mintl+0x32>
 d4a:	90 51       	subi	r25, 0x10	; 16
 d4c:	86 2b       	or	r24, r22
 d4e:	70 e0       	ldi	r23, 0x00	; 0
 d50:	60 e0       	ldi	r22, 0x00	; 0
 d52:	2a f0       	brmi	.+10     	; 0xd5e <__fp_mintl+0x2c>
 d54:	9a 95       	dec	r25
 d56:	66 0f       	add	r22, r22
 d58:	77 1f       	adc	r23, r23
 d5a:	88 1f       	adc	r24, r24
 d5c:	da f7       	brpl	.-10     	; 0xd54 <__fp_mintl+0x22>
 d5e:	88 0f       	add	r24, r24
 d60:	96 95       	lsr	r25
 d62:	87 95       	ror	r24
 d64:	97 f9       	bld	r25, 7
 d66:	08 95       	ret

00000d68 <__fp_mpack>:
 d68:	9f 3f       	cpi	r25, 0xFF	; 255
 d6a:	31 f0       	breq	.+12     	; 0xd78 <__fp_mpack_finite+0xc>

00000d6c <__fp_mpack_finite>:
 d6c:	91 50       	subi	r25, 0x01	; 1
 d6e:	20 f4       	brcc	.+8      	; 0xd78 <__fp_mpack_finite+0xc>
 d70:	87 95       	ror	r24
 d72:	77 95       	ror	r23
 d74:	67 95       	ror	r22
 d76:	b7 95       	ror	r27
 d78:	88 0f       	add	r24, r24
 d7a:	91 1d       	adc	r25, r1
 d7c:	96 95       	lsr	r25
 d7e:	87 95       	ror	r24
 d80:	97 f9       	bld	r25, 7
 d82:	08 95       	ret

00000d84 <__fp_nan>:
 d84:	9f ef       	ldi	r25, 0xFF	; 255
 d86:	80 ec       	ldi	r24, 0xC0	; 192
 d88:	08 95       	ret

00000d8a <__fp_pscA>:
 d8a:	00 24       	eor	r0, r0
 d8c:	0a 94       	dec	r0
 d8e:	16 16       	cp	r1, r22
 d90:	17 06       	cpc	r1, r23
 d92:	18 06       	cpc	r1, r24
 d94:	09 06       	cpc	r0, r25
 d96:	08 95       	ret

00000d98 <__fp_pscB>:
 d98:	00 24       	eor	r0, r0
 d9a:	0a 94       	dec	r0
 d9c:	12 16       	cp	r1, r18
 d9e:	13 06       	cpc	r1, r19
 da0:	14 06       	cpc	r1, r20
 da2:	05 06       	cpc	r0, r21
 da4:	08 95       	ret

00000da6 <__fp_round>:
 da6:	09 2e       	mov	r0, r25
 da8:	03 94       	inc	r0
 daa:	00 0c       	add	r0, r0
 dac:	11 f4       	brne	.+4      	; 0xdb2 <__fp_round+0xc>
 dae:	88 23       	and	r24, r24
 db0:	52 f0       	brmi	.+20     	; 0xdc6 <__fp_round+0x20>
 db2:	bb 0f       	add	r27, r27
 db4:	40 f4       	brcc	.+16     	; 0xdc6 <__fp_round+0x20>
 db6:	bf 2b       	or	r27, r31
 db8:	11 f4       	brne	.+4      	; 0xdbe <__fp_round+0x18>
 dba:	60 ff       	sbrs	r22, 0
 dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <__fp_round+0x20>
 dbe:	6f 5f       	subi	r22, 0xFF	; 255
 dc0:	7f 4f       	sbci	r23, 0xFF	; 255
 dc2:	8f 4f       	sbci	r24, 0xFF	; 255
 dc4:	9f 4f       	sbci	r25, 0xFF	; 255
 dc6:	08 95       	ret

00000dc8 <__fp_split3>:
 dc8:	57 fd       	sbrc	r21, 7
 dca:	90 58       	subi	r25, 0x80	; 128
 dcc:	44 0f       	add	r20, r20
 dce:	55 1f       	adc	r21, r21
 dd0:	59 f0       	breq	.+22     	; 0xde8 <__fp_splitA+0x10>
 dd2:	5f 3f       	cpi	r21, 0xFF	; 255
 dd4:	71 f0       	breq	.+28     	; 0xdf2 <__fp_splitA+0x1a>
 dd6:	47 95       	ror	r20

00000dd8 <__fp_splitA>:
 dd8:	88 0f       	add	r24, r24
 dda:	97 fb       	bst	r25, 7
 ddc:	99 1f       	adc	r25, r25
 dde:	61 f0       	breq	.+24     	; 0xdf8 <__fp_splitA+0x20>
 de0:	9f 3f       	cpi	r25, 0xFF	; 255
 de2:	79 f0       	breq	.+30     	; 0xe02 <__fp_splitA+0x2a>
 de4:	87 95       	ror	r24
 de6:	08 95       	ret
 de8:	12 16       	cp	r1, r18
 dea:	13 06       	cpc	r1, r19
 dec:	14 06       	cpc	r1, r20
 dee:	55 1f       	adc	r21, r21
 df0:	f2 cf       	rjmp	.-28     	; 0xdd6 <__fp_split3+0xe>
 df2:	46 95       	lsr	r20
 df4:	f1 df       	rcall	.-30     	; 0xdd8 <__fp_splitA>
 df6:	08 c0       	rjmp	.+16     	; 0xe08 <__fp_splitA+0x30>
 df8:	16 16       	cp	r1, r22
 dfa:	17 06       	cpc	r1, r23
 dfc:	18 06       	cpc	r1, r24
 dfe:	99 1f       	adc	r25, r25
 e00:	f1 cf       	rjmp	.-30     	; 0xde4 <__fp_splitA+0xc>
 e02:	86 95       	lsr	r24
 e04:	71 05       	cpc	r23, r1
 e06:	61 05       	cpc	r22, r1
 e08:	08 94       	sec
 e0a:	08 95       	ret

00000e0c <__fp_trunc>:
 e0c:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fp_splitA>
 e10:	a0 f0       	brcs	.+40     	; 0xe3a <__fp_trunc+0x2e>
 e12:	be e7       	ldi	r27, 0x7E	; 126
 e14:	b9 17       	cp	r27, r25
 e16:	88 f4       	brcc	.+34     	; 0xe3a <__fp_trunc+0x2e>
 e18:	bb 27       	eor	r27, r27
 e1a:	9f 38       	cpi	r25, 0x8F	; 143
 e1c:	60 f4       	brcc	.+24     	; 0xe36 <__fp_trunc+0x2a>
 e1e:	16 16       	cp	r1, r22
 e20:	b1 1d       	adc	r27, r1
 e22:	67 2f       	mov	r22, r23
 e24:	78 2f       	mov	r23, r24
 e26:	88 27       	eor	r24, r24
 e28:	98 5f       	subi	r25, 0xF8	; 248
 e2a:	f7 cf       	rjmp	.-18     	; 0xe1a <__fp_trunc+0xe>
 e2c:	86 95       	lsr	r24
 e2e:	77 95       	ror	r23
 e30:	67 95       	ror	r22
 e32:	b1 1d       	adc	r27, r1
 e34:	93 95       	inc	r25
 e36:	96 39       	cpi	r25, 0x96	; 150
 e38:	c8 f3       	brcs	.-14     	; 0xe2c <__fp_trunc+0x20>
 e3a:	08 95       	ret

00000e3c <__fp_zero>:
 e3c:	e8 94       	clt

00000e3e <__fp_szero>:
 e3e:	bb 27       	eor	r27, r27
 e40:	66 27       	eor	r22, r22
 e42:	77 27       	eor	r23, r23
 e44:	cb 01       	movw	r24, r22
 e46:	97 f9       	bld	r25, 7
 e48:	08 95       	ret

00000e4a <__gesf2>:
 e4a:	0e 94 6f 06 	call	0xcde	; 0xcde <__fp_cmp>
 e4e:	08 f4       	brcc	.+2      	; 0xe52 <__gesf2+0x8>
 e50:	8f ef       	ldi	r24, 0xFF	; 255
 e52:	08 95       	ret

00000e54 <_exit>:
 e54:	f8 94       	cli

00000e56 <__stop_program>:
 e56:	ff cf       	rjmp	.-2      	; 0xe56 <__stop_program>
