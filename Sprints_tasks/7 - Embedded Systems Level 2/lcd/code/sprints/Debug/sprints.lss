
sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000630  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000630  000006c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800078  00800078  000006dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d34  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009da  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f83  00000000  00000000  00002fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00003f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000777  00000000  00000000  00004298  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000123d  00000000  00000000  00004a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_1>
   8:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_2>
   c:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  8a:	0c 94 16 03 	jmp	0x62c	; 0x62c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
uint8_t bell[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x04 ,0x00};
uint8_t bell2[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x10 ,0x00};
uint8_t bell3[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x01 ,0x00};
void app_init(void){

LCD_4_Bit_init();
  92:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_4_Bit_init>
LCD_CreatCustomCharacter(bell,0);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	80 e7       	ldi	r24, 0x70	; 112
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_CreatCustomCharacter>
	
	
LCD_CreatCustomCharacter(bell2,1);
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	88 e6       	ldi	r24, 0x68	; 104
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_CreatCustomCharacter>
LCD_CreatCustomCharacter(bell3,2);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	80 e6       	ldi	r24, 0x60	; 96
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LCD_CreatCustomCharacter>
  b4:	08 95       	ret

000000b6 <app_start>:

}

void app_start(){

LCD_4_Bit_SendChar(0);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 19 01 	call	0x232	; 0x232 <LCD_4_Bit_SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f e3       	ldi	r18, 0x3F	; 63
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	93 e0       	ldi	r25, 0x03	; 3
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <app_start+0xc>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <app_start+0x16>
  cc:	00 00       	nop
_delay_ms(1000);
LCD_4_Bit_SendCommand(CLEAR_DISPLAY);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
LCD_4_Bit_SendCommand(CURSOR_HOME_POSITION);
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
LCD_4_Bit_SendChar(1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 19 01 	call	0x232	; 0x232 <LCD_4_Bit_SendChar>
  e0:	2f e3       	ldi	r18, 0x3F	; 63
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <app_start+0x30>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <app_start+0x3a>
  f0:	00 00       	nop
_delay_ms(1000);
LCD_4_Bit_SendCommand(CLEAR_DISPLAY);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
LCD_4_Bit_SendCommand(CURSOR_HOME_POSITION);	
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>

LCD_4_Bit_SendChar(0);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 19 01 	call	0x232	; 0x232 <LCD_4_Bit_SendChar>
 104:	2f e3       	ldi	r18, 0x3F	; 63
 106:	8d e0       	ldi	r24, 0x0D	; 13
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <app_start+0x54>
 112:	00 c0       	rjmp	.+0      	; 0x114 <app_start+0x5e>
 114:	00 00       	nop
_delay_ms(1000);
LCD_4_Bit_SendCommand(CLEAR_DISPLAY);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
LCD_4_Bit_SendCommand(CURSOR_HOME_POSITION);
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>

LCD_4_Bit_SendChar(2);
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	0e 94 19 01 	call	0x232	; 0x232 <LCD_4_Bit_SendChar>
 128:	2f e3       	ldi	r18, 0x3F	; 63
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <app_start+0x78>
 136:	00 c0       	rjmp	.+0      	; 0x138 <app_start+0x82>
 138:	00 00       	nop
_delay_ms(1000);
LCD_4_Bit_SendCommand(CLEAR_DISPLAY);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
LCD_4_Bit_SendCommand(CURSOR_HOME_POSITION);
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
 146:	08 95       	ret

00000148 <LCD_4_Bit_SendCommand>:
		{
			LCD_4_Bit_SendChar(a_string[l_charchters]);
		}
	LCD_4_Bit_SendCommand(DISPLAY_ON_CURSOR_OFF);
	LCD_4_Bit_SendCommand(CURSOR_HOME_POSITION);
}
 148:	cf 93       	push	r28
 14a:	c8 2f       	mov	r28, r24
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	9c 2f       	mov	r25, r28
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	89 2b       	or	r24, r25
 156:	85 bb       	out	0x15, r24	; 21
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	83 e0       	ldi	r24, 0x03	; 3
 168:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	62 e0       	ldi	r22, 0x02	; 2
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 176:	00 00       	nop
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	83 e0       	ldi	r24, 0x03	; 3
 17e:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 182:	32 e4       	ldi	r19, 0x42	; 66
 184:	3a 95       	dec	r19
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_4_Bit_SendCommand+0x3c>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_4_Bit_SendCommand+0x42>
 18a:	25 b3       	in	r18, 0x15	; 21
 18c:	30 e1       	ldi	r19, 0x10	; 16
 18e:	c3 9f       	mul	r28, r19
 190:	c0 01       	movw	r24, r0
 192:	11 24       	eor	r1, r1
 194:	92 2f       	mov	r25, r18
 196:	9f 70       	andi	r25, 0x0F	; 15
 198:	89 2b       	or	r24, r25
 19a:	85 bb       	out	0x15, r24	; 21
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 1a6:	40 e0       	ldi	r20, 0x00	; 0
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 1ba:	00 00       	nop
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 1c6:	8d ee       	ldi	r24, 0xED	; 237
 1c8:	92 e0       	ldi	r25, 0x02	; 2
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCD_4_Bit_SendCommand+0x82>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <LCD_4_Bit_SendCommand+0x88>
 1d0:	00 00       	nop
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <LCD_4_Bit_init>:
 1d6:	cf 93       	push	r28
 1d8:	c4 e0       	ldi	r28, 0x04	; 4
 1da:	06 c0       	rjmp	.+12     	; 0x1e8 <LCD_4_Bit_init+0x12>
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	6c 2f       	mov	r22, r28
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 83 01 	call	0x306	; 0x306 <DIO_init>
 1e6:	cf 5f       	subi	r28, 0xFF	; 255
 1e8:	c8 30       	cpi	r28, 0x08	; 8
 1ea:	c0 f3       	brcs	.-16     	; 0x1dc <LCD_4_Bit_init+0x6>
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 83 01 	call	0x306	; 0x306 <DIO_init>
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 83 01 	call	0x306	; 0x306 <DIO_init>
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 83 01 	call	0x306	; 0x306 <DIO_init>
 20a:	87 e8       	ldi	r24, 0x87	; 135
 20c:	93 e1       	ldi	r25, 0x13	; 19
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_4_Bit_init+0x38>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LCD_4_Bit_init+0x3e>
 214:	00 00       	nop
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
 21c:	88 e2       	ldi	r24, 0x28	; 40
 21e:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
 222:	8c e0       	ldi	r24, 0x0C	; 12
 224:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <LCD_4_Bit_SendChar>:
 232:	cf 93       	push	r28
 234:	c8 2f       	mov	r28, r24
 236:	85 b3       	in	r24, 0x15	; 21
 238:	8f 70       	andi	r24, 0x0F	; 15
 23a:	9c 2f       	mov	r25, r28
 23c:	90 7f       	andi	r25, 0xF0	; 240
 23e:	89 2b       	or	r24, r25
 240:	85 bb       	out	0x15, r24	; 21
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	83 e0       	ldi	r24, 0x03	; 3
 252:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	62 e0       	ldi	r22, 0x02	; 2
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 260:	00 00       	nop
 262:	40 e0       	ldi	r20, 0x00	; 0
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 26c:	32 e4       	ldi	r19, 0x42	; 66
 26e:	3a 95       	dec	r19
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_4_Bit_SendChar+0x3c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_4_Bit_SendChar+0x42>
 274:	25 b3       	in	r18, 0x15	; 21
 276:	30 e1       	ldi	r19, 0x10	; 16
 278:	c3 9f       	mul	r28, r19
 27a:	c0 01       	movw	r24, r0
 27c:	11 24       	eor	r1, r1
 27e:	92 2f       	mov	r25, r18
 280:	9f 70       	andi	r25, 0x0F	; 15
 282:	89 2b       	or	r24, r25
 284:	85 bb       	out	0x15, r24	; 21
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 2a4:	00 00       	nop
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 12 02 	call	0x424	; 0x424 <DIO_write>
 2b0:	83 ef       	ldi	r24, 0xF3	; 243
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_4_Bit_SendChar+0x82>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD_4_Bit_SendChar+0x88>
 2ba:	00 00       	nop
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <LCD_CreatCustomCharacter>:



void LCD_CreatCustomCharacter(uint8_t *arr_patter , uint8_t a_position){
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	8c 01       	movw	r16, r24
	

	LCD_4_Bit_SendCommand(0x40 + (a_position*8));
 2c8:	86 2f       	mov	r24, r22
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	08 96       	adiw	r24, 0x08	; 8
 2ce:	88 0f       	add	r24, r24
 2d0:	88 0f       	add	r24, r24
 2d2:	88 0f       	add	r24, r24
 2d4:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
	for(uint8_t i=0 ; i<8 ; i++){
 2d8:	c0 e0       	ldi	r28, 0x00	; 0
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <LCD_CreatCustomCharacter+0x2a>
		LCD_4_Bit_SendChar(arr_patter[i]);
 2dc:	f8 01       	movw	r30, r16
 2de:	ec 0f       	add	r30, r28
 2e0:	f1 1d       	adc	r31, r1
 2e2:	80 81       	ld	r24, Z
 2e4:	0e 94 19 01 	call	0x232	; 0x232 <LCD_4_Bit_SendChar>

void LCD_CreatCustomCharacter(uint8_t *arr_patter , uint8_t a_position){
	

	LCD_4_Bit_SendCommand(0x40 + (a_position*8));
	for(uint8_t i=0 ; i<8 ; i++){
 2e8:	cf 5f       	subi	r28, 0xFF	; 255
 2ea:	c8 30       	cpi	r28, 0x08	; 8
 2ec:	b8 f3       	brcs	.-18     	; 0x2dc <LCD_CreatCustomCharacter+0x1c>
		LCD_4_Bit_SendChar(arr_patter[i]);
	}
	
		LCD_4_Bit_SendCommand(CURSOR_HOME_POSITION);
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	0e 94 a4 00 	call	0x148	; 0x148 <LCD_4_Bit_SendCommand>
	
}
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	08 95       	ret

000002fc <main>:


 
int main(void)
{
	app_init();
 2fc:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
	
	while (1){
		app_start();
 300:	0e 94 5b 00 	call	0xb6	; 0xb6 <app_start>
 304:	fd cf       	rjmp	.-6      	; 0x300 <main+0x4>

00000306 <DIO_init>:
#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 306:	68 30       	cpi	r22, 0x08	; 8
 308:	08 f0       	brcs	.+2      	; 0x30c <DIO_init+0x6>
 30a:	80 c0       	rjmp	.+256    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
		loc_ErrorStatus = Dio_PinError ;
	}
	else{	
		switch (PortNum)
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	31 f1       	breq	.+76     	; 0x35c <DIO_init+0x56>
 310:	38 f0       	brcs	.+14     	; 0x320 <DIO_init+0x1a>
 312:	82 30       	cpi	r24, 0x02	; 2
 314:	09 f4       	brne	.+2      	; 0x318 <DIO_init+0x12>
 316:	40 c0       	rjmp	.+128    	; 0x398 <DIO_init+0x92>
 318:	83 30       	cpi	r24, 0x03	; 3
 31a:	09 f4       	brne	.+2      	; 0x31e <DIO_init+0x18>
 31c:	5a c0       	rjmp	.+180    	; 0x3d2 <DIO_init+0xcc>
 31e:	78 c0       	rjmp	.+240    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
		{

			case PORT_A :
					if (direction == INPUT)
 320:	41 11       	cpse	r20, r1
 322:	0d c0       	rjmp	.+26     	; 0x33e <DIO_init+0x38>
					{
						CLR_BIT(DDRA,PinNum);
 324:	2a b3       	in	r18, 0x1a	; 26
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_init+0x2a>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_init+0x26>
 334:	80 95       	com	r24
 336:	82 23       	and	r24, r18
 338:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	08 95       	ret

			case PORT_A :
					if (direction == INPUT)
					{
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
 33e:	41 30       	cpi	r20, 0x01	; 1
 340:	09 f0       	breq	.+2      	; 0x344 <DIO_init+0x3e>
 342:	68 c0       	rjmp	.+208    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
						SET_BIT(DDRA,PinNum);
 344:	2a b3       	in	r18, 0x1a	; 26
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_init+0x4a>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_init+0x46>
 354:	82 2b       	or	r24, r18
 356:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	08 95       	ret
					}
					break;
		
		
			case PORT_B :
					if (direction == INPUT)
 35c:	41 11       	cpse	r20, r1
 35e:	0d c0       	rjmp	.+26     	; 0x37a <DIO_init+0x74>
					{
						CLR_BIT(DDRB,PinNum);
 360:	27 b3       	in	r18, 0x17	; 23
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_init+0x66>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_init+0x62>
 370:	80 95       	com	r24
 372:	82 23       	and	r24, r18
 374:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	08 95       	ret
		
			case PORT_B :
					if (direction == INPUT)
					{
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	09 f0       	breq	.+2      	; 0x380 <DIO_init+0x7a>
 37e:	4c c0       	rjmp	.+152    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
						SET_BIT(DDRB,PinNum);
 380:	27 b3       	in	r18, 0x17	; 23
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_init+0x86>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_init+0x82>
 390:	82 2b       	or	r24, r18
 392:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 95       	ret
					break;
		
		
		
			case PORT_C :
					if (direction == INPUT)
 398:	41 11       	cpse	r20, r1
 39a:	0d c0       	rjmp	.+26     	; 0x3b6 <DIO_init+0xb0>
					{
						CLR_BIT(DDRC,PinNum);
 39c:	24 b3       	in	r18, 0x14	; 20
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_init+0xa2>
 3a4:	88 0f       	add	r24, r24
 3a6:	99 1f       	adc	r25, r25
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_init+0x9e>
 3ac:	80 95       	com	r24
 3ae:	82 23       	and	r24, r18
 3b0:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	08 95       	ret
		
			case PORT_C :
					if (direction == INPUT)
					{
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
 3b6:	41 30       	cpi	r20, 0x01	; 1
 3b8:	89 f5       	brne	.+98     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
						SET_BIT(DDRC,PinNum);
 3ba:	24 b3       	in	r18, 0x14	; 20
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_init+0xc0>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_init+0xbc>
 3ca:	82 2b       	or	r24, r18
 3cc:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
					break;
		
		
		
			case PORT_D :
					if (direction == INPUT)
 3d2:	41 11       	cpse	r20, r1
 3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <DIO_init+0xea>
					{
						CLR_BIT(DDRD,PinNum);
 3d6:	21 b3       	in	r18, 0x11	; 17
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_init+0xdc>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_init+0xd8>
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
		
			case PORT_D :
					if (direction == INPUT)
					{
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
 3f0:	41 30       	cpi	r20, 0x01	; 1
 3f2:	b1 f4       	brne	.+44     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
						SET_BIT(DDRD,PinNum);
 3f4:	21 b3       	in	r18, 0x11	; 17
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_init+0xf6>
 404:	82 2b       	or	r24, r18
 406:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_ErrorStatus = Dio_PinError ;
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	08 95       	ret
					}
					break;
		
			default:
			//error handling
					loc_ErrorStatus = Dio_PortError;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	08 95       	ret
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRA,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 414:	84 e0       	ldi	r24, 0x04	; 4
 416:	08 95       	ret
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRB,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	08 95       	ret
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRC,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 41c:	84 e0       	ldi	r24, 0x04	; 4
 41e:	08 95       	ret
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRD,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 420:	84 e0       	ldi	r24, 0x04	; 4
		}
					}
	
	return loc_ErrorStatus ;

}
 422:	08 95       	ret

00000424 <DIO_write>:


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 424:	68 30       	cpi	r22, 0x08	; 8
 426:	08 f0       	brcs	.+2      	; 0x42a <DIO_write+0x6>
 428:	80 c0       	rjmp	.+256    	; 0x52a <DIO_write+0x106>
		loc_errorStatus = Dio_PinError ;
	}
	else{
		switch (PortNum)
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	31 f1       	breq	.+76     	; 0x47a <DIO_write+0x56>
 42e:	38 f0       	brcs	.+14     	; 0x43e <DIO_write+0x1a>
 430:	82 30       	cpi	r24, 0x02	; 2
 432:	09 f4       	brne	.+2      	; 0x436 <DIO_write+0x12>
 434:	40 c0       	rjmp	.+128    	; 0x4b6 <DIO_write+0x92>
 436:	83 30       	cpi	r24, 0x03	; 3
 438:	09 f4       	brne	.+2      	; 0x43c <DIO_write+0x18>
 43a:	5a c0       	rjmp	.+180    	; 0x4f0 <DIO_write+0xcc>
 43c:	78 c0       	rjmp	.+240    	; 0x52e <DIO_write+0x10a>
		{
			case PORT_A :
			
					if (value == LOW)
 43e:	41 11       	cpse	r20, r1
 440:	0d c0       	rjmp	.+26     	; 0x45c <DIO_write+0x38>
					{
						CLR_BIT(PORTA,PinNum);
 442:	2b b3       	in	r18, 0x1b	; 27
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_write+0x2a>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_write+0x26>
 452:	80 95       	com	r24
 454:	82 23       	and	r24, r18
 456:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
			
					if (value == LOW)
					{
						CLR_BIT(PORTA,PinNum);
			
					}else if ( value == HIGH){
 45c:	41 30       	cpi	r20, 0x01	; 1
 45e:	09 f0       	breq	.+2      	; 0x462 <DIO_write+0x3e>
 460:	68 c0       	rjmp	.+208    	; 0x532 <DIO_write+0x10e>
			
						SET_BIT(PORTA,PinNum);
 462:	2b b3       	in	r18, 0x1b	; 27
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_write+0x4a>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_write+0x46>
 472:	82 2b       	or	r24, r18
 474:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_B :
					if (value == LOW)
 47a:	41 11       	cpse	r20, r1
 47c:	0d c0       	rjmp	.+26     	; 0x498 <DIO_write+0x74>
					{
						CLR_BIT(PORTB,PinNum);
 47e:	28 b3       	in	r18, 0x18	; 24
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_write+0x66>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_write+0x62>
 48e:	80 95       	com	r24
 490:	82 23       	and	r24, r18
 492:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	08 95       	ret
			case PORT_B :
					if (value == LOW)
					{
						CLR_BIT(PORTB,PinNum);
			
					}else if ( value == HIGH){
 498:	41 30       	cpi	r20, 0x01	; 1
 49a:	09 f0       	breq	.+2      	; 0x49e <DIO_write+0x7a>
 49c:	4c c0       	rjmp	.+152    	; 0x536 <DIO_write+0x112>
			
						SET_BIT(PORTB,PinNum);
 49e:	28 b3       	in	r18, 0x18	; 24
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_write+0x86>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_write+0x82>
 4ae:	82 2b       	or	r24, r18
 4b0:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_C :
					if (value == LOW)
 4b6:	41 11       	cpse	r20, r1
 4b8:	0d c0       	rjmp	.+26     	; 0x4d4 <DIO_write+0xb0>
					{
						CLR_BIT(PORTC,PinNum);
 4ba:	25 b3       	in	r18, 0x15	; 21
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_write+0xa2>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_write+0x9e>
 4ca:	80 95       	com	r24
 4cc:	82 23       	and	r24, r18
 4ce:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	08 95       	ret
			case PORT_C :
					if (value == LOW)
					{
						CLR_BIT(PORTC,PinNum);
			
					}else if ( value == HIGH){
 4d4:	41 30       	cpi	r20, 0x01	; 1
 4d6:	89 f5       	brne	.+98     	; 0x53a <DIO_write+0x116>
			
						SET_BIT(PORTC,PinNum);
 4d8:	25 b3       	in	r18, 0x15	; 21
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_write+0xc0>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_write+0xbc>
 4e8:	82 2b       	or	r24, r18
 4ea:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_D :
					if (value == LOW)
 4f0:	41 11       	cpse	r20, r1
 4f2:	0d c0       	rjmp	.+26     	; 0x50e <DIO_write+0xea>
					{
						CLR_BIT(PORTD,PinNum);
 4f4:	22 b3       	in	r18, 0x12	; 18
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_write+0xdc>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_write+0xd8>
 504:	80 95       	com	r24
 506:	82 23       	and	r24, r18
 508:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	08 95       	ret
			case PORT_D :
					if (value == LOW)
					{
						CLR_BIT(PORTD,PinNum);
			
					}else if ( value == HIGH){
 50e:	41 30       	cpi	r20, 0x01	; 1
 510:	b1 f4       	brne	.+44     	; 0x53e <DIO_write+0x11a>
			
						SET_BIT(PORTD,PinNum);
 512:	22 b3       	in	r18, 0x12	; 18
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_write+0xfa>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_write+0xf6>
 522:	82 2b       	or	r24, r18
 524:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_errorStatus = Dio_PinError ;
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	08 95       	ret
					break;
		
		
			default:
			//error handling
				loc_errorStatus = Dio_PortError ;
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTA,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTB,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 536:	83 e0       	ldi	r24, 0x03	; 3
 538:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTC,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 53a:	83 e0       	ldi	r24, 0x03	; 3
 53c:	08 95       	ret
			
						SET_BIT(PORTD,PinNum);
			
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 53e:	83 e0       	ldi	r24, 0x03	; 3
				break;
		
				}
		}
	return loc_errorStatus;
	}
 540:	08 95       	ret

00000542 <__vector_1>:
//					 ISR FUNCTION
/***************************************************/
 
/**********  ISR OF INT_0  ************/

ISR(EXT_INT_0){
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	2f 93       	push	r18
 54e:	3f 93       	push	r19
 550:	4f 93       	push	r20
 552:	5f 93       	push	r21
 554:	6f 93       	push	r22
 556:	7f 93       	push	r23
 558:	8f 93       	push	r24
 55a:	9f 93       	push	r25
 55c:	af 93       	push	r26
 55e:	bf 93       	push	r27
 560:	ef 93       	push	r30
 562:	ff 93       	push	r31

	
		P0_CallbackFunction();
 564:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <P0_CallbackFunction>
 568:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <P0_CallbackFunction+0x1>
 56c:	09 95       	icall
	
	
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_2>:


/**********  ISR OF INT_1  ************/

ISR(EXT_INT_1){
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31

	
		P1_CallbackFunction();
 5b2:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <P1_CallbackFunction>
 5b6:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <P1_CallbackFunction+0x1>
 5ba:	09 95       	icall
	
	
}
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	bf 91       	pop	r27
 5c2:	af 91       	pop	r26
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	7f 91       	pop	r23
 5ca:	6f 91       	pop	r22
 5cc:	5f 91       	pop	r21
 5ce:	4f 91       	pop	r20
 5d0:	3f 91       	pop	r19
 5d2:	2f 91       	pop	r18
 5d4:	0f 90       	pop	r0
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	0f 90       	pop	r0
 5da:	1f 90       	pop	r1
 5dc:	18 95       	reti

000005de <__vector_3>:


/**********  ISR OF INT_2  ************/

ISR(EXT_INT_2){
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
 5e8:	2f 93       	push	r18
 5ea:	3f 93       	push	r19
 5ec:	4f 93       	push	r20
 5ee:	5f 93       	push	r21
 5f0:	6f 93       	push	r22
 5f2:	7f 93       	push	r23
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
 5f8:	af 93       	push	r26
 5fa:	bf 93       	push	r27
 5fc:	ef 93       	push	r30
 5fe:	ff 93       	push	r31

	
		P2_CallbackFunction();
 600:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__data_end>
 604:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__data_end+0x1>
 608:	09 95       	icall
	
	
 60a:	ff 91       	pop	r31
 60c:	ef 91       	pop	r30
 60e:	bf 91       	pop	r27
 610:	af 91       	pop	r26
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	7f 91       	pop	r23
 618:	6f 91       	pop	r22
 61a:	5f 91       	pop	r21
 61c:	4f 91       	pop	r20
 61e:	3f 91       	pop	r19
 620:	2f 91       	pop	r18
 622:	0f 90       	pop	r0
 624:	0f be       	out	0x3f, r0	; 63
 626:	0f 90       	pop	r0
 628:	1f 90       	pop	r1
 62a:	18 95       	reti

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
