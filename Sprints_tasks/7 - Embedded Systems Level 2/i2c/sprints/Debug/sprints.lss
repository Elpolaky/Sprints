
sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001092  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00001106  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028b1  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da1  00000000  00000000  00003c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000176a  00000000  00000000  00004a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  00006178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b96  00000000  00000000  000066ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a34  00000000  00000000  00007282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00008cb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_1>
       8:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_2>
       c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_3>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <EEPROM_Read+0x26>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e2 e9       	ldi	r30, 0x92	; 146
      ea:	f0 e1       	ldi	r31, 0x10	; 16
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a0 36       	cpi	r26, 0x60	; 96
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a0 e6       	ldi	r26, 0x60	; 96
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a6 36       	cpi	r26, 0x66	; 102
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
     10c:	0c 94 47 08 	jmp	0x108e	; 0x108e <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <app_init>:
uint8_t bell2[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x10 ,0x00};
uint8_t bell3[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x01 ,0x00};

uint8_t key;
void app_init(void){
TIMER_0_init(NORMAL_MODE);
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	0e 94 6d 04 	call	0x8da	; 0x8da <TIMER_0_init>
LCD_4_Bit_init();
     11a:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_4_Bit_init>
I2C_init(I2C_PRESCALER_1);
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	0e 94 91 03 	call	0x722	; 0x722 <I2C_init>
LED_init(PORT_A,PIN_0);
     124:	60 e0       	ldi	r22, 0x00	; 0
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 e7 01 	call	0x3ce	; 0x3ce <LED_init>
     12c:	08 95       	ret

0000012e <app_start>:
}


void app_start(){
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	2a 97       	sbiw	r28, 0x0a	; 10
     138:	0f b6       	in	r0, 0x3f	; 63
     13a:	f8 94       	cli
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	0f be       	out	0x3f, r0	; 63
     140:	cd bf       	out	0x3d, r28	; 61
	uint8_t data =20 ;
	uint8_t data2 = 0 ;
	uint8_t ad1 = 0x00 ;
	uint8_t str[10] = {1,2,3};
     142:	ce 01       	movw	r24, r28
     144:	01 96       	adiw	r24, 0x01	; 1
     146:	2a e0       	ldi	r18, 0x0A	; 10
     148:	fc 01       	movw	r30, r24
     14a:	11 92       	st	Z+, r1
     14c:	2a 95       	dec	r18
     14e:	e9 f7       	brne	.-6      	; 0x14a <app_start+0x1c>
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	29 83       	std	Y+1, r18	; 0x01
     154:	22 e0       	ldi	r18, 0x02	; 2
     156:	2a 83       	std	Y+2, r18	; 0x02
     158:	23 e0       	ldi	r18, 0x03	; 3
     15a:	2b 83       	std	Y+3, r18	; 0x03

//	EEPROM_Write(&data , &ad1);


	EEPROM_Read(str ,ad1);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	0e 94 55 04 	call	0x8aa	; 0x8aa <EEPROM_Read>
	LCD_Write_Number((uint32)str[0]);
     162:	69 81       	ldd	r22, Y+1	; 0x01
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Number>
	EEPROM_Read(str+1 ,ad1);
     16e:	60 e0       	ldi	r22, 0x00	; 0
     170:	ce 01       	movw	r24, r28
     172:	02 96       	adiw	r24, 0x02	; 2
     174:	0e 94 55 04 	call	0x8aa	; 0x8aa <EEPROM_Read>
	LCD_Write_Number((uint32)str[1]);
     178:	6a 81       	ldd	r22, Y+2	; 0x02
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Number>
	EEPROM_Read(str+2 ,ad1);
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	ce 01       	movw	r24, r28
     188:	03 96       	adiw	r24, 0x03	; 3
     18a:	0e 94 55 04 	call	0x8aa	; 0x8aa <EEPROM_Read>
	LCD_Write_Number((uint32)str[2]);
     18e:	6b 81       	ldd	r22, Y+3	; 0x03
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 95 01 	call	0x32a	; 0x32a <LCD_Write_Number>
	}

*/
	
//	LCD_4_Bit_Clear();
	}
     19a:	2a 96       	adiw	r28, 0x0a	; 10
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <LCD_4_Bit_SendCommand>:



void LCD_4_Bit_Clear(void){
	LCD_4_Bit_SendCommand(CLEAR_DISPLAY);
	LCD_4_Bit_SendCommand(CURSOR_HOME_POSITION);
     1ac:	cf 93       	push	r28
     1ae:	c8 2f       	mov	r28, r24
     1b0:	85 b3       	in	r24, 0x15	; 21
     1b2:	8f 70       	andi	r24, 0x0F	; 15
     1b4:	9c 2f       	mov	r25, r28
     1b6:	90 7f       	andi	r25, 0xF0	; 240
     1b8:	89 2b       	or	r24, r25
     1ba:	85 bb       	out	0x15, r24	; 21
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	83 e0       	ldi	r24, 0x03	; 3
     1c2:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     1c6:	40 e0       	ldi	r20, 0x00	; 0
     1c8:	61 e0       	ldi	r22, 0x01	; 1
     1ca:	83 e0       	ldi	r24, 0x03	; 3
     1cc:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     1d0:	41 e0       	ldi	r20, 0x01	; 1
     1d2:	62 e0       	ldi	r22, 0x02	; 2
     1d4:	83 e0       	ldi	r24, 0x03	; 3
     1d6:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     1da:	00 00       	nop
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	62 e0       	ldi	r22, 0x02	; 2
     1e0:	83 e0       	ldi	r24, 0x03	; 3
     1e2:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     1e6:	32 e4       	ldi	r19, 0x42	; 66
     1e8:	3a 95       	dec	r19
     1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCD_4_Bit_SendCommand+0x3c>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <LCD_4_Bit_SendCommand+0x42>
     1ee:	25 b3       	in	r18, 0x15	; 21
     1f0:	30 e1       	ldi	r19, 0x10	; 16
     1f2:	c3 9f       	mul	r28, r19
     1f4:	c0 01       	movw	r24, r0
     1f6:	11 24       	eor	r1, r1
     1f8:	92 2f       	mov	r25, r18
     1fa:	9f 70       	andi	r25, 0x0F	; 15
     1fc:	89 2b       	or	r24, r25
     1fe:	85 bb       	out	0x15, r24	; 21
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	83 e0       	ldi	r24, 0x03	; 3
     206:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     214:	41 e0       	ldi	r20, 0x01	; 1
     216:	62 e0       	ldi	r22, 0x02	; 2
     218:	83 e0       	ldi	r24, 0x03	; 3
     21a:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     21e:	00 00       	nop
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	62 e0       	ldi	r22, 0x02	; 2
     224:	83 e0       	ldi	r24, 0x03	; 3
     226:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     22a:	8d ee       	ldi	r24, 0xED	; 237
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	f1 f7       	brne	.-4      	; 0x22e <LCD_4_Bit_SendCommand+0x82>
     232:	00 c0       	rjmp	.+0      	; 0x234 <LCD_4_Bit_SendCommand+0x88>
     234:	00 00       	nop
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <LCD_4_Bit_init>:
     23a:	cf 93       	push	r28
     23c:	c4 e0       	ldi	r28, 0x04	; 4
     23e:	06 c0       	rjmp	.+12     	; 0x24c <LCD_4_Bit_init+0x12>
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	6c 2f       	mov	r22, r28
     244:	82 e0       	ldi	r24, 0x02	; 2
     246:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_init>
     24a:	cf 5f       	subi	r28, 0xFF	; 255
     24c:	c8 30       	cpi	r28, 0x08	; 8
     24e:	c0 f3       	brcs	.-16     	; 0x240 <LCD_4_Bit_init+0x6>
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	83 e0       	ldi	r24, 0x03	; 3
     256:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_init>
     25a:	41 e0       	ldi	r20, 0x01	; 1
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_init>
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	62 e0       	ldi	r22, 0x02	; 2
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_init>
     26e:	87 e8       	ldi	r24, 0x87	; 135
     270:	93 e1       	ldi	r25, 0x13	; 19
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <LCD_4_Bit_init+0x38>
     276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_4_Bit_init+0x3e>
     278:	00 00       	nop
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_4_Bit_SendCommand>
     280:	88 e2       	ldi	r24, 0x28	; 40
     282:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_4_Bit_SendCommand>
     286:	8c e0       	ldi	r24, 0x0C	; 12
     288:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_4_Bit_SendCommand>
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_4_Bit_SendCommand>
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <LCD_4_Bit_SendChar>:
     296:	cf 93       	push	r28
     298:	88 23       	and	r24, r24
     29a:	09 f4       	brne	.+2      	; 0x29e <LCD_4_Bit_SendChar+0x8>
     29c:	44 c0       	rjmp	.+136    	; 0x326 <LCD_4_Bit_SendChar+0x90>
     29e:	c8 2f       	mov	r28, r24
     2a0:	85 b3       	in	r24, 0x15	; 21
     2a2:	8f 70       	andi	r24, 0x0F	; 15
     2a4:	9c 2f       	mov	r25, r28
     2a6:	90 7f       	andi	r25, 0xF0	; 240
     2a8:	89 2b       	or	r24, r25
     2aa:	85 bb       	out	0x15, r24	; 21
     2ac:	41 e0       	ldi	r20, 0x01	; 1
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	83 e0       	ldi	r24, 0x03	; 3
     2b2:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     2b6:	40 e0       	ldi	r20, 0x00	; 0
     2b8:	61 e0       	ldi	r22, 0x01	; 1
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     2c0:	41 e0       	ldi	r20, 0x01	; 1
     2c2:	62 e0       	ldi	r22, 0x02	; 2
     2c4:	83 e0       	ldi	r24, 0x03	; 3
     2c6:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     2ca:	00 00       	nop
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	62 e0       	ldi	r22, 0x02	; 2
     2d0:	83 e0       	ldi	r24, 0x03	; 3
     2d2:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     2d6:	32 e4       	ldi	r19, 0x42	; 66
     2d8:	3a 95       	dec	r19
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_4_Bit_SendChar+0x42>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_4_Bit_SendChar+0x48>
     2de:	25 b3       	in	r18, 0x15	; 21
     2e0:	30 e1       	ldi	r19, 0x10	; 16
     2e2:	c3 9f       	mul	r28, r19
     2e4:	c0 01       	movw	r24, r0
     2e6:	11 24       	eor	r1, r1
     2e8:	92 2f       	mov	r25, r18
     2ea:	9f 70       	andi	r25, 0x0F	; 15
     2ec:	89 2b       	or	r24, r25
     2ee:	85 bb       	out	0x15, r24	; 21
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     304:	41 e0       	ldi	r20, 0x01	; 1
     306:	62 e0       	ldi	r22, 0x02	; 2
     308:	83 e0       	ldi	r24, 0x03	; 3
     30a:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     30e:	00 00       	nop
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	62 e0       	ldi	r22, 0x02	; 2
     314:	83 e0       	ldi	r24, 0x03	; 3
     316:	0e 94 8d 02 	call	0x51a	; 0x51a <DIO_write>
     31a:	83 ef       	ldi	r24, 0xF3	; 243
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <LCD_4_Bit_SendChar+0x88>
     322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_4_Bit_SendChar+0x8e>
     324:	00 00       	nop
     326:	cf 91       	pop	r28
     328:	08 95       	ret

0000032a <LCD_Write_Number>:
}



void LCD_Write_Number(uint32 a_number)
{
     32a:	cf 92       	push	r12
     32c:	df 92       	push	r13
     32e:	ef 92       	push	r14
     330:	ff 92       	push	r15
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	60 97       	sbiw	r28, 0x10	; 16
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	6b 01       	movw	r12, r22
     34a:	7c 01       	movw	r14, r24
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
     34c:	67 2b       	or	r22, r23
     34e:	68 2b       	or	r22, r24
     350:	69 2b       	or	r22, r25
     352:	19 f4       	brne	.+6      	; 0x35a <LCD_Write_Number+0x30>
	{
		LCD_4_Bit_SendChar('0');
     354:	80 e3       	ldi	r24, 0x30	; 48
     356:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_4_Bit_SendChar>
}



void LCD_Write_Number(uint32 a_number)
{
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	15 c0       	rjmp	.+42     	; 0x388 <LCD_Write_Number+0x5e>
	{
		LCD_4_Bit_SendChar('0');
	}
	while(a_number>0)
	{
		L_Remainder=a_number%10;
     35e:	c7 01       	movw	r24, r14
     360:	b6 01       	movw	r22, r12
     362:	2a e0       	ldi	r18, 0x0A	; 10
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	40 e0       	ldi	r20, 0x00	; 0
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	0e 94 25 08 	call	0x104a	; 0x104a <__udivmodsi4>
		L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
     36e:	e1 e0       	ldi	r30, 0x01	; 1
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	ec 0f       	add	r30, r28
     374:	fd 1f       	adc	r31, r29
     376:	e1 0f       	add	r30, r17
     378:	f1 1d       	adc	r31, r1
     37a:	60 5d       	subi	r22, 0xD0	; 208
     37c:	60 83       	st	Z, r22
		L_Index_i++;
     37e:	1f 5f       	subi	r17, 0xFF	; 255
		a_number/=10;
     380:	c2 2e       	mov	r12, r18
     382:	d3 2e       	mov	r13, r19
     384:	e4 2e       	mov	r14, r20
     386:	f5 2e       	mov	r15, r21
	uint8_t L_Remainder=0,L_Arr[16],L_Index_i=0,L_Index_j;
	if (a_number==0)
	{
		LCD_4_Bit_SendChar('0');
	}
	while(a_number>0)
     388:	c1 14       	cp	r12, r1
     38a:	d1 04       	cpc	r13, r1
     38c:	e1 04       	cpc	r14, r1
     38e:	f1 04       	cpc	r15, r1
     390:	31 f7       	brne	.-52     	; 0x35e <LCD_Write_Number+0x34>
     392:	0d c0       	rjmp	.+26     	; 0x3ae <LCD_Write_Number+0x84>
		a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
	{
		LCD_4_Bit_SendChar(L_Arr[L_Index_j-1]);
     394:	e1 2f       	mov	r30, r17
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	8c 0f       	add	r24, r28
     3a0:	9d 1f       	adc	r25, r29
     3a2:	e8 0f       	add	r30, r24
     3a4:	f9 1f       	adc	r31, r25
     3a6:	80 81       	ld	r24, Z
     3a8:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_4_Bit_SendChar>
		L_Arr[L_Index_i]=L_Remainder+'0';    /*tp display the number it self, when we add the zero asci it shits the number to it's asci*/
		L_Index_i++;
		a_number/=10;
	}
	
	for (L_Index_j=L_Index_i;L_Index_j>0;L_Index_j--)    /*to display the array of number */
     3ac:	11 50       	subi	r17, 0x01	; 1
     3ae:	11 11       	cpse	r17, r1
     3b0:	f1 cf       	rjmp	.-30     	; 0x394 <LCD_Write_Number+0x6a>
	{
		LCD_4_Bit_SendChar(L_Arr[L_Index_j-1]);
	}
     3b2:	60 96       	adiw	r28, 0x10	; 16
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	ff 90       	pop	r15
     3c6:	ef 90       	pop	r14
     3c8:	df 90       	pop	r13
     3ca:	cf 90       	pop	r12
     3cc:	08 95       	ret

000003ce <LED_init>:
 *  Author: moham
 */ 
#include "led.h"

Dio_ErrorStatus LED_init(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portNum,pinNum,OUTPUT);
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_init>
	
	if ( loc_errorStatus == Dio_PortError){
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	29 f0       	breq	.+10     	; 0x3e2 <LED_init+0x14>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_PinError){
     3d8:	82 30       	cpi	r24, 0x02	; 2
     3da:	29 f0       	breq	.+10     	; 0x3e6 <LED_init+0x18>
	
		return Dio_PinError;
	
	
	}else if (loc_errorStatus == Dio_DirectionError){
     3dc:	84 30       	cpi	r24, 0x04	; 4
     3de:	29 f4       	brne	.+10     	; 0x3ea <LED_init+0x1c>
     3e0:	08 95       	ret
Dio_ErrorStatus LED_init(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portNum,pinNum,OUTPUT);
	
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	08 95       	ret
		
	}else if (loc_errorStatus == Dio_PinError){
	
		return Dio_PinError;
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	08 95       	ret
	}else if (loc_errorStatus == Dio_DirectionError){
		
		return Dio_DirectionError;
		
	}else{
		return Dio_Ok;
     3ea:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     3ec:	08 95       	ret

000003ee <main>:


 
int main(void)
{
	app_init();
     3ee:	0e 94 8a 00 	call	0x114	; 0x114 <app_init>
	

	app_start();
     3f2:	0e 94 97 00 	call	0x12e	; 0x12e <app_start>

		

		
	
}
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	08 95       	ret

000003fc <DIO_init>:
#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
     3fc:	68 30       	cpi	r22, 0x08	; 8
     3fe:	08 f0       	brcs	.+2      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     400:	80 c0       	rjmp	.+256    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
		loc_ErrorStatus = Dio_PinError ;
	}
	else{	
		switch (PortNum)
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	31 f1       	breq	.+76     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     406:	38 f0       	brcs	.+14     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     408:	82 30       	cpi	r24, 0x02	; 2
     40a:	09 f4       	brne	.+2      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     40c:	40 c0       	rjmp	.+128    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     40e:	83 30       	cpi	r24, 0x03	; 3
     410:	09 f4       	brne	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     412:	5a c0       	rjmp	.+180    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     414:	78 c0       	rjmp	.+240    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
		{

			case PORT_A :
					if (direction == INPUT)
     416:	41 11       	cpse	r20, r1
     418:	0d c0       	rjmp	.+26     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
					{
						CLR_BIT(DDRA,PinNum);
     41a:	2a b3       	in	r18, 0x1a	; 26
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	02 c0       	rjmp	.+4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	6a 95       	dec	r22
     428:	e2 f7       	brpl	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     42a:	80 95       	com	r24
     42c:	82 23       	and	r24, r18
     42e:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	08 95       	ret

			case PORT_A :
					if (direction == INPUT)
					{
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
     434:	41 30       	cpi	r20, 0x01	; 1
     436:	09 f0       	breq	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     438:	68 c0       	rjmp	.+208    	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
						SET_BIT(DDRA,PinNum);
     43a:	2a b3       	in	r18, 0x1a	; 26
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	6a 95       	dec	r22
     448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     44a:	82 2b       	or	r24, r18
     44c:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	08 95       	ret
					}
					break;
		
		
			case PORT_B :
					if (direction == INPUT)
     452:	41 11       	cpse	r20, r1
     454:	0d c0       	rjmp	.+26     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
					{
						CLR_BIT(DDRB,PinNum);
     456:	27 b3       	in	r18, 0x17	; 23
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	6a 95       	dec	r22
     464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     466:	80 95       	com	r24
     468:	82 23       	and	r24, r18
     46a:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	08 95       	ret
		
			case PORT_B :
					if (direction == INPUT)
					{
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
     470:	41 30       	cpi	r20, 0x01	; 1
     472:	09 f0       	breq	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     474:	4c c0       	rjmp	.+152    	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
						SET_BIT(DDRB,PinNum);
     476:	27 b3       	in	r18, 0x17	; 23
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	6a 95       	dec	r22
     484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     486:	82 2b       	or	r24, r18
     488:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
					break;
		
		
		
			case PORT_C :
					if (direction == INPUT)
     48e:	41 11       	cpse	r20, r1
     490:	0d c0       	rjmp	.+26     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
					{
						CLR_BIT(DDRC,PinNum);
     492:	24 b3       	in	r18, 0x14	; 20
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	6a 95       	dec	r22
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     4a2:	80 95       	com	r24
     4a4:	82 23       	and	r24, r18
     4a6:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	08 95       	ret
		
			case PORT_C :
					if (direction == INPUT)
					{
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
     4ac:	41 30       	cpi	r20, 0x01	; 1
     4ae:	89 f5       	brne	.+98     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
						SET_BIT(DDRC,PinNum);
     4b0:	24 b3       	in	r18, 0x14	; 20
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	6a 95       	dec	r22
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4c0:	82 2b       	or	r24, r18
     4c2:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	08 95       	ret
					break;
		
		
		
			case PORT_D :
					if (direction == INPUT)
     4c8:	41 11       	cpse	r20, r1
     4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
					{
						CLR_BIT(DDRD,PinNum);
     4cc:	21 b3       	in	r18, 0x11	; 17
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     4d4:	88 0f       	add	r24, r24
     4d6:	99 1f       	adc	r25, r25
     4d8:	6a 95       	dec	r22
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4dc:	80 95       	com	r24
     4de:	82 23       	and	r24, r18
     4e0:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	08 95       	ret
		
			case PORT_D :
					if (direction == INPUT)
					{
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
     4e6:	41 30       	cpi	r20, 0x01	; 1
     4e8:	b1 f4       	brne	.+44     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
						SET_BIT(DDRD,PinNum);
     4ea:	21 b3       	in	r18, 0x11	; 17
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	6a 95       	dec	r22
     4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4fa:	82 2b       	or	r24, r18
     4fc:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_ErrorStatus = Dio_PinError ;
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	08 95       	ret
					}
					break;
		
			default:
			//error handling
					loc_ErrorStatus = Dio_PortError;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	08 95       	ret
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRA,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
     50a:	84 e0       	ldi	r24, 0x04	; 4
     50c:	08 95       	ret
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRB,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
     50e:	84 e0       	ldi	r24, 0x04	; 4
     510:	08 95       	ret
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRC,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
     512:	84 e0       	ldi	r24, 0x04	; 4
     514:	08 95       	ret
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRD,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
     516:	84 e0       	ldi	r24, 0x04	; 4
		}
					}
	
	return loc_ErrorStatus ;

}
     518:	08 95       	ret

0000051a <DIO_write>:


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
     51a:	68 30       	cpi	r22, 0x08	; 8
     51c:	08 f0       	brcs	.+2      	; 0x520 <DIO_write+0x6>
     51e:	80 c0       	rjmp	.+256    	; 0x620 <DIO_write+0x106>
		loc_errorStatus = Dio_PinError ;
	}
	else{
		switch (PortNum)
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	31 f1       	breq	.+76     	; 0x570 <DIO_write+0x56>
     524:	38 f0       	brcs	.+14     	; 0x534 <DIO_write+0x1a>
     526:	82 30       	cpi	r24, 0x02	; 2
     528:	09 f4       	brne	.+2      	; 0x52c <DIO_write+0x12>
     52a:	40 c0       	rjmp	.+128    	; 0x5ac <DIO_write+0x92>
     52c:	83 30       	cpi	r24, 0x03	; 3
     52e:	09 f4       	brne	.+2      	; 0x532 <DIO_write+0x18>
     530:	5a c0       	rjmp	.+180    	; 0x5e6 <DIO_write+0xcc>
     532:	78 c0       	rjmp	.+240    	; 0x624 <DIO_write+0x10a>
		{
			case PORT_A :
			
					if (value == LOW)
     534:	41 11       	cpse	r20, r1
     536:	0d c0       	rjmp	.+26     	; 0x552 <DIO_write+0x38>
					{
						CLR_BIT(PORTA,PinNum);
     538:	2b b3       	in	r18, 0x1b	; 27
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_write+0x2a>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	6a 95       	dec	r22
     546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_write+0x26>
     548:	80 95       	com	r24
     54a:	82 23       	and	r24, r18
     54c:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	08 95       	ret
			
					if (value == LOW)
					{
						CLR_BIT(PORTA,PinNum);
			
					}else if ( value == HIGH){
     552:	41 30       	cpi	r20, 0x01	; 1
     554:	09 f0       	breq	.+2      	; 0x558 <DIO_write+0x3e>
     556:	68 c0       	rjmp	.+208    	; 0x628 <DIO_write+0x10e>
			
						SET_BIT(PORTA,PinNum);
     558:	2b b3       	in	r18, 0x1b	; 27
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_write+0x4a>
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	6a 95       	dec	r22
     566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_write+0x46>
     568:	82 2b       	or	r24, r18
     56a:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_B :
					if (value == LOW)
     570:	41 11       	cpse	r20, r1
     572:	0d c0       	rjmp	.+26     	; 0x58e <DIO_write+0x74>
					{
						CLR_BIT(PORTB,PinNum);
     574:	28 b3       	in	r18, 0x18	; 24
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_write+0x66>
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	6a 95       	dec	r22
     582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_write+0x62>
     584:	80 95       	com	r24
     586:	82 23       	and	r24, r18
     588:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	08 95       	ret
			case PORT_B :
					if (value == LOW)
					{
						CLR_BIT(PORTB,PinNum);
			
					}else if ( value == HIGH){
     58e:	41 30       	cpi	r20, 0x01	; 1
     590:	09 f0       	breq	.+2      	; 0x594 <DIO_write+0x7a>
     592:	4c c0       	rjmp	.+152    	; 0x62c <DIO_write+0x112>
			
						SET_BIT(PORTB,PinNum);
     594:	28 b3       	in	r18, 0x18	; 24
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_write+0x86>
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	6a 95       	dec	r22
     5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_write+0x82>
     5a4:	82 2b       	or	r24, r18
     5a6:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_C :
					if (value == LOW)
     5ac:	41 11       	cpse	r20, r1
     5ae:	0d c0       	rjmp	.+26     	; 0x5ca <DIO_write+0xb0>
					{
						CLR_BIT(PORTC,PinNum);
     5b0:	25 b3       	in	r18, 0x15	; 21
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_write+0xa2>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	6a 95       	dec	r22
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_write+0x9e>
     5c0:	80 95       	com	r24
     5c2:	82 23       	and	r24, r18
     5c4:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	08 95       	ret
			case PORT_C :
					if (value == LOW)
					{
						CLR_BIT(PORTC,PinNum);
			
					}else if ( value == HIGH){
     5ca:	41 30       	cpi	r20, 0x01	; 1
     5cc:	89 f5       	brne	.+98     	; 0x630 <DIO_write+0x116>
			
						SET_BIT(PORTC,PinNum);
     5ce:	25 b3       	in	r18, 0x15	; 21
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_write+0xc0>
     5d6:	88 0f       	add	r24, r24
     5d8:	99 1f       	adc	r25, r25
     5da:	6a 95       	dec	r22
     5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_write+0xbc>
     5de:	82 2b       	or	r24, r18
     5e0:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_D :
					if (value == LOW)
     5e6:	41 11       	cpse	r20, r1
     5e8:	0d c0       	rjmp	.+26     	; 0x604 <DIO_write+0xea>
					{
						CLR_BIT(PORTD,PinNum);
     5ea:	22 b3       	in	r18, 0x12	; 18
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_write+0xdc>
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	6a 95       	dec	r22
     5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_write+0xd8>
     5fa:	80 95       	com	r24
     5fc:	82 23       	and	r24, r18
     5fe:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	08 95       	ret
			case PORT_D :
					if (value == LOW)
					{
						CLR_BIT(PORTD,PinNum);
			
					}else if ( value == HIGH){
     604:	41 30       	cpi	r20, 0x01	; 1
     606:	b1 f4       	brne	.+44     	; 0x634 <DIO_write+0x11a>
			
						SET_BIT(PORTD,PinNum);
     608:	22 b3       	in	r18, 0x12	; 18
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_write+0xfa>
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	6a 95       	dec	r22
     616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_write+0xf6>
     618:	82 2b       	or	r24, r18
     61a:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_errorStatus = Dio_PinError ;
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	08 95       	ret
					break;
		
		
			default:
			//error handling
				loc_errorStatus = Dio_PortError ;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTA,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTB,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTC,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	08 95       	ret
			
						SET_BIT(PORTD,PinNum);
			
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
     634:	83 e0       	ldi	r24, 0x03	; 3
				break;
		
				}
		}
	return loc_errorStatus;
	}
     636:	08 95       	ret

00000638 <__vector_1>:
//					 ISR FUNCTION
/***************************************************/
 
/**********  ISR OF INT_0  ************/

ISR(EXT_INT_0){
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31

	
		P0_CallbackFunction();
     65a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <P0_CallbackFunction>
     65e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <P0_CallbackFunction+0x1>
     662:	09 95       	icall
	
	
}
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <__vector_2>:


/**********  ISR OF INT_1  ************/

ISR(EXT_INT_1){
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	2f 93       	push	r18
     692:	3f 93       	push	r19
     694:	4f 93       	push	r20
     696:	5f 93       	push	r21
     698:	6f 93       	push	r22
     69a:	7f 93       	push	r23
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31

	
		P1_CallbackFunction();
     6a8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <P1_CallbackFunction>
     6ac:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <P1_CallbackFunction+0x1>
     6b0:	09 95       	icall
	
	
}
     6b2:	ff 91       	pop	r31
     6b4:	ef 91       	pop	r30
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	7f 91       	pop	r23
     6c0:	6f 91       	pop	r22
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_3>:


/**********  ISR OF INT_2  ************/

ISR(EXT_INT_2){
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	2f 93       	push	r18
     6e0:	3f 93       	push	r19
     6e2:	4f 93       	push	r20
     6e4:	5f 93       	push	r21
     6e6:	6f 93       	push	r22
     6e8:	7f 93       	push	r23
     6ea:	8f 93       	push	r24
     6ec:	9f 93       	push	r25
     6ee:	af 93       	push	r26
     6f0:	bf 93       	push	r27
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31

	
		P2_CallbackFunction();
     6f6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6fa:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     6fe:	09 95       	icall
	
	
     700:	ff 91       	pop	r31
     702:	ef 91       	pop	r30
     704:	bf 91       	pop	r27
     706:	af 91       	pop	r26
     708:	9f 91       	pop	r25
     70a:	8f 91       	pop	r24
     70c:	7f 91       	pop	r23
     70e:	6f 91       	pop	r22
     710:	5f 91       	pop	r21
     712:	4f 91       	pop	r20
     714:	3f 91       	pop	r19
     716:	2f 91       	pop	r18
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	1f 90       	pop	r1
     720:	18 95       	reti

00000722 <I2C_init>:
		}
		
	}
	
	
}
     722:	11 b8       	out	0x01, r1	; 1
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	69 f0       	breq	.+26     	; 0x742 <I2C_init+0x20>
     728:	28 f0       	brcs	.+10     	; 0x734 <I2C_init+0x12>
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	89 f0       	breq	.+34     	; 0x750 <I2C_init+0x2e>
     72e:	83 30       	cpi	r24, 0x03	; 3
     730:	b1 f0       	breq	.+44     	; 0x75e <I2C_init+0x3c>
     732:	1b c0       	rjmp	.+54     	; 0x76a <I2C_init+0x48>
     734:	81 b1       	in	r24, 0x01	; 1
     736:	8e 7f       	andi	r24, 0xFE	; 254
     738:	81 b9       	out	0x01, r24	; 1
     73a:	81 b1       	in	r24, 0x01	; 1
     73c:	8d 7f       	andi	r24, 0xFD	; 253
     73e:	81 b9       	out	0x01, r24	; 1
     740:	14 c0       	rjmp	.+40     	; 0x76a <I2C_init+0x48>
     742:	81 b1       	in	r24, 0x01	; 1
     744:	81 60       	ori	r24, 0x01	; 1
     746:	81 b9       	out	0x01, r24	; 1
     748:	81 b1       	in	r24, 0x01	; 1
     74a:	8d 7f       	andi	r24, 0xFD	; 253
     74c:	81 b9       	out	0x01, r24	; 1
     74e:	0d c0       	rjmp	.+26     	; 0x76a <I2C_init+0x48>
     750:	81 b1       	in	r24, 0x01	; 1
     752:	8e 7f       	andi	r24, 0xFE	; 254
     754:	81 b9       	out	0x01, r24	; 1
     756:	81 b1       	in	r24, 0x01	; 1
     758:	82 60       	ori	r24, 0x02	; 2
     75a:	81 b9       	out	0x01, r24	; 1
     75c:	06 c0       	rjmp	.+12     	; 0x76a <I2C_init+0x48>
     75e:	81 b1       	in	r24, 0x01	; 1
     760:	81 60       	ori	r24, 0x01	; 1
     762:	81 b9       	out	0x01, r24	; 1
     764:	81 b1       	in	r24, 0x01	; 1
     766:	82 60       	ori	r24, 0x02	; 2
     768:	81 b9       	out	0x01, r24	; 1
     76a:	61 b1       	in	r22, 0x01	; 1
     76c:	63 70       	andi	r22, 0x03	; 3
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__floatsisf>
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e8       	ldi	r24, 0x80	; 128
     782:	90 e4       	ldi	r25, 0x40	; 64
     784:	0e 94 ae 06 	call	0xd5c	; 0xd5c <pow>
     788:	9b 01       	movw	r18, r22
     78a:	ac 01       	movw	r20, r24
     78c:	0e 94 98 04 	call	0x930	; 0x930 <__addsf3>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e8       	ldi	r24, 0x80	; 128
     79a:	9f e4       	ldi	r25, 0x4F	; 79
     79c:	0e 94 04 05 	call	0xa08	; 0xa08 <__divsf3>
     7a0:	0e 94 76 05 	call	0xaec	; 0xaec <__fixunssfsi>
     7a4:	60 b9       	out	0x00, r22	; 0
     7a6:	08 95       	ret

000007a8 <I2C_start>:
     7a8:	86 b7       	in	r24, 0x36	; 54
     7aa:	80 68       	ori	r24, 0x80	; 128
     7ac:	86 bf       	out	0x36, r24	; 54
     7ae:	86 b7       	in	r24, 0x36	; 54
     7b0:	80 62       	ori	r24, 0x20	; 32
     7b2:	86 bf       	out	0x36, r24	; 54
     7b4:	86 b7       	in	r24, 0x36	; 54
     7b6:	84 60       	ori	r24, 0x04	; 4
     7b8:	86 bf       	out	0x36, r24	; 54
     7ba:	06 b6       	in	r0, 0x36	; 54
     7bc:	07 fe       	sbrs	r0, 7
     7be:	fd cf       	rjmp	.-6      	; 0x7ba <I2C_start+0x12>
     7c0:	81 b1       	in	r24, 0x01	; 1
     7c2:	88 7f       	andi	r24, 0xF8	; 248
     7c4:	88 30       	cpi	r24, 0x08	; 8
     7c6:	11 f4       	brne	.+4      	; 0x7cc <I2C_start+0x24>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	08 95       	ret
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	08 95       	ret

000007d0 <I2C_addressEvent>:
     7d0:	66 23       	and	r22, r22
     7d2:	19 f0       	breq	.+6      	; 0x7da <I2C_addressEvent+0xa>
     7d4:	61 30       	cpi	r22, 0x01	; 1
     7d6:	a9 f0       	breq	.+42     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7d8:	29 c0       	rjmp	.+82     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     7da:	83 b9       	out	0x03, r24	; 3
     7dc:	86 b7       	in	r24, 0x36	; 54
     7de:	80 68       	ori	r24, 0x80	; 128
     7e0:	86 bf       	out	0x36, r24	; 54
     7e2:	86 b7       	in	r24, 0x36	; 54
     7e4:	84 60       	ori	r24, 0x04	; 4
     7e6:	86 bf       	out	0x36, r24	; 54
     7e8:	06 b6       	in	r0, 0x36	; 54
     7ea:	07 fe       	sbrs	r0, 7
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <I2C_addressEvent+0x18>
     7ee:	81 b1       	in	r24, 0x01	; 1
     7f0:	88 7f       	andi	r24, 0xF8	; 248
     7f2:	88 31       	cpi	r24, 0x18	; 24
     7f4:	e1 f0       	breq	.+56     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     7f6:	81 b1       	in	r24, 0x01	; 1
     7f8:	88 7f       	andi	r24, 0xF8	; 248
     7fa:	80 32       	cpi	r24, 0x20	; 32
     7fc:	d1 f4       	brne	.+52     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	08 95       	ret
     802:	8f 5f       	subi	r24, 0xFF	; 255
     804:	83 b9       	out	0x03, r24	; 3
     806:	86 b7       	in	r24, 0x36	; 54
     808:	80 68       	ori	r24, 0x80	; 128
     80a:	86 bf       	out	0x36, r24	; 54
     80c:	86 b7       	in	r24, 0x36	; 54
     80e:	84 60       	ori	r24, 0x04	; 4
     810:	86 bf       	out	0x36, r24	; 54
     812:	06 b6       	in	r0, 0x36	; 54
     814:	07 fe       	sbrs	r0, 7
     816:	fd cf       	rjmp	.-6      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     818:	81 b1       	in	r24, 0x01	; 1
     81a:	88 7f       	andi	r24, 0xF8	; 248
     81c:	80 34       	cpi	r24, 0x40	; 64
     81e:	59 f0       	breq	.+22     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     820:	81 b1       	in	r24, 0x01	; 1
     822:	88 7f       	andi	r24, 0xF8	; 248
     824:	88 34       	cpi	r24, 0x48	; 72
     826:	49 f4       	brne	.+18     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     828:	87 e0       	ldi	r24, 0x07	; 7
     82a:	08 95       	ret
     82c:	08 95       	ret
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	08 95       	ret
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	08 95       	ret
     836:	86 e0       	ldi	r24, 0x06	; 6
     838:	08 95       	ret
     83a:	88 e0       	ldi	r24, 0x08	; 8
     83c:	08 95       	ret

0000083e <I2C_stop>:
     83e:	86 b7       	in	r24, 0x36	; 54
     840:	8f 7d       	andi	r24, 0xDF	; 223
     842:	86 bf       	out	0x36, r24	; 54
     844:	86 b7       	in	r24, 0x36	; 54
     846:	80 68       	ori	r24, 0x80	; 128
     848:	86 bf       	out	0x36, r24	; 54
     84a:	86 b7       	in	r24, 0x36	; 54
     84c:	80 61       	ori	r24, 0x10	; 16
     84e:	86 bf       	out	0x36, r24	; 54
     850:	86 b7       	in	r24, 0x36	; 54
     852:	84 60       	ori	r24, 0x04	; 4
     854:	86 bf       	out	0x36, r24	; 54
     856:	06 b6       	in	r0, 0x36	; 54
     858:	04 fc       	sbrc	r0, 4
     85a:	fd cf       	rjmp	.-6      	; 0x856 <I2C_stop+0x18>
     85c:	08 95       	ret

0000085e <I2C_receiveData>:
     85e:	fc 01       	movw	r30, r24
     860:	66 23       	and	r22, r22
     862:	19 f0       	breq	.+6      	; 0x86a <__stack+0xb>
     864:	61 30       	cpi	r22, 0x01	; 1
     866:	29 f0       	breq	.+10     	; 0x872 <__stack+0x13>
     868:	07 c0       	rjmp	.+14     	; 0x878 <__stack+0x19>
     86a:	86 b7       	in	r24, 0x36	; 54
     86c:	80 64       	ori	r24, 0x40	; 64
     86e:	86 bf       	out	0x36, r24	; 54
     870:	03 c0       	rjmp	.+6      	; 0x878 <__stack+0x19>
     872:	86 b7       	in	r24, 0x36	; 54
     874:	8f 7b       	andi	r24, 0xBF	; 191
     876:	86 bf       	out	0x36, r24	; 54
     878:	96 b7       	in	r25, 0x36	; 54
     87a:	90 68       	ori	r25, 0x80	; 128
     87c:	96 bf       	out	0x36, r25	; 54
     87e:	96 b7       	in	r25, 0x36	; 54
     880:	94 60       	ori	r25, 0x04	; 4
     882:	96 bf       	out	0x36, r25	; 54
     884:	06 b6       	in	r0, 0x36	; 54
     886:	07 fe       	sbrs	r0, 7
     888:	fd cf       	rjmp	.-6      	; 0x884 <__stack+0x25>
     88a:	83 b1       	in	r24, 0x03	; 3
     88c:	80 83       	st	Z, r24
     88e:	81 b1       	in	r24, 0x01	; 1
     890:	88 7f       	andi	r24, 0xF8	; 248
     892:	80 35       	cpi	r24, 0x50	; 80
     894:	31 f0       	breq	.+12     	; 0x8a2 <__stack+0x43>
     896:	81 b1       	in	r24, 0x01	; 1
     898:	88 7f       	andi	r24, 0xF8	; 248
     89a:	88 35       	cpi	r24, 0x58	; 88
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__stack+0x47>
     89e:	8d e0       	ldi	r24, 0x0D	; 13
     8a0:	08 95       	ret
     8a2:	8c e0       	ldi	r24, 0x0C	; 12
     8a4:	08 95       	ret
     8a6:	8e e0       	ldi	r24, 0x0E	; 14
     8a8:	08 95       	ret

000008aa <EEPROM_Read>:
void EEPROM_Read ( uint8_t *data ,uint8_t _address) {
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	ec 01       	movw	r28, r24

	if(I2C_start()==EVENT_OK){
     8b0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <I2C_start>
     8b4:	81 11       	cpse	r24, r1
     8b6:	0e c0       	rjmp	.+28     	; 0x8d4 <EEPROM_Read+0x2a>
			
		//	if(I2C_sendData(_address)== DATA_SENT_ACK_OK){
			
			//	if(I2c_Restart()==EVENT_OK){
					
					if(I2C_addressEvent(0xA0,READ)==AD_R_SENT_ACK_OK){
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	80 ea       	ldi	r24, 0xA0	; 160
     8bc:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <I2C_addressEvent>
     8c0:	86 30       	cpi	r24, 0x06	; 6
     8c2:	41 f4       	brne	.+16     	; 0x8d4 <EEPROM_Read+0x2a>
						
						if(I2C_receiveData(data,NACK)== DATA_RECIEVE_NACK_OK){
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	ce 01       	movw	r24, r28
     8c8:	0e 94 2f 04 	call	0x85e	; 0x85e <I2C_receiveData>
     8cc:	8d 30       	cpi	r24, 0x0D	; 13
     8ce:	11 f4       	brne	.+4      	; 0x8d4 <EEPROM_Read+0x2a>
							
							I2C_stop();
     8d0:	0e 94 1f 04 	call	0x83e	; 0x83e <I2C_stop>
		
		
	}
	
	
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <TIMER_0_init>:
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
	
	switch(mode){
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	f1 f0       	breq	.+60     	; 0x91a <TIMER_0_init+0x40>
     8de:	28 f0       	brcs	.+10     	; 0x8ea <TIMER_0_init+0x10>
     8e0:	82 30       	cpi	r24, 0x02	; 2
     8e2:	99 f0       	breq	.+38     	; 0x90a <TIMER_0_init+0x30>
     8e4:	83 30       	cpi	r24, 0x03	; 3
     8e6:	49 f0       	breq	.+18     	; 0x8fa <TIMER_0_init+0x20>
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <TIMER_0_init+0x50>
		
		case NORMAL_MODE :
		CLR_BIT(TCCR0,WGM00);
     8ea:	83 b7       	in	r24, 0x33	; 51
     8ec:	8f 7b       	andi	r24, 0xBF	; 191
     8ee:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
     8f0:	83 b7       	in	r24, 0x33	; 51
     8f2:	87 7f       	andi	r24, 0xF7	; 247
     8f4:	83 bf       	out	0x33, r24	; 51
 *  Author: moham
 */ 
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
     8f6:	84 e0       	ldi	r24, 0x04	; 4
	switch(mode){
		
		case NORMAL_MODE :
		CLR_BIT(TCCR0,WGM00);
		CLR_BIT(TCCR0,WGM01);
		break;
     8f8:	08 95       	ret
		
		case PWM_PHASE_CORRECT :
		SET_BIT(TCCR0,WGM00);
     8fa:	83 b7       	in	r24, 0x33	; 51
     8fc:	80 64       	ori	r24, 0x40	; 64
     8fe:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
     900:	83 b7       	in	r24, 0x33	; 51
     902:	87 7f       	andi	r24, 0xF7	; 247
     904:	83 bf       	out	0x33, r24	; 51
 *  Author: moham
 */ 
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
     906:	84 e0       	ldi	r24, 0x04	; 4
		break;
		
		case PWM_PHASE_CORRECT :
		SET_BIT(TCCR0,WGM00);
		CLR_BIT(TCCR0,WGM01);
		break;
     908:	08 95       	ret
		
		case CTC :
		CLR_BIT(TCCR0,WGM00);
     90a:	83 b7       	in	r24, 0x33	; 51
     90c:	8f 7b       	andi	r24, 0xBF	; 191
     90e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
     910:	83 b7       	in	r24, 0x33	; 51
     912:	88 60       	ori	r24, 0x08	; 8
     914:	83 bf       	out	0x33, r24	; 51
 *  Author: moham
 */ 
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
     916:	84 e0       	ldi	r24, 0x04	; 4
		break;
		
		case CTC :
		CLR_BIT(TCCR0,WGM00);
		SET_BIT(TCCR0,WGM01);
		break;
     918:	08 95       	ret
		
		
		case FAST_PWM :
		SET_BIT(TCCR0,WGM00);
     91a:	83 b7       	in	r24, 0x33	; 51
     91c:	80 64       	ori	r24, 0x40	; 64
     91e:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
     920:	83 b7       	in	r24, 0x33	; 51
     922:	88 60       	ori	r24, 0x08	; 8
     924:	83 bf       	out	0x33, r24	; 51
 *  Author: moham
 */ 
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
     926:	84 e0       	ldi	r24, 0x04	; 4
		
		
		case FAST_PWM :
		SET_BIT(TCCR0,WGM00);
		SET_BIT(TCCR0,WGM01);
		break;
     928:	08 95       	ret
		
		default:
		errorStatus = INVALID_MODE ;
     92a:	81 e0       	ldi	r24, 0x01	; 1
	
	
	return errorStatus;
	
	
}
     92c:	08 95       	ret

0000092e <__subsf3>:
     92e:	50 58       	subi	r21, 0x80	; 128

00000930 <__addsf3>:
     930:	bb 27       	eor	r27, r27
     932:	aa 27       	eor	r26, r26
     934:	0e 94 af 04 	call	0x95e	; 0x95e <__addsf3x>
     938:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_round>
     93c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_pscA>
     940:	38 f0       	brcs	.+14     	; 0x950 <__addsf3+0x20>
     942:	0e 94 00 06 	call	0xc00	; 0xc00 <__fp_pscB>
     946:	20 f0       	brcs	.+8      	; 0x950 <__addsf3+0x20>
     948:	39 f4       	brne	.+14     	; 0x958 <__addsf3+0x28>
     94a:	9f 3f       	cpi	r25, 0xFF	; 255
     94c:	19 f4       	brne	.+6      	; 0x954 <__addsf3+0x24>
     94e:	26 f4       	brtc	.+8      	; 0x958 <__addsf3+0x28>
     950:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_nan>
     954:	0e f4       	brtc	.+2      	; 0x958 <__addsf3+0x28>
     956:	e0 95       	com	r30
     958:	e7 fb       	bst	r30, 7
     95a:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>

0000095e <__addsf3x>:
     95e:	e9 2f       	mov	r30, r25
     960:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_split3>
     964:	58 f3       	brcs	.-42     	; 0x93c <__addsf3+0xc>
     966:	ba 17       	cp	r27, r26
     968:	62 07       	cpc	r22, r18
     96a:	73 07       	cpc	r23, r19
     96c:	84 07       	cpc	r24, r20
     96e:	95 07       	cpc	r25, r21
     970:	20 f0       	brcs	.+8      	; 0x97a <__addsf3x+0x1c>
     972:	79 f4       	brne	.+30     	; 0x992 <__addsf3x+0x34>
     974:	a6 f5       	brtc	.+104    	; 0x9de <__addsf3x+0x80>
     976:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_zero>
     97a:	0e f4       	brtc	.+2      	; 0x97e <__addsf3x+0x20>
     97c:	e0 95       	com	r30
     97e:	0b 2e       	mov	r0, r27
     980:	ba 2f       	mov	r27, r26
     982:	a0 2d       	mov	r26, r0
     984:	0b 01       	movw	r0, r22
     986:	b9 01       	movw	r22, r18
     988:	90 01       	movw	r18, r0
     98a:	0c 01       	movw	r0, r24
     98c:	ca 01       	movw	r24, r20
     98e:	a0 01       	movw	r20, r0
     990:	11 24       	eor	r1, r1
     992:	ff 27       	eor	r31, r31
     994:	59 1b       	sub	r21, r25
     996:	99 f0       	breq	.+38     	; 0x9be <__addsf3x+0x60>
     998:	59 3f       	cpi	r21, 0xF9	; 249
     99a:	50 f4       	brcc	.+20     	; 0x9b0 <__addsf3x+0x52>
     99c:	50 3e       	cpi	r21, 0xE0	; 224
     99e:	68 f1       	brcs	.+90     	; 0x9fa <__addsf3x+0x9c>
     9a0:	1a 16       	cp	r1, r26
     9a2:	f0 40       	sbci	r31, 0x00	; 0
     9a4:	a2 2f       	mov	r26, r18
     9a6:	23 2f       	mov	r18, r19
     9a8:	34 2f       	mov	r19, r20
     9aa:	44 27       	eor	r20, r20
     9ac:	58 5f       	subi	r21, 0xF8	; 248
     9ae:	f3 cf       	rjmp	.-26     	; 0x996 <__addsf3x+0x38>
     9b0:	46 95       	lsr	r20
     9b2:	37 95       	ror	r19
     9b4:	27 95       	ror	r18
     9b6:	a7 95       	ror	r26
     9b8:	f0 40       	sbci	r31, 0x00	; 0
     9ba:	53 95       	inc	r21
     9bc:	c9 f7       	brne	.-14     	; 0x9b0 <__addsf3x+0x52>
     9be:	7e f4       	brtc	.+30     	; 0x9de <__addsf3x+0x80>
     9c0:	1f 16       	cp	r1, r31
     9c2:	ba 0b       	sbc	r27, r26
     9c4:	62 0b       	sbc	r22, r18
     9c6:	73 0b       	sbc	r23, r19
     9c8:	84 0b       	sbc	r24, r20
     9ca:	ba f0       	brmi	.+46     	; 0x9fa <__addsf3x+0x9c>
     9cc:	91 50       	subi	r25, 0x01	; 1
     9ce:	a1 f0       	breq	.+40     	; 0x9f8 <__addsf3x+0x9a>
     9d0:	ff 0f       	add	r31, r31
     9d2:	bb 1f       	adc	r27, r27
     9d4:	66 1f       	adc	r22, r22
     9d6:	77 1f       	adc	r23, r23
     9d8:	88 1f       	adc	r24, r24
     9da:	c2 f7       	brpl	.-16     	; 0x9cc <__addsf3x+0x6e>
     9dc:	0e c0       	rjmp	.+28     	; 0x9fa <__addsf3x+0x9c>
     9de:	ba 0f       	add	r27, r26
     9e0:	62 1f       	adc	r22, r18
     9e2:	73 1f       	adc	r23, r19
     9e4:	84 1f       	adc	r24, r20
     9e6:	48 f4       	brcc	.+18     	; 0x9fa <__addsf3x+0x9c>
     9e8:	87 95       	ror	r24
     9ea:	77 95       	ror	r23
     9ec:	67 95       	ror	r22
     9ee:	b7 95       	ror	r27
     9f0:	f7 95       	ror	r31
     9f2:	9e 3f       	cpi	r25, 0xFE	; 254
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <__addsf3x+0x9a>
     9f6:	b0 cf       	rjmp	.-160    	; 0x958 <__addsf3+0x28>
     9f8:	93 95       	inc	r25
     9fa:	88 0f       	add	r24, r24
     9fc:	08 f0       	brcs	.+2      	; 0xa00 <__addsf3x+0xa2>
     9fe:	99 27       	eor	r25, r25
     a00:	ee 0f       	add	r30, r30
     a02:	97 95       	ror	r25
     a04:	87 95       	ror	r24
     a06:	08 95       	ret

00000a08 <__divsf3>:
     a08:	0e 94 18 05 	call	0xa30	; 0xa30 <__divsf3x>
     a0c:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_round>
     a10:	0e 94 00 06 	call	0xc00	; 0xc00 <__fp_pscB>
     a14:	58 f0       	brcs	.+22     	; 0xa2c <__divsf3+0x24>
     a16:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_pscA>
     a1a:	40 f0       	brcs	.+16     	; 0xa2c <__divsf3+0x24>
     a1c:	29 f4       	brne	.+10     	; 0xa28 <__divsf3+0x20>
     a1e:	5f 3f       	cpi	r21, 0xFF	; 255
     a20:	29 f0       	breq	.+10     	; 0xa2c <__divsf3+0x24>
     a22:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
     a26:	51 11       	cpse	r21, r1
     a28:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__fp_szero>
     a2c:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_nan>

00000a30 <__divsf3x>:
     a30:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_split3>
     a34:	68 f3       	brcs	.-38     	; 0xa10 <__divsf3+0x8>

00000a36 <__divsf3_pse>:
     a36:	99 23       	and	r25, r25
     a38:	b1 f3       	breq	.-20     	; 0xa26 <__divsf3+0x1e>
     a3a:	55 23       	and	r21, r21
     a3c:	91 f3       	breq	.-28     	; 0xa22 <__divsf3+0x1a>
     a3e:	95 1b       	sub	r25, r21
     a40:	55 0b       	sbc	r21, r21
     a42:	bb 27       	eor	r27, r27
     a44:	aa 27       	eor	r26, r26
     a46:	62 17       	cp	r22, r18
     a48:	73 07       	cpc	r23, r19
     a4a:	84 07       	cpc	r24, r20
     a4c:	38 f0       	brcs	.+14     	; 0xa5c <__divsf3_pse+0x26>
     a4e:	9f 5f       	subi	r25, 0xFF	; 255
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	22 0f       	add	r18, r18
     a54:	33 1f       	adc	r19, r19
     a56:	44 1f       	adc	r20, r20
     a58:	aa 1f       	adc	r26, r26
     a5a:	a9 f3       	breq	.-22     	; 0xa46 <__divsf3_pse+0x10>
     a5c:	35 d0       	rcall	.+106    	; 0xac8 <__divsf3_pse+0x92>
     a5e:	0e 2e       	mov	r0, r30
     a60:	3a f0       	brmi	.+14     	; 0xa70 <__divsf3_pse+0x3a>
     a62:	e0 e8       	ldi	r30, 0x80	; 128
     a64:	32 d0       	rcall	.+100    	; 0xaca <__divsf3_pse+0x94>
     a66:	91 50       	subi	r25, 0x01	; 1
     a68:	50 40       	sbci	r21, 0x00	; 0
     a6a:	e6 95       	lsr	r30
     a6c:	00 1c       	adc	r0, r0
     a6e:	ca f7       	brpl	.-14     	; 0xa62 <__divsf3_pse+0x2c>
     a70:	2b d0       	rcall	.+86     	; 0xac8 <__divsf3_pse+0x92>
     a72:	fe 2f       	mov	r31, r30
     a74:	29 d0       	rcall	.+82     	; 0xac8 <__divsf3_pse+0x92>
     a76:	66 0f       	add	r22, r22
     a78:	77 1f       	adc	r23, r23
     a7a:	88 1f       	adc	r24, r24
     a7c:	bb 1f       	adc	r27, r27
     a7e:	26 17       	cp	r18, r22
     a80:	37 07       	cpc	r19, r23
     a82:	48 07       	cpc	r20, r24
     a84:	ab 07       	cpc	r26, r27
     a86:	b0 e8       	ldi	r27, 0x80	; 128
     a88:	09 f0       	breq	.+2      	; 0xa8c <__divsf3_pse+0x56>
     a8a:	bb 0b       	sbc	r27, r27
     a8c:	80 2d       	mov	r24, r0
     a8e:	bf 01       	movw	r22, r30
     a90:	ff 27       	eor	r31, r31
     a92:	93 58       	subi	r25, 0x83	; 131
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
     a96:	3a f0       	brmi	.+14     	; 0xaa6 <__divsf3_pse+0x70>
     a98:	9e 3f       	cpi	r25, 0xFE	; 254
     a9a:	51 05       	cpc	r21, r1
     a9c:	78 f0       	brcs	.+30     	; 0xabc <__divsf3_pse+0x86>
     a9e:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
     aa2:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__fp_szero>
     aa6:	5f 3f       	cpi	r21, 0xFF	; 255
     aa8:	e4 f3       	brlt	.-8      	; 0xaa2 <__divsf3_pse+0x6c>
     aaa:	98 3e       	cpi	r25, 0xE8	; 232
     aac:	d4 f3       	brlt	.-12     	; 0xaa2 <__divsf3_pse+0x6c>
     aae:	86 95       	lsr	r24
     ab0:	77 95       	ror	r23
     ab2:	67 95       	ror	r22
     ab4:	b7 95       	ror	r27
     ab6:	f7 95       	ror	r31
     ab8:	9f 5f       	subi	r25, 0xFF	; 255
     aba:	c9 f7       	brne	.-14     	; 0xaae <__divsf3_pse+0x78>
     abc:	88 0f       	add	r24, r24
     abe:	91 1d       	adc	r25, r1
     ac0:	96 95       	lsr	r25
     ac2:	87 95       	ror	r24
     ac4:	97 f9       	bld	r25, 7
     ac6:	08 95       	ret
     ac8:	e1 e0       	ldi	r30, 0x01	; 1
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	88 1f       	adc	r24, r24
     ad0:	bb 1f       	adc	r27, r27
     ad2:	62 17       	cp	r22, r18
     ad4:	73 07       	cpc	r23, r19
     ad6:	84 07       	cpc	r24, r20
     ad8:	ba 07       	cpc	r27, r26
     ada:	20 f0       	brcs	.+8      	; 0xae4 <__divsf3_pse+0xae>
     adc:	62 1b       	sub	r22, r18
     ade:	73 0b       	sbc	r23, r19
     ae0:	84 0b       	sbc	r24, r20
     ae2:	ba 0b       	sbc	r27, r26
     ae4:	ee 1f       	adc	r30, r30
     ae6:	88 f7       	brcc	.-30     	; 0xaca <__divsf3_pse+0x94>
     ae8:	e0 95       	com	r30
     aea:	08 95       	ret

00000aec <__fixunssfsi>:
     aec:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_splitA>
     af0:	88 f0       	brcs	.+34     	; 0xb14 <__fixunssfsi+0x28>
     af2:	9f 57       	subi	r25, 0x7F	; 127
     af4:	98 f0       	brcs	.+38     	; 0xb1c <__fixunssfsi+0x30>
     af6:	b9 2f       	mov	r27, r25
     af8:	99 27       	eor	r25, r25
     afa:	b7 51       	subi	r27, 0x17	; 23
     afc:	b0 f0       	brcs	.+44     	; 0xb2a <__fixunssfsi+0x3e>
     afe:	e1 f0       	breq	.+56     	; 0xb38 <__fixunssfsi+0x4c>
     b00:	66 0f       	add	r22, r22
     b02:	77 1f       	adc	r23, r23
     b04:	88 1f       	adc	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	1a f0       	brmi	.+6      	; 0xb10 <__fixunssfsi+0x24>
     b0a:	ba 95       	dec	r27
     b0c:	c9 f7       	brne	.-14     	; 0xb00 <__fixunssfsi+0x14>
     b0e:	14 c0       	rjmp	.+40     	; 0xb38 <__fixunssfsi+0x4c>
     b10:	b1 30       	cpi	r27, 0x01	; 1
     b12:	91 f0       	breq	.+36     	; 0xb38 <__fixunssfsi+0x4c>
     b14:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_zero>
     b18:	b1 e0       	ldi	r27, 0x01	; 1
     b1a:	08 95       	ret
     b1c:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_zero>
     b20:	67 2f       	mov	r22, r23
     b22:	78 2f       	mov	r23, r24
     b24:	88 27       	eor	r24, r24
     b26:	b8 5f       	subi	r27, 0xF8	; 248
     b28:	39 f0       	breq	.+14     	; 0xb38 <__fixunssfsi+0x4c>
     b2a:	b9 3f       	cpi	r27, 0xF9	; 249
     b2c:	cc f3       	brlt	.-14     	; 0xb20 <__fixunssfsi+0x34>
     b2e:	86 95       	lsr	r24
     b30:	77 95       	ror	r23
     b32:	67 95       	ror	r22
     b34:	b3 95       	inc	r27
     b36:	d9 f7       	brne	.-10     	; 0xb2e <__fixunssfsi+0x42>
     b38:	3e f4       	brtc	.+14     	; 0xb48 <__fixunssfsi+0x5c>
     b3a:	90 95       	com	r25
     b3c:	80 95       	com	r24
     b3e:	70 95       	com	r23
     b40:	61 95       	neg	r22
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	8f 4f       	sbci	r24, 0xFF	; 255
     b46:	9f 4f       	sbci	r25, 0xFF	; 255
     b48:	08 95       	ret

00000b4a <__floatunsisf>:
     b4a:	e8 94       	clt
     b4c:	09 c0       	rjmp	.+18     	; 0xb60 <__floatsisf+0x12>

00000b4e <__floatsisf>:
     b4e:	97 fb       	bst	r25, 7
     b50:	3e f4       	brtc	.+14     	; 0xb60 <__floatsisf+0x12>
     b52:	90 95       	com	r25
     b54:	80 95       	com	r24
     b56:	70 95       	com	r23
     b58:	61 95       	neg	r22
     b5a:	7f 4f       	sbci	r23, 0xFF	; 255
     b5c:	8f 4f       	sbci	r24, 0xFF	; 255
     b5e:	9f 4f       	sbci	r25, 0xFF	; 255
     b60:	99 23       	and	r25, r25
     b62:	a9 f0       	breq	.+42     	; 0xb8e <__floatsisf+0x40>
     b64:	f9 2f       	mov	r31, r25
     b66:	96 e9       	ldi	r25, 0x96	; 150
     b68:	bb 27       	eor	r27, r27
     b6a:	93 95       	inc	r25
     b6c:	f6 95       	lsr	r31
     b6e:	87 95       	ror	r24
     b70:	77 95       	ror	r23
     b72:	67 95       	ror	r22
     b74:	b7 95       	ror	r27
     b76:	f1 11       	cpse	r31, r1
     b78:	f8 cf       	rjmp	.-16     	; 0xb6a <__floatsisf+0x1c>
     b7a:	fa f4       	brpl	.+62     	; 0xbba <__floatsisf+0x6c>
     b7c:	bb 0f       	add	r27, r27
     b7e:	11 f4       	brne	.+4      	; 0xb84 <__floatsisf+0x36>
     b80:	60 ff       	sbrs	r22, 0
     b82:	1b c0       	rjmp	.+54     	; 0xbba <__floatsisf+0x6c>
     b84:	6f 5f       	subi	r22, 0xFF	; 255
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	8f 4f       	sbci	r24, 0xFF	; 255
     b8a:	9f 4f       	sbci	r25, 0xFF	; 255
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <__floatsisf+0x6c>
     b8e:	88 23       	and	r24, r24
     b90:	11 f0       	breq	.+4      	; 0xb96 <__floatsisf+0x48>
     b92:	96 e9       	ldi	r25, 0x96	; 150
     b94:	11 c0       	rjmp	.+34     	; 0xbb8 <__floatsisf+0x6a>
     b96:	77 23       	and	r23, r23
     b98:	21 f0       	breq	.+8      	; 0xba2 <__floatsisf+0x54>
     b9a:	9e e8       	ldi	r25, 0x8E	; 142
     b9c:	87 2f       	mov	r24, r23
     b9e:	76 2f       	mov	r23, r22
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <__floatsisf+0x5e>
     ba2:	66 23       	and	r22, r22
     ba4:	71 f0       	breq	.+28     	; 0xbc2 <__floatsisf+0x74>
     ba6:	96 e8       	ldi	r25, 0x86	; 134
     ba8:	86 2f       	mov	r24, r22
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	2a f0       	brmi	.+10     	; 0xbba <__floatsisf+0x6c>
     bb0:	9a 95       	dec	r25
     bb2:	66 0f       	add	r22, r22
     bb4:	77 1f       	adc	r23, r23
     bb6:	88 1f       	adc	r24, r24
     bb8:	da f7       	brpl	.-10     	; 0xbb0 <__floatsisf+0x62>
     bba:	88 0f       	add	r24, r24
     bbc:	96 95       	lsr	r25
     bbe:	87 95       	ror	r24
     bc0:	97 f9       	bld	r25, 7
     bc2:	08 95       	ret

00000bc4 <__fp_inf>:
     bc4:	97 f9       	bld	r25, 7
     bc6:	9f 67       	ori	r25, 0x7F	; 127
     bc8:	80 e8       	ldi	r24, 0x80	; 128
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	08 95       	ret

00000bd0 <__fp_mpack>:
     bd0:	9f 3f       	cpi	r25, 0xFF	; 255
     bd2:	31 f0       	breq	.+12     	; 0xbe0 <__fp_mpack_finite+0xc>

00000bd4 <__fp_mpack_finite>:
     bd4:	91 50       	subi	r25, 0x01	; 1
     bd6:	20 f4       	brcc	.+8      	; 0xbe0 <__fp_mpack_finite+0xc>
     bd8:	87 95       	ror	r24
     bda:	77 95       	ror	r23
     bdc:	67 95       	ror	r22
     bde:	b7 95       	ror	r27
     be0:	88 0f       	add	r24, r24
     be2:	91 1d       	adc	r25, r1
     be4:	96 95       	lsr	r25
     be6:	87 95       	ror	r24
     be8:	97 f9       	bld	r25, 7
     bea:	08 95       	ret

00000bec <__fp_nan>:
     bec:	9f ef       	ldi	r25, 0xFF	; 255
     bee:	80 ec       	ldi	r24, 0xC0	; 192
     bf0:	08 95       	ret

00000bf2 <__fp_pscA>:
     bf2:	00 24       	eor	r0, r0
     bf4:	0a 94       	dec	r0
     bf6:	16 16       	cp	r1, r22
     bf8:	17 06       	cpc	r1, r23
     bfa:	18 06       	cpc	r1, r24
     bfc:	09 06       	cpc	r0, r25
     bfe:	08 95       	ret

00000c00 <__fp_pscB>:
     c00:	00 24       	eor	r0, r0
     c02:	0a 94       	dec	r0
     c04:	12 16       	cp	r1, r18
     c06:	13 06       	cpc	r1, r19
     c08:	14 06       	cpc	r1, r20
     c0a:	05 06       	cpc	r0, r21
     c0c:	08 95       	ret

00000c0e <__fp_round>:
     c0e:	09 2e       	mov	r0, r25
     c10:	03 94       	inc	r0
     c12:	00 0c       	add	r0, r0
     c14:	11 f4       	brne	.+4      	; 0xc1a <__fp_round+0xc>
     c16:	88 23       	and	r24, r24
     c18:	52 f0       	brmi	.+20     	; 0xc2e <__fp_round+0x20>
     c1a:	bb 0f       	add	r27, r27
     c1c:	40 f4       	brcc	.+16     	; 0xc2e <__fp_round+0x20>
     c1e:	bf 2b       	or	r27, r31
     c20:	11 f4       	brne	.+4      	; 0xc26 <__fp_round+0x18>
     c22:	60 ff       	sbrs	r22, 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__fp_round+0x20>
     c26:	6f 5f       	subi	r22, 0xFF	; 255
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	8f 4f       	sbci	r24, 0xFF	; 255
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	08 95       	ret

00000c30 <__fp_split3>:
     c30:	57 fd       	sbrc	r21, 7
     c32:	90 58       	subi	r25, 0x80	; 128
     c34:	44 0f       	add	r20, r20
     c36:	55 1f       	adc	r21, r21
     c38:	59 f0       	breq	.+22     	; 0xc50 <__fp_splitA+0x10>
     c3a:	5f 3f       	cpi	r21, 0xFF	; 255
     c3c:	71 f0       	breq	.+28     	; 0xc5a <__fp_splitA+0x1a>
     c3e:	47 95       	ror	r20

00000c40 <__fp_splitA>:
     c40:	88 0f       	add	r24, r24
     c42:	97 fb       	bst	r25, 7
     c44:	99 1f       	adc	r25, r25
     c46:	61 f0       	breq	.+24     	; 0xc60 <__fp_splitA+0x20>
     c48:	9f 3f       	cpi	r25, 0xFF	; 255
     c4a:	79 f0       	breq	.+30     	; 0xc6a <__fp_splitA+0x2a>
     c4c:	87 95       	ror	r24
     c4e:	08 95       	ret
     c50:	12 16       	cp	r1, r18
     c52:	13 06       	cpc	r1, r19
     c54:	14 06       	cpc	r1, r20
     c56:	55 1f       	adc	r21, r21
     c58:	f2 cf       	rjmp	.-28     	; 0xc3e <__fp_split3+0xe>
     c5a:	46 95       	lsr	r20
     c5c:	f1 df       	rcall	.-30     	; 0xc40 <__fp_splitA>
     c5e:	08 c0       	rjmp	.+16     	; 0xc70 <__fp_splitA+0x30>
     c60:	16 16       	cp	r1, r22
     c62:	17 06       	cpc	r1, r23
     c64:	18 06       	cpc	r1, r24
     c66:	99 1f       	adc	r25, r25
     c68:	f1 cf       	rjmp	.-30     	; 0xc4c <__fp_splitA+0xc>
     c6a:	86 95       	lsr	r24
     c6c:	71 05       	cpc	r23, r1
     c6e:	61 05       	cpc	r22, r1
     c70:	08 94       	sec
     c72:	08 95       	ret

00000c74 <__fp_zero>:
     c74:	e8 94       	clt

00000c76 <__fp_szero>:
     c76:	bb 27       	eor	r27, r27
     c78:	66 27       	eor	r22, r22
     c7a:	77 27       	eor	r23, r23
     c7c:	cb 01       	movw	r24, r22
     c7e:	97 f9       	bld	r25, 7
     c80:	08 95       	ret

00000c82 <__mulsf3>:
     c82:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3x>
     c86:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_round>
     c8a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_pscA>
     c8e:	38 f0       	brcs	.+14     	; 0xc9e <__mulsf3+0x1c>
     c90:	0e 94 00 06 	call	0xc00	; 0xc00 <__fp_pscB>
     c94:	20 f0       	brcs	.+8      	; 0xc9e <__mulsf3+0x1c>
     c96:	95 23       	and	r25, r21
     c98:	11 f0       	breq	.+4      	; 0xc9e <__mulsf3+0x1c>
     c9a:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
     c9e:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_nan>
     ca2:	11 24       	eor	r1, r1
     ca4:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__fp_szero>

00000ca8 <__mulsf3x>:
     ca8:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_split3>
     cac:	70 f3       	brcs	.-36     	; 0xc8a <__mulsf3+0x8>

00000cae <__mulsf3_pse>:
     cae:	95 9f       	mul	r25, r21
     cb0:	c1 f3       	breq	.-16     	; 0xca2 <__mulsf3+0x20>
     cb2:	95 0f       	add	r25, r21
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	55 1f       	adc	r21, r21
     cb8:	62 9f       	mul	r22, r18
     cba:	f0 01       	movw	r30, r0
     cbc:	72 9f       	mul	r23, r18
     cbe:	bb 27       	eor	r27, r27
     cc0:	f0 0d       	add	r31, r0
     cc2:	b1 1d       	adc	r27, r1
     cc4:	63 9f       	mul	r22, r19
     cc6:	aa 27       	eor	r26, r26
     cc8:	f0 0d       	add	r31, r0
     cca:	b1 1d       	adc	r27, r1
     ccc:	aa 1f       	adc	r26, r26
     cce:	64 9f       	mul	r22, r20
     cd0:	66 27       	eor	r22, r22
     cd2:	b0 0d       	add	r27, r0
     cd4:	a1 1d       	adc	r26, r1
     cd6:	66 1f       	adc	r22, r22
     cd8:	82 9f       	mul	r24, r18
     cda:	22 27       	eor	r18, r18
     cdc:	b0 0d       	add	r27, r0
     cde:	a1 1d       	adc	r26, r1
     ce0:	62 1f       	adc	r22, r18
     ce2:	73 9f       	mul	r23, r19
     ce4:	b0 0d       	add	r27, r0
     ce6:	a1 1d       	adc	r26, r1
     ce8:	62 1f       	adc	r22, r18
     cea:	83 9f       	mul	r24, r19
     cec:	a0 0d       	add	r26, r0
     cee:	61 1d       	adc	r22, r1
     cf0:	22 1f       	adc	r18, r18
     cf2:	74 9f       	mul	r23, r20
     cf4:	33 27       	eor	r19, r19
     cf6:	a0 0d       	add	r26, r0
     cf8:	61 1d       	adc	r22, r1
     cfa:	23 1f       	adc	r18, r19
     cfc:	84 9f       	mul	r24, r20
     cfe:	60 0d       	add	r22, r0
     d00:	21 1d       	adc	r18, r1
     d02:	82 2f       	mov	r24, r18
     d04:	76 2f       	mov	r23, r22
     d06:	6a 2f       	mov	r22, r26
     d08:	11 24       	eor	r1, r1
     d0a:	9f 57       	subi	r25, 0x7F	; 127
     d0c:	50 40       	sbci	r21, 0x00	; 0
     d0e:	9a f0       	brmi	.+38     	; 0xd36 <__mulsf3_pse+0x88>
     d10:	f1 f0       	breq	.+60     	; 0xd4e <__mulsf3_pse+0xa0>
     d12:	88 23       	and	r24, r24
     d14:	4a f0       	brmi	.+18     	; 0xd28 <__mulsf3_pse+0x7a>
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	bb 1f       	adc	r27, r27
     d1c:	66 1f       	adc	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	88 1f       	adc	r24, r24
     d22:	91 50       	subi	r25, 0x01	; 1
     d24:	50 40       	sbci	r21, 0x00	; 0
     d26:	a9 f7       	brne	.-22     	; 0xd12 <__mulsf3_pse+0x64>
     d28:	9e 3f       	cpi	r25, 0xFE	; 254
     d2a:	51 05       	cpc	r21, r1
     d2c:	80 f0       	brcs	.+32     	; 0xd4e <__mulsf3_pse+0xa0>
     d2e:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
     d32:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__fp_szero>
     d36:	5f 3f       	cpi	r21, 0xFF	; 255
     d38:	e4 f3       	brlt	.-8      	; 0xd32 <__mulsf3_pse+0x84>
     d3a:	98 3e       	cpi	r25, 0xE8	; 232
     d3c:	d4 f3       	brlt	.-12     	; 0xd32 <__mulsf3_pse+0x84>
     d3e:	86 95       	lsr	r24
     d40:	77 95       	ror	r23
     d42:	67 95       	ror	r22
     d44:	b7 95       	ror	r27
     d46:	f7 95       	ror	r31
     d48:	e7 95       	ror	r30
     d4a:	9f 5f       	subi	r25, 0xFF	; 255
     d4c:	c1 f7       	brne	.-16     	; 0xd3e <__mulsf3_pse+0x90>
     d4e:	fe 2b       	or	r31, r30
     d50:	88 0f       	add	r24, r24
     d52:	91 1d       	adc	r25, r1
     d54:	96 95       	lsr	r25
     d56:	87 95       	ror	r24
     d58:	97 f9       	bld	r25, 7
     d5a:	08 95       	ret

00000d5c <pow>:
     d5c:	fa 01       	movw	r30, r20
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	30 96       	adiw	r30, 0x00	; 0
     d64:	21 05       	cpc	r18, r1
     d66:	31 05       	cpc	r19, r1
     d68:	a1 f1       	breq	.+104    	; 0xdd2 <pow+0x76>
     d6a:	61 15       	cp	r22, r1
     d6c:	71 05       	cpc	r23, r1
     d6e:	61 f4       	brne	.+24     	; 0xd88 <pow+0x2c>
     d70:	80 38       	cpi	r24, 0x80	; 128
     d72:	bf e3       	ldi	r27, 0x3F	; 63
     d74:	9b 07       	cpc	r25, r27
     d76:	49 f1       	breq	.+82     	; 0xdca <pow+0x6e>
     d78:	68 94       	set
     d7a:	90 38       	cpi	r25, 0x80	; 128
     d7c:	81 05       	cpc	r24, r1
     d7e:	61 f0       	breq	.+24     	; 0xd98 <pow+0x3c>
     d80:	80 38       	cpi	r24, 0x80	; 128
     d82:	bf ef       	ldi	r27, 0xFF	; 255
     d84:	9b 07       	cpc	r25, r27
     d86:	41 f0       	breq	.+16     	; 0xd98 <pow+0x3c>
     d88:	99 23       	and	r25, r25
     d8a:	4a f5       	brpl	.+82     	; 0xdde <pow+0x82>
     d8c:	ff 3f       	cpi	r31, 0xFF	; 255
     d8e:	e1 05       	cpc	r30, r1
     d90:	31 05       	cpc	r19, r1
     d92:	21 05       	cpc	r18, r1
     d94:	19 f1       	breq	.+70     	; 0xddc <pow+0x80>
     d96:	e8 94       	clt
     d98:	08 94       	sec
     d9a:	e7 95       	ror	r30
     d9c:	d9 01       	movw	r26, r18
     d9e:	aa 23       	and	r26, r26
     da0:	29 f4       	brne	.+10     	; 0xdac <pow+0x50>
     da2:	ab 2f       	mov	r26, r27
     da4:	be 2f       	mov	r27, r30
     da6:	f8 5f       	subi	r31, 0xF8	; 248
     da8:	d0 f3       	brcs	.-12     	; 0xd9e <pow+0x42>
     daa:	10 c0       	rjmp	.+32     	; 0xdcc <pow+0x70>
     dac:	ff 5f       	subi	r31, 0xFF	; 255
     dae:	70 f4       	brcc	.+28     	; 0xdcc <pow+0x70>
     db0:	a6 95       	lsr	r26
     db2:	e0 f7       	brcc	.-8      	; 0xdac <pow+0x50>
     db4:	f7 39       	cpi	r31, 0x97	; 151
     db6:	50 f0       	brcs	.+20     	; 0xdcc <pow+0x70>
     db8:	19 f0       	breq	.+6      	; 0xdc0 <pow+0x64>
     dba:	ff 3a       	cpi	r31, 0xAF	; 175
     dbc:	38 f4       	brcc	.+14     	; 0xdcc <pow+0x70>
     dbe:	9f 77       	andi	r25, 0x7F	; 127
     dc0:	9f 93       	push	r25
     dc2:	0d d0       	rcall	.+26     	; 0xdde <pow+0x82>
     dc4:	0f 90       	pop	r0
     dc6:	07 fc       	sbrc	r0, 7
     dc8:	90 58       	subi	r25, 0x80	; 128
     dca:	08 95       	ret
     dcc:	46 f0       	brts	.+16     	; 0xdde <pow+0x82>
     dce:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_nan>
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	80 e8       	ldi	r24, 0x80	; 128
     dd8:	9f e3       	ldi	r25, 0x3F	; 63
     dda:	08 95       	ret
     ddc:	4f e7       	ldi	r20, 0x7F	; 127
     dde:	9f 77       	andi	r25, 0x7F	; 127
     de0:	5f 93       	push	r21
     de2:	4f 93       	push	r20
     de4:	3f 93       	push	r19
     de6:	2f 93       	push	r18
     de8:	0e 94 a9 07 	call	0xf52	; 0xf52 <log>
     dec:	2f 91       	pop	r18
     dee:	3f 91       	pop	r19
     df0:	4f 91       	pop	r20
     df2:	5f 91       	pop	r21
     df4:	0e 94 41 06 	call	0xc82	; 0xc82 <__mulsf3>
     df8:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <exp>
     dfc:	29 f4       	brne	.+10     	; 0xe08 <pow+0xac>
     dfe:	16 f0       	brts	.+4      	; 0xe04 <pow+0xa8>
     e00:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
     e04:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_zero>
     e08:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_nan>

00000e0c <exp>:
     e0c:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_splitA>
     e10:	a8 f3       	brcs	.-22     	; 0xdfc <pow+0xa0>
     e12:	96 38       	cpi	r25, 0x86	; 134
     e14:	a0 f7       	brcc	.-24     	; 0xdfe <pow+0xa2>
     e16:	07 f8       	bld	r0, 7
     e18:	0f 92       	push	r0
     e1a:	e8 94       	clt
     e1c:	2b e3       	ldi	r18, 0x3B	; 59
     e1e:	3a ea       	ldi	r19, 0xAA	; 170
     e20:	48 eb       	ldi	r20, 0xB8	; 184
     e22:	5f e7       	ldi	r21, 0x7F	; 127
     e24:	0e 94 57 06 	call	0xcae	; 0xcae <__mulsf3_pse>
     e28:	0f 92       	push	r0
     e2a:	0f 92       	push	r0
     e2c:	0f 92       	push	r0
     e2e:	4d b7       	in	r20, 0x3d	; 61
     e30:	5e b7       	in	r21, 0x3e	; 62
     e32:	0f 92       	push	r0
     e34:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <modf>
     e38:	e4 e5       	ldi	r30, 0x54	; 84
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_powser>
     e40:	4f 91       	pop	r20
     e42:	5f 91       	pop	r21
     e44:	ef 91       	pop	r30
     e46:	ff 91       	pop	r31
     e48:	e5 95       	asr	r30
     e4a:	ee 1f       	adc	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	49 f0       	breq	.+18     	; 0xe62 <exp+0x56>
     e50:	fe 57       	subi	r31, 0x7E	; 126
     e52:	e0 68       	ori	r30, 0x80	; 128
     e54:	44 27       	eor	r20, r20
     e56:	ee 0f       	add	r30, r30
     e58:	44 1f       	adc	r20, r20
     e5a:	fa 95       	dec	r31
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <exp+0x4a>
     e5e:	41 95       	neg	r20
     e60:	55 0b       	sbc	r21, r21
     e62:	0e 94 6b 07 	call	0xed6	; 0xed6 <ldexp>
     e66:	0f 90       	pop	r0
     e68:	07 fe       	sbrs	r0, 7
     e6a:	0c 94 5f 07 	jmp	0xebe	; 0xebe <inverse>
     e6e:	08 95       	ret

00000e70 <__fp_powser>:
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	1f 93       	push	r17
     e76:	0f 93       	push	r16
     e78:	ff 92       	push	r15
     e7a:	ef 92       	push	r14
     e7c:	df 92       	push	r13
     e7e:	7b 01       	movw	r14, r22
     e80:	8c 01       	movw	r16, r24
     e82:	68 94       	set
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <__fp_powser+0x22>
     e86:	da 2e       	mov	r13, r26
     e88:	ef 01       	movw	r28, r30
     e8a:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3x>
     e8e:	fe 01       	movw	r30, r28
     e90:	e8 94       	clt
     e92:	a5 91       	lpm	r26, Z+
     e94:	25 91       	lpm	r18, Z+
     e96:	35 91       	lpm	r19, Z+
     e98:	45 91       	lpm	r20, Z+
     e9a:	55 91       	lpm	r21, Z+
     e9c:	a6 f3       	brts	.-24     	; 0xe86 <__fp_powser+0x16>
     e9e:	ef 01       	movw	r28, r30
     ea0:	0e 94 af 04 	call	0x95e	; 0x95e <__addsf3x>
     ea4:	fe 01       	movw	r30, r28
     ea6:	97 01       	movw	r18, r14
     ea8:	a8 01       	movw	r20, r16
     eaa:	da 94       	dec	r13
     eac:	69 f7       	brne	.-38     	; 0xe88 <__fp_powser+0x18>
     eae:	df 90       	pop	r13
     eb0:	ef 90       	pop	r14
     eb2:	ff 90       	pop	r15
     eb4:	0f 91       	pop	r16
     eb6:	1f 91       	pop	r17
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <inverse>:
     ebe:	9b 01       	movw	r18, r22
     ec0:	ac 01       	movw	r20, r24
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 e8       	ldi	r24, 0x80	; 128
     ec8:	9f e3       	ldi	r25, 0x3F	; 63
     eca:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__divsf3>
     ece:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>
     ed2:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_mpack>

00000ed6 <ldexp>:
     ed6:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_splitA>
     eda:	d8 f3       	brcs	.-10     	; 0xed2 <inverse+0x14>
     edc:	99 23       	and	r25, r25
     ede:	c9 f3       	breq	.-14     	; 0xed2 <inverse+0x14>
     ee0:	94 0f       	add	r25, r20
     ee2:	51 1d       	adc	r21, r1
     ee4:	a3 f3       	brvs	.-24     	; 0xece <inverse+0x10>
     ee6:	91 50       	subi	r25, 0x01	; 1
     ee8:	50 40       	sbci	r21, 0x00	; 0
     eea:	94 f0       	brlt	.+36     	; 0xf10 <ldexp+0x3a>
     eec:	59 f0       	breq	.+22     	; 0xf04 <ldexp+0x2e>
     eee:	88 23       	and	r24, r24
     ef0:	32 f0       	brmi	.+12     	; 0xefe <ldexp+0x28>
     ef2:	66 0f       	add	r22, r22
     ef4:	77 1f       	adc	r23, r23
     ef6:	88 1f       	adc	r24, r24
     ef8:	91 50       	subi	r25, 0x01	; 1
     efa:	50 40       	sbci	r21, 0x00	; 0
     efc:	c1 f7       	brne	.-16     	; 0xeee <ldexp+0x18>
     efe:	9e 3f       	cpi	r25, 0xFE	; 254
     f00:	51 05       	cpc	r21, r1
     f02:	2c f7       	brge	.-54     	; 0xece <inverse+0x10>
     f04:	88 0f       	add	r24, r24
     f06:	91 1d       	adc	r25, r1
     f08:	96 95       	lsr	r25
     f0a:	87 95       	ror	r24
     f0c:	97 f9       	bld	r25, 7
     f0e:	08 95       	ret
     f10:	5f 3f       	cpi	r21, 0xFF	; 255
     f12:	ac f0       	brlt	.+42     	; 0xf3e <ldexp+0x68>
     f14:	98 3e       	cpi	r25, 0xE8	; 232
     f16:	9c f0       	brlt	.+38     	; 0xf3e <ldexp+0x68>
     f18:	bb 27       	eor	r27, r27
     f1a:	86 95       	lsr	r24
     f1c:	77 95       	ror	r23
     f1e:	67 95       	ror	r22
     f20:	b7 95       	ror	r27
     f22:	08 f4       	brcc	.+2      	; 0xf26 <ldexp+0x50>
     f24:	b1 60       	ori	r27, 0x01	; 1
     f26:	93 95       	inc	r25
     f28:	c1 f7       	brne	.-16     	; 0xf1a <ldexp+0x44>
     f2a:	bb 0f       	add	r27, r27
     f2c:	58 f7       	brcc	.-42     	; 0xf04 <ldexp+0x2e>
     f2e:	11 f4       	brne	.+4      	; 0xf34 <ldexp+0x5e>
     f30:	60 ff       	sbrs	r22, 0
     f32:	e8 cf       	rjmp	.-48     	; 0xf04 <ldexp+0x2e>
     f34:	6f 5f       	subi	r22, 0xFF	; 255
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	8f 4f       	sbci	r24, 0xFF	; 255
     f3a:	9f 4f       	sbci	r25, 0xFF	; 255
     f3c:	e3 cf       	rjmp	.-58     	; 0xf04 <ldexp+0x2e>
     f3e:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <__fp_szero>
     f42:	16 f0       	brts	.+4      	; 0xf48 <ldexp+0x72>
     f44:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_mpack>
     f48:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_nan>
     f4c:	68 94       	set
     f4e:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__fp_inf>

00000f52 <log>:
     f52:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_splitA>
     f56:	a8 f3       	brcs	.-22     	; 0xf42 <ldexp+0x6c>
     f58:	99 23       	and	r25, r25
     f5a:	c1 f3       	breq	.-16     	; 0xf4c <ldexp+0x76>
     f5c:	ae f3       	brts	.-22     	; 0xf48 <ldexp+0x72>
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	1f 93       	push	r17
     f64:	0f 93       	push	r16
     f66:	ff 92       	push	r15
     f68:	c9 2f       	mov	r28, r25
     f6a:	dd 27       	eor	r29, r29
     f6c:	88 23       	and	r24, r24
     f6e:	2a f0       	brmi	.+10     	; 0xf7a <log+0x28>
     f70:	21 97       	sbiw	r28, 0x01	; 1
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	da f7       	brpl	.-10     	; 0xf70 <log+0x1e>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	5f eb       	ldi	r21, 0xBF	; 191
     f82:	9f e3       	ldi	r25, 0x3F	; 63
     f84:	88 39       	cpi	r24, 0x98	; 152
     f86:	20 f0       	brcs	.+8      	; 0xf90 <log+0x3e>
     f88:	80 3e       	cpi	r24, 0xE0	; 224
     f8a:	38 f0       	brcs	.+14     	; 0xf9a <log+0x48>
     f8c:	21 96       	adiw	r28, 0x01	; 1
     f8e:	8f 77       	andi	r24, 0x7F	; 127
     f90:	0e 94 98 04 	call	0x930	; 0x930 <__addsf3>
     f94:	ec e7       	ldi	r30, 0x7C	; 124
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <log+0x50>
     f9a:	0e 94 98 04 	call	0x930	; 0x930 <__addsf3>
     f9e:	e9 ea       	ldi	r30, 0xA9	; 169
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	0e 94 38 07 	call	0xe70	; 0xe70 <__fp_powser>
     fa6:	8b 01       	movw	r16, r22
     fa8:	be 01       	movw	r22, r28
     faa:	ec 01       	movw	r28, r24
     fac:	fb 2e       	mov	r15, r27
     fae:	6f 57       	subi	r22, 0x7F	; 127
     fb0:	71 09       	sbc	r23, r1
     fb2:	75 95       	asr	r23
     fb4:	77 1f       	adc	r23, r23
     fb6:	88 0b       	sbc	r24, r24
     fb8:	99 0b       	sbc	r25, r25
     fba:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__floatsisf>
     fbe:	28 e1       	ldi	r18, 0x18	; 24
     fc0:	32 e7       	ldi	r19, 0x72	; 114
     fc2:	41 e3       	ldi	r20, 0x31	; 49
     fc4:	5f e3       	ldi	r21, 0x3F	; 63
     fc6:	0e 94 54 06 	call	0xca8	; 0xca8 <__mulsf3x>
     fca:	af 2d       	mov	r26, r15
     fcc:	98 01       	movw	r18, r16
     fce:	ae 01       	movw	r20, r28
     fd0:	ff 90       	pop	r15
     fd2:	0f 91       	pop	r16
     fd4:	1f 91       	pop	r17
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	0e 94 af 04 	call	0x95e	; 0x95e <__addsf3x>
     fde:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_round>

00000fe2 <modf>:
     fe2:	fa 01       	movw	r30, r20
     fe4:	dc 01       	movw	r26, r24
     fe6:	aa 0f       	add	r26, r26
     fe8:	bb 1f       	adc	r27, r27
     fea:	9b 01       	movw	r18, r22
     fec:	ac 01       	movw	r20, r24
     fee:	bf 57       	subi	r27, 0x7F	; 127
     ff0:	28 f4       	brcc	.+10     	; 0xffc <modf+0x1a>
     ff2:	22 27       	eor	r18, r18
     ff4:	33 27       	eor	r19, r19
     ff6:	44 27       	eor	r20, r20
     ff8:	50 78       	andi	r21, 0x80	; 128
     ffa:	20 c0       	rjmp	.+64     	; 0x103c <modf+0x5a>
     ffc:	b7 51       	subi	r27, 0x17	; 23
     ffe:	90 f4       	brcc	.+36     	; 0x1024 <modf+0x42>
    1000:	ab 2f       	mov	r26, r27
    1002:	00 24       	eor	r0, r0
    1004:	46 95       	lsr	r20
    1006:	37 95       	ror	r19
    1008:	27 95       	ror	r18
    100a:	01 1c       	adc	r0, r1
    100c:	a3 95       	inc	r26
    100e:	d2 f3       	brmi	.-12     	; 0x1004 <modf+0x22>
    1010:	00 20       	and	r0, r0
    1012:	71 f0       	breq	.+28     	; 0x1030 <modf+0x4e>
    1014:	22 0f       	add	r18, r18
    1016:	33 1f       	adc	r19, r19
    1018:	44 1f       	adc	r20, r20
    101a:	b3 95       	inc	r27
    101c:	da f3       	brmi	.-10     	; 0x1014 <modf+0x32>
    101e:	0e d0       	rcall	.+28     	; 0x103c <modf+0x5a>
    1020:	0c 94 97 04 	jmp	0x92e	; 0x92e <__subsf3>
    1024:	61 30       	cpi	r22, 0x01	; 1
    1026:	71 05       	cpc	r23, r1
    1028:	a0 e8       	ldi	r26, 0x80	; 128
    102a:	8a 07       	cpc	r24, r26
    102c:	b9 46       	sbci	r27, 0x69	; 105
    102e:	30 f4       	brcc	.+12     	; 0x103c <modf+0x5a>
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	66 27       	eor	r22, r22
    1036:	77 27       	eor	r23, r23
    1038:	88 27       	eor	r24, r24
    103a:	90 78       	andi	r25, 0x80	; 128
    103c:	30 96       	adiw	r30, 0x00	; 0
    103e:	21 f0       	breq	.+8      	; 0x1048 <modf+0x66>
    1040:	20 83       	st	Z, r18
    1042:	31 83       	std	Z+1, r19	; 0x01
    1044:	42 83       	std	Z+2, r20	; 0x02
    1046:	53 83       	std	Z+3, r21	; 0x03
    1048:	08 95       	ret

0000104a <__udivmodsi4>:
    104a:	a1 e2       	ldi	r26, 0x21	; 33
    104c:	1a 2e       	mov	r1, r26
    104e:	aa 1b       	sub	r26, r26
    1050:	bb 1b       	sub	r27, r27
    1052:	fd 01       	movw	r30, r26
    1054:	0d c0       	rjmp	.+26     	; 0x1070 <__udivmodsi4_ep>

00001056 <__udivmodsi4_loop>:
    1056:	aa 1f       	adc	r26, r26
    1058:	bb 1f       	adc	r27, r27
    105a:	ee 1f       	adc	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	a2 17       	cp	r26, r18
    1060:	b3 07       	cpc	r27, r19
    1062:	e4 07       	cpc	r30, r20
    1064:	f5 07       	cpc	r31, r21
    1066:	20 f0       	brcs	.+8      	; 0x1070 <__udivmodsi4_ep>
    1068:	a2 1b       	sub	r26, r18
    106a:	b3 0b       	sbc	r27, r19
    106c:	e4 0b       	sbc	r30, r20
    106e:	f5 0b       	sbc	r31, r21

00001070 <__udivmodsi4_ep>:
    1070:	66 1f       	adc	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	1a 94       	dec	r1
    107a:	69 f7       	brne	.-38     	; 0x1056 <__udivmodsi4_loop>
    107c:	60 95       	com	r22
    107e:	70 95       	com	r23
    1080:	80 95       	com	r24
    1082:	90 95       	com	r25
    1084:	9b 01       	movw	r18, r22
    1086:	ac 01       	movw	r20, r24
    1088:	bd 01       	movw	r22, r26
    108a:	cf 01       	movw	r24, r30
    108c:	08 95       	ret

0000108e <_exit>:
    108e:	f8 94       	cli

00001090 <__stop_program>:
    1090:	ff cf       	rjmp	.-2      	; 0x1090 <__stop_program>
