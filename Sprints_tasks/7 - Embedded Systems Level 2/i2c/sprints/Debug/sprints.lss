
sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f96  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000100a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000100a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002933  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dde  00000000  00000000  00003bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017bd  00000000  00000000  000049d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  00006198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bab  00000000  00000000  0000673c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b4f  00000000  00000000  000072e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00008e36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_1>
   8:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_2>
   c:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_3>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	std	Y+40, r29	; 0x28
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	std	Y+56, r1	; 0x38
  62:	ba ab       	std	Y+50, r27	; 0x32
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	std	Y+51, r10	; 0x33
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	std	Y+54, r27	; 0x36
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	ldd	r30, Z+49	; 0x31
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__addsf3x+0x2a>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e6 e9       	ldi	r30, 0x96	; 150
  ea:	ff e0       	ldi	r31, 0x0F	; 15
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a0 36       	cpi	r26, 0x60	; 96
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	a0 e6       	ldi	r26, 0x60	; 96
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a6 36       	cpi	r26, 0x66	; 102
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 9b 01 	call	0x336	; 0x336 <main>
 10c:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <app_init>:
uint8_t bell2[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x10 ,0x00};
uint8_t bell3[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x01 ,0x00};

uint8_t key;
void app_init(void){
TIMER_0_init(NORMAL_MODE);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 11 04 	call	0x822	; 0x822 <TIMER_0_init>
LCD_4_Bit_init();
 11a:	0e 94 13 01 	call	0x226	; 0x226 <LCD_4_Bit_init>
I2C_init(I2C_PRESCALER_1);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 35 03 	call	0x66a	; 0x66a <I2C_init>
LED_init(PORT_A,PIN_0);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 8b 01 	call	0x316	; 0x316 <LED_init>
 12c:	08 95       	ret

0000012e <app_start>:
}


void app_start(){
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	60 97       	sbiw	r28, 0x10	; 16
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
	uint8_t data =20 ;
	uint8_t data2 = 0 ;
	uint8_t ad1 = 0x00 ;
	uint8_t str2[17] = "1234567887654321";
	uint8_t str[16] = {};
 148:	fe 01       	movw	r30, r28
 14a:	31 96       	adiw	r30, 0x01	; 1
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	df 01       	movw	r26, r30
 150:	1d 92       	st	X+, r1
 152:	8a 95       	dec	r24
 154:	e9 f7       	brne	.-6      	; 0x150 <app_start+0x22>
		
	//EEPROM_Writeseq ( str2 ,&ad1);
	for (uint8_t i =0 ; i <16 ; i++)
 156:	f1 2c       	mov	r15, r1
 158:	10 c0       	rjmp	.+32     	; 0x17a <app_start+0x4c>
	{
		EEPROM_Read(str+i ,ad1);
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	0c 0f       	add	r16, r28
 160:	1d 1f       	adc	r17, r29
 162:	0f 0d       	add	r16, r15
 164:	11 1d       	adc	r17, r1
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	c8 01       	movw	r24, r16
 16a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <EEPROM_Read>
		LCD_4_Bit_SendChar(str[i]);
 16e:	f8 01       	movw	r30, r16
 170:	80 81       	ld	r24, Z
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 41 01 	call	0x282	; 0x282 <LCD_4_Bit_SendChar>
	uint8_t ad1 = 0x00 ;
	uint8_t str2[17] = "1234567887654321";
	uint8_t str[16] = {};
		
	//EEPROM_Writeseq ( str2 ,&ad1);
	for (uint8_t i =0 ; i <16 ; i++)
 178:	f3 94       	inc	r15
 17a:	ff e0       	ldi	r31, 0x0F	; 15
 17c:	ff 15       	cp	r31, r15
 17e:	68 f7       	brcc	.-38     	; 0x15a <app_start+0x2c>
	}

*/
	
//	LCD_4_Bit_Clear();
	}
 180:	60 96       	adiw	r28, 0x10	; 16
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	ff 90       	pop	r15
 196:	08 95       	ret

00000198 <LCD_4_Bit_SendCommand>:
	LCD_4_Bit_SendCommand(DISPLAY_ON_CURSOR_OFF);
	//LCD_4_Bit_SendCommand(INCREMENT_CURSOR);
	LCD_4_Bit_SendCommand(CLEAR_DISPLAY);
}

void LCD_4_Bit_SendCommand(uint8_t a_cmd){
 198:	cf 93       	push	r28
 19a:	c8 2f       	mov	r28, r24
	LCD_REG_DATA_PORT = (LCD_REG_DATA_PORT & 0x0f) | (a_cmd & 0xf0);
 19c:	85 b3       	in	r24, 0x15	; 21
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	9c 2f       	mov	r25, r28
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	89 2b       	or	r24, r25
 1a6:	85 bb       	out	0x15, r24	; 21
	DIO_write(lcd_dio_cmd_port,RS,LOW);
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
	DIO_write(lcd_dio_cmd_port,RW,LOW);
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
	DIO_write(lcd_dio_cmd_port,EN,HIGH);
 1bc:	41 e0       	ldi	r20, 0x01	; 1
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	00 00       	nop
	_delay_us(1);
	DIO_write(lcd_dio_cmd_port,EN,LOW);
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	62 e0       	ldi	r22, 0x02	; 2
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
 1d2:	32 e4       	ldi	r19, 0x42	; 66
 1d4:	3a 95       	dec	r19
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_4_Bit_SendCommand+0x3c>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_4_Bit_SendCommand+0x42>
	_delay_us(200);
	
	LCD_REG_DATA_PORT = (LCD_REG_DATA_PORT & 0x0f) | (a_cmd << 4);
 1da:	25 b3       	in	r18, 0x15	; 21
 1dc:	30 e1       	ldi	r19, 0x10	; 16
 1de:	c3 9f       	mul	r28, r19
 1e0:	c0 01       	movw	r24, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	92 2f       	mov	r25, r18
 1e6:	9f 70       	andi	r25, 0x0F	; 15
 1e8:	89 2b       	or	r24, r25
 1ea:	85 bb       	out	0x15, r24	; 21
	DIO_write(lcd_dio_cmd_port,RS,LOW);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	83 e0       	ldi	r24, 0x03	; 3
 1f2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
	DIO_write(lcd_dio_cmd_port,RW,LOW);
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
	DIO_write(lcd_dio_cmd_port,EN,HIGH);
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
 20a:	00 00       	nop
	_delay_us(1);
	DIO_write(lcd_dio_cmd_port,EN,LOW);
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	8d ee       	ldi	r24, 0xED	; 237
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCD_4_Bit_SendCommand+0x82>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <LCD_4_Bit_SendCommand+0x88>
 220:	00 00       	nop
	_delay_ms(3);
}
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <LCD_4_Bit_init>:
	LCD_8_Bit_SendCommand(CURSOR_HOME_POSITION);

}


void LCD_4_Bit_init(void){
 226:	cf 93       	push	r28
	
	for (uint8_t data_pins = 4 ; data_pins < 8 ; data_pins++)
 228:	c4 e0       	ldi	r28, 0x04	; 4
 22a:	06 c0       	rjmp	.+12     	; 0x238 <LCD_4_Bit_init+0x12>
	{
		DIO_init(lcd__dio_data_port,data_pins,OUTPUT);
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	6c 2f       	mov	r22, r28
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_init>
}


void LCD_4_Bit_init(void){
	
	for (uint8_t data_pins = 4 ; data_pins < 8 ; data_pins++)
 236:	cf 5f       	subi	r28, 0xFF	; 255
 238:	c8 30       	cpi	r28, 0x08	; 8
 23a:	c0 f3       	brcs	.-16     	; 0x22c <LCD_4_Bit_init+0x6>
	{
		DIO_init(lcd__dio_data_port,data_pins,OUTPUT);
	}
	
	
	DIO_init(lcd_dio_cmd_port,RS,OUTPUT);
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_init>
	DIO_init(lcd_dio_cmd_port,RW,OUTPUT);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_init>
	DIO_init(lcd_dio_cmd_port,EN,OUTPUT);
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_init>
 25a:	87 e8       	ldi	r24, 0x87	; 135
 25c:	93 e1       	ldi	r25, 0x13	; 19
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <LCD_4_Bit_init+0x38>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LCD_4_Bit_init+0x3e>
 264:	00 00       	nop
	 _delay_ms(20);
	LCD_4_Bit_SendCommand(LCD_4_BIT_MODE);
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_4_Bit_SendCommand>
	LCD_4_Bit_SendCommand(LCD_16_2_INIT_4_BIT);
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_4_Bit_SendCommand>
	LCD_4_Bit_SendCommand(DISPLAY_ON_CURSOR_OFF);
 272:	8c e0       	ldi	r24, 0x0C	; 12
 274:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_4_Bit_SendCommand>
	//LCD_4_Bit_SendCommand(INCREMENT_CURSOR);
	LCD_4_Bit_SendCommand(CLEAR_DISPLAY);
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_4_Bit_SendCommand>
}
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <LCD_4_Bit_SendChar>:
	_delay_ms(3);
}



void LCD_4_Bit_SendChar(uint8_t a_char){
 282:	cf 93       	push	r28
	if(a_char!=0){
 284:	88 23       	and	r24, r24
 286:	09 f4       	brne	.+2      	; 0x28a <LCD_4_Bit_SendChar+0x8>
 288:	44 c0       	rjmp	.+136    	; 0x312 <LCD_4_Bit_SendChar+0x90>
 28a:	c8 2f       	mov	r28, r24
		LCD_REG_DATA_PORT = (LCD_REG_DATA_PORT & 0x0f) | (a_char & 0xf0);
 28c:	85 b3       	in	r24, 0x15	; 21
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	9c 2f       	mov	r25, r28
 292:	90 7f       	andi	r25, 0xF0	; 240
 294:	89 2b       	or	r24, r25
 296:	85 bb       	out	0x15, r24	; 21
		DIO_write(lcd_dio_cmd_port,RS,HIGH);
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	83 e0       	ldi	r24, 0x03	; 3
 29e:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
		DIO_write(lcd_dio_cmd_port,RW,LOW);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
		DIO_write(lcd_dio_cmd_port,EN,HIGH);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b6:	00 00       	nop
		_delay_us(1);
		DIO_write(lcd_dio_cmd_port,EN,LOW);
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
 2c2:	32 e4       	ldi	r19, 0x42	; 66
 2c4:	3a 95       	dec	r19
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_4_Bit_SendChar+0x42>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_4_Bit_SendChar+0x48>
		_delay_us(200);
	
		LCD_REG_DATA_PORT = (LCD_REG_DATA_PORT & 0x0f) | (a_char << 4);
 2ca:	25 b3       	in	r18, 0x15	; 21
 2cc:	30 e1       	ldi	r19, 0x10	; 16
 2ce:	c3 9f       	mul	r28, r19
 2d0:	c0 01       	movw	r24, r0
 2d2:	11 24       	eor	r1, r1
 2d4:	92 2f       	mov	r25, r18
 2d6:	9f 70       	andi	r25, 0x0F	; 15
 2d8:	89 2b       	or	r24, r25
 2da:	85 bb       	out	0x15, r24	; 21
		DIO_write(lcd_dio_cmd_port,RS,HIGH);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
		DIO_write(lcd_dio_cmd_port,RW,LOW);
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
		DIO_write(lcd_dio_cmd_port,EN,HIGH);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
 2fa:	00 00       	nop
		_delay_us(1);
		DIO_write(lcd_dio_cmd_port,EN,LOW);
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	62 e0       	ldi	r22, 0x02	; 2
 300:	83 e0       	ldi	r24, 0x03	; 3
 302:	0e 94 31 02 	call	0x462	; 0x462 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	83 ef       	ldi	r24, 0xF3	; 243
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_4_Bit_SendChar+0x88>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_4_Bit_SendChar+0x8e>
 310:	00 00       	nop
		_delay_ms(2);
	
	}
}
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <LED_init>:
 *  Author: moham
 */ 
#include "led.h"

Dio_ErrorStatus LED_init(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portNum,pinNum,OUTPUT);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	0e 94 a2 01 	call	0x344	; 0x344 <DIO_init>
	
	if ( loc_errorStatus == Dio_PortError){
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	29 f0       	breq	.+10     	; 0x32a <LED_init+0x14>
		
		return Dio_PortError;
		
	}else if (loc_errorStatus == Dio_PinError){
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	29 f0       	breq	.+10     	; 0x32e <LED_init+0x18>
	
		return Dio_PinError;
	
	
	}else if (loc_errorStatus == Dio_DirectionError){
 324:	84 30       	cpi	r24, 0x04	; 4
 326:	29 f4       	brne	.+10     	; 0x332 <LED_init+0x1c>
 328:	08 95       	ret
Dio_ErrorStatus LED_init(PORT_NUM portNum , PIN_NUM pinNum){
	Dio_ErrorStatus loc_errorStatus = DIO_init(portNum,pinNum,OUTPUT);
	
	if ( loc_errorStatus == Dio_PortError){
		
		return Dio_PortError;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	08 95       	ret
		
	}else if (loc_errorStatus == Dio_PinError){
	
		return Dio_PinError;
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	08 95       	ret
	}else if (loc_errorStatus == Dio_DirectionError){
		
		return Dio_DirectionError;
		
	}else{
		return Dio_Ok;
 332:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 334:	08 95       	ret

00000336 <main>:


 
int main(void)
{
	app_init();
 336:	0e 94 8a 00 	call	0x114	; 0x114 <app_init>
	

	app_start();
 33a:	0e 94 97 00 	call	0x12e	; 0x12e <app_start>

		

		
	
}
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	08 95       	ret

00000344 <DIO_init>:
#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 344:	68 30       	cpi	r22, 0x08	; 8
 346:	08 f0       	brcs	.+2      	; 0x34a <DIO_init+0x6>
 348:	80 c0       	rjmp	.+256    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		loc_ErrorStatus = Dio_PinError ;
	}
	else{	
		switch (PortNum)
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	31 f1       	breq	.+76     	; 0x39a <DIO_init+0x56>
 34e:	38 f0       	brcs	.+14     	; 0x35e <DIO_init+0x1a>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	09 f4       	brne	.+2      	; 0x356 <DIO_init+0x12>
 354:	40 c0       	rjmp	.+128    	; 0x3d6 <DIO_init+0x92>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	09 f4       	brne	.+2      	; 0x35c <DIO_init+0x18>
 35a:	5a c0       	rjmp	.+180    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 35c:	78 c0       	rjmp	.+240    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		{

			case PORT_A :
					if (direction == INPUT)
 35e:	41 11       	cpse	r20, r1
 360:	0d c0       	rjmp	.+26     	; 0x37c <DIO_init+0x38>
					{
						CLR_BIT(DDRA,PinNum);
 362:	2a b3       	in	r18, 0x1a	; 26
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_init+0x2a>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_init+0x26>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	08 95       	ret

			case PORT_A :
					if (direction == INPUT)
					{
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
 37c:	41 30       	cpi	r20, 0x01	; 1
 37e:	09 f0       	breq	.+2      	; 0x382 <DIO_init+0x3e>
 380:	68 c0       	rjmp	.+208    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
						SET_BIT(DDRA,PinNum);
 382:	2a b3       	in	r18, 0x1a	; 26
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_init+0x4a>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_init+0x46>
 392:	82 2b       	or	r24, r18
 394:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret
					}
					break;
		
		
			case PORT_B :
					if (direction == INPUT)
 39a:	41 11       	cpse	r20, r1
 39c:	0d c0       	rjmp	.+26     	; 0x3b8 <DIO_init+0x74>
					{
						CLR_BIT(DDRB,PinNum);
 39e:	27 b3       	in	r18, 0x17	; 23
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_init+0x66>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_init+0x62>
 3ae:	80 95       	com	r24
 3b0:	82 23       	and	r24, r18
 3b2:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
		
			case PORT_B :
					if (direction == INPUT)
					{
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
 3b8:	41 30       	cpi	r20, 0x01	; 1
 3ba:	09 f0       	breq	.+2      	; 0x3be <DIO_init+0x7a>
 3bc:	4c c0       	rjmp	.+152    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
						SET_BIT(DDRB,PinNum);
 3be:	27 b3       	in	r18, 0x17	; 23
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_init+0x86>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_init+0x82>
 3ce:	82 2b       	or	r24, r18
 3d0:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret
					break;
		
		
		
			case PORT_C :
					if (direction == INPUT)
 3d6:	41 11       	cpse	r20, r1
 3d8:	0d c0       	rjmp	.+26     	; 0x3f4 <DIO_init+0xb0>
					{
						CLR_BIT(DDRC,PinNum);
 3da:	24 b3       	in	r18, 0x14	; 20
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_init+0xa2>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_init+0x9e>
 3ea:	80 95       	com	r24
 3ec:	82 23       	and	r24, r18
 3ee:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	08 95       	ret
		
			case PORT_C :
					if (direction == INPUT)
					{
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
 3f4:	41 30       	cpi	r20, 0x01	; 1
 3f6:	89 f5       	brne	.+98     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
						SET_BIT(DDRC,PinNum);
 3f8:	24 b3       	in	r18, 0x14	; 20
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	82 2b       	or	r24, r18
 40a:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret
					break;
		
		
		
			case PORT_D :
					if (direction == INPUT)
 410:	41 11       	cpse	r20, r1
 412:	0d c0       	rjmp	.+26     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
					{
						CLR_BIT(DDRD,PinNum);
 414:	21 b3       	in	r18, 0x11	; 17
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	80 95       	com	r24
 426:	82 23       	and	r24, r18
 428:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	08 95       	ret
		
			case PORT_D :
					if (direction == INPUT)
					{
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
 42e:	41 30       	cpi	r20, 0x01	; 1
 430:	b1 f4       	brne	.+44     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
						SET_BIT(DDRD,PinNum);
 432:	21 b3       	in	r18, 0x11	; 17
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	6a 95       	dec	r22
 440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	82 2b       	or	r24, r18
 444:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_ErrorStatus = Dio_PinError ;
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	08 95       	ret
					}
					break;
		
			default:
			//error handling
					loc_ErrorStatus = Dio_PortError;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	08 95       	ret
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRA,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	08 95       	ret
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRB,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	08 95       	ret
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRC,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 45a:	84 e0       	ldi	r24, 0x04	; 4
 45c:	08 95       	ret
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRD,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 45e:	84 e0       	ldi	r24, 0x04	; 4
		}
					}
	
	return loc_ErrorStatus ;

}
 460:	08 95       	ret

00000462 <DIO_write>:


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 462:	68 30       	cpi	r22, 0x08	; 8
 464:	08 f0       	brcs	.+2      	; 0x468 <DIO_write+0x6>
 466:	80 c0       	rjmp	.+256    	; 0x568 <DIO_write+0x106>
		loc_errorStatus = Dio_PinError ;
	}
	else{
		switch (PortNum)
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	31 f1       	breq	.+76     	; 0x4b8 <DIO_write+0x56>
 46c:	38 f0       	brcs	.+14     	; 0x47c <DIO_write+0x1a>
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	09 f4       	brne	.+2      	; 0x474 <DIO_write+0x12>
 472:	40 c0       	rjmp	.+128    	; 0x4f4 <DIO_write+0x92>
 474:	83 30       	cpi	r24, 0x03	; 3
 476:	09 f4       	brne	.+2      	; 0x47a <DIO_write+0x18>
 478:	5a c0       	rjmp	.+180    	; 0x52e <DIO_write+0xcc>
 47a:	78 c0       	rjmp	.+240    	; 0x56c <DIO_write+0x10a>
		{
			case PORT_A :
			
					if (value == LOW)
 47c:	41 11       	cpse	r20, r1
 47e:	0d c0       	rjmp	.+26     	; 0x49a <DIO_write+0x38>
					{
						CLR_BIT(PORTA,PinNum);
 480:	2b b3       	in	r18, 0x1b	; 27
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_write+0x2a>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_write+0x26>
 490:	80 95       	com	r24
 492:	82 23       	and	r24, r18
 494:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	08 95       	ret
			
					if (value == LOW)
					{
						CLR_BIT(PORTA,PinNum);
			
					}else if ( value == HIGH){
 49a:	41 30       	cpi	r20, 0x01	; 1
 49c:	09 f0       	breq	.+2      	; 0x4a0 <DIO_write+0x3e>
 49e:	68 c0       	rjmp	.+208    	; 0x570 <DIO_write+0x10e>
			
						SET_BIT(PORTA,PinNum);
 4a0:	2b b3       	in	r18, 0x1b	; 27
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_write+0x4a>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_write+0x46>
 4b0:	82 2b       	or	r24, r18
 4b2:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_B :
					if (value == LOW)
 4b8:	41 11       	cpse	r20, r1
 4ba:	0d c0       	rjmp	.+26     	; 0x4d6 <DIO_write+0x74>
					{
						CLR_BIT(PORTB,PinNum);
 4bc:	28 b3       	in	r18, 0x18	; 24
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_write+0x66>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_write+0x62>
 4cc:	80 95       	com	r24
 4ce:	82 23       	and	r24, r18
 4d0:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
			case PORT_B :
					if (value == LOW)
					{
						CLR_BIT(PORTB,PinNum);
			
					}else if ( value == HIGH){
 4d6:	41 30       	cpi	r20, 0x01	; 1
 4d8:	09 f0       	breq	.+2      	; 0x4dc <DIO_write+0x7a>
 4da:	4c c0       	rjmp	.+152    	; 0x574 <DIO_write+0x112>
			
						SET_BIT(PORTB,PinNum);
 4dc:	28 b3       	in	r18, 0x18	; 24
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_write+0x86>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_write+0x82>
 4ec:	82 2b       	or	r24, r18
 4ee:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_C :
					if (value == LOW)
 4f4:	41 11       	cpse	r20, r1
 4f6:	0d c0       	rjmp	.+26     	; 0x512 <DIO_write+0xb0>
					{
						CLR_BIT(PORTC,PinNum);
 4f8:	25 b3       	in	r18, 0x15	; 21
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_write+0xa2>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_write+0x9e>
 508:	80 95       	com	r24
 50a:	82 23       	and	r24, r18
 50c:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	08 95       	ret
			case PORT_C :
					if (value == LOW)
					{
						CLR_BIT(PORTC,PinNum);
			
					}else if ( value == HIGH){
 512:	41 30       	cpi	r20, 0x01	; 1
 514:	89 f5       	brne	.+98     	; 0x578 <DIO_write+0x116>
			
						SET_BIT(PORTC,PinNum);
 516:	25 b3       	in	r18, 0x15	; 21
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_write+0xc0>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_write+0xbc>
 526:	82 2b       	or	r24, r18
 528:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_D :
					if (value == LOW)
 52e:	41 11       	cpse	r20, r1
 530:	0d c0       	rjmp	.+26     	; 0x54c <DIO_write+0xea>
					{
						CLR_BIT(PORTD,PinNum);
 532:	22 b3       	in	r18, 0x12	; 18
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_write+0xdc>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	6a 95       	dec	r22
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_write+0xd8>
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	08 95       	ret
			case PORT_D :
					if (value == LOW)
					{
						CLR_BIT(PORTD,PinNum);
			
					}else if ( value == HIGH){
 54c:	41 30       	cpi	r20, 0x01	; 1
 54e:	b1 f4       	brne	.+44     	; 0x57c <DIO_write+0x11a>
			
						SET_BIT(PORTD,PinNum);
 550:	22 b3       	in	r18, 0x12	; 18
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_write+0xfa>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_write+0xf6>
 560:	82 2b       	or	r24, r18
 562:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_errorStatus = Dio_PinError ;
 568:	82 e0       	ldi	r24, 0x02	; 2
 56a:	08 95       	ret
					break;
		
		
			default:
			//error handling
				loc_errorStatus = Dio_PortError ;
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTA,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTB,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 574:	83 e0       	ldi	r24, 0x03	; 3
 576:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTC,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 578:	83 e0       	ldi	r24, 0x03	; 3
 57a:	08 95       	ret
			
						SET_BIT(PORTD,PinNum);
			
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 57c:	83 e0       	ldi	r24, 0x03	; 3
				break;
		
				}
		}
	return loc_errorStatus;
	}
 57e:	08 95       	ret

00000580 <__vector_1>:
//					 ISR FUNCTION
/***************************************************/
 
/**********  ISR OF INT_0  ************/

ISR(EXT_INT_0){
 580:	1f 92       	push	r1
 582:	0f 92       	push	r0
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	0f 92       	push	r0
 588:	11 24       	eor	r1, r1
 58a:	2f 93       	push	r18
 58c:	3f 93       	push	r19
 58e:	4f 93       	push	r20
 590:	5f 93       	push	r21
 592:	6f 93       	push	r22
 594:	7f 93       	push	r23
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	af 93       	push	r26
 59c:	bf 93       	push	r27
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31

	
		P0_CallbackFunction();
 5a2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <P0_CallbackFunction>
 5a6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <P0_CallbackFunction+0x1>
 5aa:	09 95       	icall
	
	
}
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <__vector_2>:


/**********  ISR OF INT_1  ************/

ISR(EXT_INT_1){
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31

	
		P1_CallbackFunction();
 5f0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <P1_CallbackFunction>
 5f4:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <P1_CallbackFunction+0x1>
 5f8:	09 95       	icall
	
	
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <__vector_3>:


/**********  ISR OF INT_2  ************/

ISR(EXT_INT_2){
 61c:	1f 92       	push	r1
 61e:	0f 92       	push	r0
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31

	
		P2_CallbackFunction();
 63e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 642:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 646:	09 95       	icall
	
	
 648:	ff 91       	pop	r31
 64a:	ef 91       	pop	r30
 64c:	bf 91       	pop	r27
 64e:	af 91       	pop	r26
 650:	9f 91       	pop	r25
 652:	8f 91       	pop	r24
 654:	7f 91       	pop	r23
 656:	6f 91       	pop	r22
 658:	5f 91       	pop	r21
 65a:	4f 91       	pop	r20
 65c:	3f 91       	pop	r19
 65e:	2f 91       	pop	r18
 660:	0f 90       	pop	r0
 662:	0f be       	out	0x3f, r0	; 63
 664:	0f 90       	pop	r0
 666:	1f 90       	pop	r1
 668:	18 95       	reti

0000066a <I2C_init>:
		}
		
	}
	
	
}
 66a:	11 b8       	out	0x01, r1	; 1
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	69 f0       	breq	.+26     	; 0x68a <I2C_init+0x20>
 670:	28 f0       	brcs	.+10     	; 0x67c <I2C_init+0x12>
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	89 f0       	breq	.+34     	; 0x698 <I2C_init+0x2e>
 676:	83 30       	cpi	r24, 0x03	; 3
 678:	b1 f0       	breq	.+44     	; 0x6a6 <I2C_init+0x3c>
 67a:	1b c0       	rjmp	.+54     	; 0x6b2 <I2C_init+0x48>
 67c:	81 b1       	in	r24, 0x01	; 1
 67e:	8e 7f       	andi	r24, 0xFE	; 254
 680:	81 b9       	out	0x01, r24	; 1
 682:	81 b1       	in	r24, 0x01	; 1
 684:	8d 7f       	andi	r24, 0xFD	; 253
 686:	81 b9       	out	0x01, r24	; 1
 688:	14 c0       	rjmp	.+40     	; 0x6b2 <I2C_init+0x48>
 68a:	81 b1       	in	r24, 0x01	; 1
 68c:	81 60       	ori	r24, 0x01	; 1
 68e:	81 b9       	out	0x01, r24	; 1
 690:	81 b1       	in	r24, 0x01	; 1
 692:	8d 7f       	andi	r24, 0xFD	; 253
 694:	81 b9       	out	0x01, r24	; 1
 696:	0d c0       	rjmp	.+26     	; 0x6b2 <I2C_init+0x48>
 698:	81 b1       	in	r24, 0x01	; 1
 69a:	8e 7f       	andi	r24, 0xFE	; 254
 69c:	81 b9       	out	0x01, r24	; 1
 69e:	81 b1       	in	r24, 0x01	; 1
 6a0:	82 60       	ori	r24, 0x02	; 2
 6a2:	81 b9       	out	0x01, r24	; 1
 6a4:	06 c0       	rjmp	.+12     	; 0x6b2 <I2C_init+0x48>
 6a6:	81 b1       	in	r24, 0x01	; 1
 6a8:	81 60       	ori	r24, 0x01	; 1
 6aa:	81 b9       	out	0x01, r24	; 1
 6ac:	81 b1       	in	r24, 0x01	; 1
 6ae:	82 60       	ori	r24, 0x02	; 2
 6b0:	81 b9       	out	0x01, r24	; 1
 6b2:	61 b1       	in	r22, 0x01	; 1
 6b4:	63 70       	andi	r22, 0x03	; 3
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 4b 05 	call	0xa96	; 0xa96 <__floatsisf>
 6c0:	9b 01       	movw	r18, r22
 6c2:	ac 01       	movw	r20, r24
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	80 e8       	ldi	r24, 0x80	; 128
 6ca:	90 e4       	ldi	r25, 0x40	; 64
 6cc:	0e 94 52 06 	call	0xca4	; 0xca4 <pow>
 6d0:	9b 01       	movw	r18, r22
 6d2:	ac 01       	movw	r20, r24
 6d4:	0e 94 3c 04 	call	0x878	; 0x878 <__addsf3>
 6d8:	9b 01       	movw	r18, r22
 6da:	ac 01       	movw	r20, r24
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	80 e8       	ldi	r24, 0x80	; 128
 6e2:	9f e4       	ldi	r25, 0x4F	; 79
 6e4:	0e 94 a8 04 	call	0x950	; 0x950 <__divsf3>
 6e8:	0e 94 1a 05 	call	0xa34	; 0xa34 <__fixunssfsi>
 6ec:	60 b9       	out	0x00, r22	; 0
 6ee:	08 95       	ret

000006f0 <I2C_start>:
 6f0:	86 b7       	in	r24, 0x36	; 54
 6f2:	80 68       	ori	r24, 0x80	; 128
 6f4:	86 bf       	out	0x36, r24	; 54
 6f6:	86 b7       	in	r24, 0x36	; 54
 6f8:	80 62       	ori	r24, 0x20	; 32
 6fa:	86 bf       	out	0x36, r24	; 54
 6fc:	86 b7       	in	r24, 0x36	; 54
 6fe:	84 60       	ori	r24, 0x04	; 4
 700:	86 bf       	out	0x36, r24	; 54
 702:	06 b6       	in	r0, 0x36	; 54
 704:	07 fe       	sbrs	r0, 7
 706:	fd cf       	rjmp	.-6      	; 0x702 <I2C_start+0x12>
 708:	81 b1       	in	r24, 0x01	; 1
 70a:	88 7f       	andi	r24, 0xF8	; 248
 70c:	88 30       	cpi	r24, 0x08	; 8
 70e:	11 f4       	brne	.+4      	; 0x714 <I2C_start+0x24>
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	08 95       	ret
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	08 95       	ret

00000718 <I2C_addressEvent>:
 718:	66 23       	and	r22, r22
 71a:	19 f0       	breq	.+6      	; 0x722 <I2C_addressEvent+0xa>
 71c:	61 30       	cpi	r22, 0x01	; 1
 71e:	a9 f0       	breq	.+42     	; 0x74a <I2C_addressEvent+0x32>
 720:	29 c0       	rjmp	.+82     	; 0x774 <I2C_addressEvent+0x5c>
 722:	83 b9       	out	0x03, r24	; 3
 724:	86 b7       	in	r24, 0x36	; 54
 726:	80 68       	ori	r24, 0x80	; 128
 728:	86 bf       	out	0x36, r24	; 54
 72a:	86 b7       	in	r24, 0x36	; 54
 72c:	84 60       	ori	r24, 0x04	; 4
 72e:	86 bf       	out	0x36, r24	; 54
 730:	06 b6       	in	r0, 0x36	; 54
 732:	07 fe       	sbrs	r0, 7
 734:	fd cf       	rjmp	.-6      	; 0x730 <I2C_addressEvent+0x18>
 736:	81 b1       	in	r24, 0x01	; 1
 738:	88 7f       	andi	r24, 0xF8	; 248
 73a:	88 31       	cpi	r24, 0x18	; 24
 73c:	e1 f0       	breq	.+56     	; 0x776 <I2C_addressEvent+0x5e>
 73e:	81 b1       	in	r24, 0x01	; 1
 740:	88 7f       	andi	r24, 0xF8	; 248
 742:	80 32       	cpi	r24, 0x20	; 32
 744:	d1 f4       	brne	.+52     	; 0x77a <I2C_addressEvent+0x62>
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	08 95       	ret
 74a:	8f 5f       	subi	r24, 0xFF	; 255
 74c:	83 b9       	out	0x03, r24	; 3
 74e:	86 b7       	in	r24, 0x36	; 54
 750:	80 68       	ori	r24, 0x80	; 128
 752:	86 bf       	out	0x36, r24	; 54
 754:	86 b7       	in	r24, 0x36	; 54
 756:	84 60       	ori	r24, 0x04	; 4
 758:	86 bf       	out	0x36, r24	; 54
 75a:	06 b6       	in	r0, 0x36	; 54
 75c:	07 fe       	sbrs	r0, 7
 75e:	fd cf       	rjmp	.-6      	; 0x75a <I2C_addressEvent+0x42>
 760:	81 b1       	in	r24, 0x01	; 1
 762:	88 7f       	andi	r24, 0xF8	; 248
 764:	80 34       	cpi	r24, 0x40	; 64
 766:	59 f0       	breq	.+22     	; 0x77e <I2C_addressEvent+0x66>
 768:	81 b1       	in	r24, 0x01	; 1
 76a:	88 7f       	andi	r24, 0xF8	; 248
 76c:	88 34       	cpi	r24, 0x48	; 72
 76e:	49 f4       	brne	.+18     	; 0x782 <I2C_addressEvent+0x6a>
 770:	87 e0       	ldi	r24, 0x07	; 7
 772:	08 95       	ret
 774:	08 95       	ret
 776:	82 e0       	ldi	r24, 0x02	; 2
 778:	08 95       	ret
 77a:	85 e0       	ldi	r24, 0x05	; 5
 77c:	08 95       	ret
 77e:	86 e0       	ldi	r24, 0x06	; 6
 780:	08 95       	ret
 782:	88 e0       	ldi	r24, 0x08	; 8
 784:	08 95       	ret

00000786 <I2C_stop>:
 786:	86 b7       	in	r24, 0x36	; 54
 788:	8f 7d       	andi	r24, 0xDF	; 223
 78a:	86 bf       	out	0x36, r24	; 54
 78c:	86 b7       	in	r24, 0x36	; 54
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	86 bf       	out	0x36, r24	; 54
 792:	86 b7       	in	r24, 0x36	; 54
 794:	80 61       	ori	r24, 0x10	; 16
 796:	86 bf       	out	0x36, r24	; 54
 798:	86 b7       	in	r24, 0x36	; 54
 79a:	84 60       	ori	r24, 0x04	; 4
 79c:	86 bf       	out	0x36, r24	; 54
 79e:	06 b6       	in	r0, 0x36	; 54
 7a0:	04 fc       	sbrc	r0, 4
 7a2:	fd cf       	rjmp	.-6      	; 0x79e <I2C_stop+0x18>
 7a4:	08 95       	ret

000007a6 <I2C_receiveData>:
 7a6:	fc 01       	movw	r30, r24
 7a8:	66 23       	and	r22, r22
 7aa:	19 f0       	breq	.+6      	; 0x7b2 <I2C_receiveData+0xc>
 7ac:	61 30       	cpi	r22, 0x01	; 1
 7ae:	29 f0       	breq	.+10     	; 0x7ba <I2C_receiveData+0x14>
 7b0:	07 c0       	rjmp	.+14     	; 0x7c0 <I2C_receiveData+0x1a>
 7b2:	86 b7       	in	r24, 0x36	; 54
 7b4:	80 64       	ori	r24, 0x40	; 64
 7b6:	86 bf       	out	0x36, r24	; 54
 7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <I2C_receiveData+0x1a>
 7ba:	86 b7       	in	r24, 0x36	; 54
 7bc:	8f 7b       	andi	r24, 0xBF	; 191
 7be:	86 bf       	out	0x36, r24	; 54
 7c0:	96 b7       	in	r25, 0x36	; 54
 7c2:	90 68       	ori	r25, 0x80	; 128
 7c4:	96 bf       	out	0x36, r25	; 54
 7c6:	96 b7       	in	r25, 0x36	; 54
 7c8:	94 60       	ori	r25, 0x04	; 4
 7ca:	96 bf       	out	0x36, r25	; 54
 7cc:	06 b6       	in	r0, 0x36	; 54
 7ce:	07 fe       	sbrs	r0, 7
 7d0:	fd cf       	rjmp	.-6      	; 0x7cc <I2C_receiveData+0x26>
 7d2:	83 b1       	in	r24, 0x03	; 3
 7d4:	80 83       	st	Z, r24
 7d6:	81 b1       	in	r24, 0x01	; 1
 7d8:	88 7f       	andi	r24, 0xF8	; 248
 7da:	80 35       	cpi	r24, 0x50	; 80
 7dc:	31 f0       	breq	.+12     	; 0x7ea <I2C_receiveData+0x44>
 7de:	81 b1       	in	r24, 0x01	; 1
 7e0:	88 7f       	andi	r24, 0xF8	; 248
 7e2:	88 35       	cpi	r24, 0x58	; 88
 7e4:	21 f4       	brne	.+8      	; 0x7ee <I2C_receiveData+0x48>
 7e6:	8d e0       	ldi	r24, 0x0D	; 13
 7e8:	08 95       	ret
 7ea:	8c e0       	ldi	r24, 0x0C	; 12
 7ec:	08 95       	ret
 7ee:	8e e0       	ldi	r24, 0x0E	; 14
 7f0:	08 95       	ret

000007f2 <EEPROM_Read>:
void EEPROM_Read ( uint8_t *data ,uint8_t _address) {
 7f2:	cf 93       	push	r28
 7f4:	df 93       	push	r29
 7f6:	ec 01       	movw	r28, r24

	if(I2C_start()==EVENT_OK){
 7f8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <I2C_start>
 7fc:	81 11       	cpse	r24, r1
 7fe:	0e c0       	rjmp	.+28     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
			
		//	if(I2C_sendData(_address)== DATA_SENT_ACK_OK){
			
			//	if(I2c_Restart()==EVENT_OK){
					
					if(I2C_addressEvent(0xA0,READ)==AD_R_SENT_ACK_OK){
 800:	61 e0       	ldi	r22, 0x01	; 1
 802:	80 ea       	ldi	r24, 0xA0	; 160
 804:	0e 94 8c 03 	call	0x718	; 0x718 <I2C_addressEvent>
 808:	86 30       	cpi	r24, 0x06	; 6
 80a:	41 f4       	brne	.+16     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
						
						if(I2C_receiveData(data,NACK)== DATA_RECIEVE_NACK_OK){
 80c:	61 e0       	ldi	r22, 0x01	; 1
 80e:	ce 01       	movw	r24, r28
 810:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <I2C_receiveData>
 814:	8d 30       	cpi	r24, 0x0D	; 13
 816:	11 f4       	brne	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
							
							I2C_stop();
 818:	0e 94 c3 03 	call	0x786	; 0x786 <I2C_stop>
		
		
	}
	
	
}
 81c:	df 91       	pop	r29
 81e:	cf 91       	pop	r28
 820:	08 95       	ret

00000822 <TIMER_0_init>:
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
	
	switch(mode){
 822:	81 30       	cpi	r24, 0x01	; 1
 824:	f1 f0       	breq	.+60     	; 0x862 <__stack+0x3>
 826:	28 f0       	brcs	.+10     	; 0x832 <TIMER_0_init+0x10>
 828:	82 30       	cpi	r24, 0x02	; 2
 82a:	99 f0       	breq	.+38     	; 0x852 <TIMER_0_init+0x30>
 82c:	83 30       	cpi	r24, 0x03	; 3
 82e:	49 f0       	breq	.+18     	; 0x842 <TIMER_0_init+0x20>
 830:	20 c0       	rjmp	.+64     	; 0x872 <__stack+0x13>
		
		case NORMAL_MODE :
		CLR_BIT(TCCR0,WGM00);
 832:	83 b7       	in	r24, 0x33	; 51
 834:	8f 7b       	andi	r24, 0xBF	; 191
 836:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
 838:	83 b7       	in	r24, 0x33	; 51
 83a:	87 7f       	andi	r24, 0xF7	; 247
 83c:	83 bf       	out	0x33, r24	; 51
 *  Author: moham
 */ 
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
 83e:	84 e0       	ldi	r24, 0x04	; 4
	switch(mode){
		
		case NORMAL_MODE :
		CLR_BIT(TCCR0,WGM00);
		CLR_BIT(TCCR0,WGM01);
		break;
 840:	08 95       	ret
		
		case PWM_PHASE_CORRECT :
		SET_BIT(TCCR0,WGM00);
 842:	83 b7       	in	r24, 0x33	; 51
 844:	80 64       	ori	r24, 0x40	; 64
 846:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
 848:	83 b7       	in	r24, 0x33	; 51
 84a:	87 7f       	andi	r24, 0xF7	; 247
 84c:	83 bf       	out	0x33, r24	; 51
 *  Author: moham
 */ 
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
 84e:	84 e0       	ldi	r24, 0x04	; 4
		break;
		
		case PWM_PHASE_CORRECT :
		SET_BIT(TCCR0,WGM00);
		CLR_BIT(TCCR0,WGM01);
		break;
 850:	08 95       	ret
		
		case CTC :
		CLR_BIT(TCCR0,WGM00);
 852:	83 b7       	in	r24, 0x33	; 51
 854:	8f 7b       	andi	r24, 0xBF	; 191
 856:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
 858:	83 b7       	in	r24, 0x33	; 51
 85a:	88 60       	ori	r24, 0x08	; 8
 85c:	83 bf       	out	0x33, r24	; 51
 *  Author: moham
 */ 
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
 85e:	84 e0       	ldi	r24, 0x04	; 4
		break;
		
		case CTC :
		CLR_BIT(TCCR0,WGM00);
		SET_BIT(TCCR0,WGM01);
		break;
 860:	08 95       	ret
		
		
		case FAST_PWM :
		SET_BIT(TCCR0,WGM00);
 862:	83 b7       	in	r24, 0x33	; 51
 864:	80 64       	ori	r24, 0x40	; 64
 866:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
 868:	83 b7       	in	r24, 0x33	; 51
 86a:	88 60       	ori	r24, 0x08	; 8
 86c:	83 bf       	out	0x33, r24	; 51
 *  Author: moham
 */ 
#include "timer.h"

Timer_ErrorStatus TIMER_0_init(Timer_Mode mode){
	Timer_ErrorStatus errorStatus = TIMER_OK;
 86e:	84 e0       	ldi	r24, 0x04	; 4
		
		
		case FAST_PWM :
		SET_BIT(TCCR0,WGM00);
		SET_BIT(TCCR0,WGM01);
		break;
 870:	08 95       	ret
		
		default:
		errorStatus = INVALID_MODE ;
 872:	81 e0       	ldi	r24, 0x01	; 1
	
	
	return errorStatus;
	
	
}
 874:	08 95       	ret

00000876 <__subsf3>:
 876:	50 58       	subi	r21, 0x80	; 128

00000878 <__addsf3>:
 878:	bb 27       	eor	r27, r27
 87a:	aa 27       	eor	r26, r26
 87c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__addsf3x>
 880:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_round>
 884:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_pscA>
 888:	38 f0       	brcs	.+14     	; 0x898 <__addsf3+0x20>
 88a:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_pscB>
 88e:	20 f0       	brcs	.+8      	; 0x898 <__addsf3+0x20>
 890:	39 f4       	brne	.+14     	; 0x8a0 <__addsf3+0x28>
 892:	9f 3f       	cpi	r25, 0xFF	; 255
 894:	19 f4       	brne	.+6      	; 0x89c <__addsf3+0x24>
 896:	26 f4       	brtc	.+8      	; 0x8a0 <__addsf3+0x28>
 898:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_nan>
 89c:	0e f4       	brtc	.+2      	; 0x8a0 <__addsf3+0x28>
 89e:	e0 95       	com	r30
 8a0:	e7 fb       	bst	r30, 7
 8a2:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>

000008a6 <__addsf3x>:
 8a6:	e9 2f       	mov	r30, r25
 8a8:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_split3>
 8ac:	58 f3       	brcs	.-42     	; 0x884 <__addsf3+0xc>
 8ae:	ba 17       	cp	r27, r26
 8b0:	62 07       	cpc	r22, r18
 8b2:	73 07       	cpc	r23, r19
 8b4:	84 07       	cpc	r24, r20
 8b6:	95 07       	cpc	r25, r21
 8b8:	20 f0       	brcs	.+8      	; 0x8c2 <__addsf3x+0x1c>
 8ba:	79 f4       	brne	.+30     	; 0x8da <__addsf3x+0x34>
 8bc:	a6 f5       	brtc	.+104    	; 0x926 <__addsf3x+0x80>
 8be:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_zero>
 8c2:	0e f4       	brtc	.+2      	; 0x8c6 <__addsf3x+0x20>
 8c4:	e0 95       	com	r30
 8c6:	0b 2e       	mov	r0, r27
 8c8:	ba 2f       	mov	r27, r26
 8ca:	a0 2d       	mov	r26, r0
 8cc:	0b 01       	movw	r0, r22
 8ce:	b9 01       	movw	r22, r18
 8d0:	90 01       	movw	r18, r0
 8d2:	0c 01       	movw	r0, r24
 8d4:	ca 01       	movw	r24, r20
 8d6:	a0 01       	movw	r20, r0
 8d8:	11 24       	eor	r1, r1
 8da:	ff 27       	eor	r31, r31
 8dc:	59 1b       	sub	r21, r25
 8de:	99 f0       	breq	.+38     	; 0x906 <__addsf3x+0x60>
 8e0:	59 3f       	cpi	r21, 0xF9	; 249
 8e2:	50 f4       	brcc	.+20     	; 0x8f8 <__addsf3x+0x52>
 8e4:	50 3e       	cpi	r21, 0xE0	; 224
 8e6:	68 f1       	brcs	.+90     	; 0x942 <__addsf3x+0x9c>
 8e8:	1a 16       	cp	r1, r26
 8ea:	f0 40       	sbci	r31, 0x00	; 0
 8ec:	a2 2f       	mov	r26, r18
 8ee:	23 2f       	mov	r18, r19
 8f0:	34 2f       	mov	r19, r20
 8f2:	44 27       	eor	r20, r20
 8f4:	58 5f       	subi	r21, 0xF8	; 248
 8f6:	f3 cf       	rjmp	.-26     	; 0x8de <__addsf3x+0x38>
 8f8:	46 95       	lsr	r20
 8fa:	37 95       	ror	r19
 8fc:	27 95       	ror	r18
 8fe:	a7 95       	ror	r26
 900:	f0 40       	sbci	r31, 0x00	; 0
 902:	53 95       	inc	r21
 904:	c9 f7       	brne	.-14     	; 0x8f8 <__addsf3x+0x52>
 906:	7e f4       	brtc	.+30     	; 0x926 <__addsf3x+0x80>
 908:	1f 16       	cp	r1, r31
 90a:	ba 0b       	sbc	r27, r26
 90c:	62 0b       	sbc	r22, r18
 90e:	73 0b       	sbc	r23, r19
 910:	84 0b       	sbc	r24, r20
 912:	ba f0       	brmi	.+46     	; 0x942 <__addsf3x+0x9c>
 914:	91 50       	subi	r25, 0x01	; 1
 916:	a1 f0       	breq	.+40     	; 0x940 <__addsf3x+0x9a>
 918:	ff 0f       	add	r31, r31
 91a:	bb 1f       	adc	r27, r27
 91c:	66 1f       	adc	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	88 1f       	adc	r24, r24
 922:	c2 f7       	brpl	.-16     	; 0x914 <__addsf3x+0x6e>
 924:	0e c0       	rjmp	.+28     	; 0x942 <__addsf3x+0x9c>
 926:	ba 0f       	add	r27, r26
 928:	62 1f       	adc	r22, r18
 92a:	73 1f       	adc	r23, r19
 92c:	84 1f       	adc	r24, r20
 92e:	48 f4       	brcc	.+18     	; 0x942 <__addsf3x+0x9c>
 930:	87 95       	ror	r24
 932:	77 95       	ror	r23
 934:	67 95       	ror	r22
 936:	b7 95       	ror	r27
 938:	f7 95       	ror	r31
 93a:	9e 3f       	cpi	r25, 0xFE	; 254
 93c:	08 f0       	brcs	.+2      	; 0x940 <__addsf3x+0x9a>
 93e:	b0 cf       	rjmp	.-160    	; 0x8a0 <__addsf3+0x28>
 940:	93 95       	inc	r25
 942:	88 0f       	add	r24, r24
 944:	08 f0       	brcs	.+2      	; 0x948 <__addsf3x+0xa2>
 946:	99 27       	eor	r25, r25
 948:	ee 0f       	add	r30, r30
 94a:	97 95       	ror	r25
 94c:	87 95       	ror	r24
 94e:	08 95       	ret

00000950 <__divsf3>:
 950:	0e 94 bc 04 	call	0x978	; 0x978 <__divsf3x>
 954:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_round>
 958:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_pscB>
 95c:	58 f0       	brcs	.+22     	; 0x974 <__divsf3+0x24>
 95e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_pscA>
 962:	40 f0       	brcs	.+16     	; 0x974 <__divsf3+0x24>
 964:	29 f4       	brne	.+10     	; 0x970 <__divsf3+0x20>
 966:	5f 3f       	cpi	r21, 0xFF	; 255
 968:	29 f0       	breq	.+10     	; 0x974 <__divsf3+0x24>
 96a:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 96e:	51 11       	cpse	r21, r1
 970:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_szero>
 974:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_nan>

00000978 <__divsf3x>:
 978:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_split3>
 97c:	68 f3       	brcs	.-38     	; 0x958 <__divsf3+0x8>

0000097e <__divsf3_pse>:
 97e:	99 23       	and	r25, r25
 980:	b1 f3       	breq	.-20     	; 0x96e <__divsf3+0x1e>
 982:	55 23       	and	r21, r21
 984:	91 f3       	breq	.-28     	; 0x96a <__divsf3+0x1a>
 986:	95 1b       	sub	r25, r21
 988:	55 0b       	sbc	r21, r21
 98a:	bb 27       	eor	r27, r27
 98c:	aa 27       	eor	r26, r26
 98e:	62 17       	cp	r22, r18
 990:	73 07       	cpc	r23, r19
 992:	84 07       	cpc	r24, r20
 994:	38 f0       	brcs	.+14     	; 0x9a4 <__divsf3_pse+0x26>
 996:	9f 5f       	subi	r25, 0xFF	; 255
 998:	5f 4f       	sbci	r21, 0xFF	; 255
 99a:	22 0f       	add	r18, r18
 99c:	33 1f       	adc	r19, r19
 99e:	44 1f       	adc	r20, r20
 9a0:	aa 1f       	adc	r26, r26
 9a2:	a9 f3       	breq	.-22     	; 0x98e <__divsf3_pse+0x10>
 9a4:	35 d0       	rcall	.+106    	; 0xa10 <__divsf3_pse+0x92>
 9a6:	0e 2e       	mov	r0, r30
 9a8:	3a f0       	brmi	.+14     	; 0x9b8 <__divsf3_pse+0x3a>
 9aa:	e0 e8       	ldi	r30, 0x80	; 128
 9ac:	32 d0       	rcall	.+100    	; 0xa12 <__divsf3_pse+0x94>
 9ae:	91 50       	subi	r25, 0x01	; 1
 9b0:	50 40       	sbci	r21, 0x00	; 0
 9b2:	e6 95       	lsr	r30
 9b4:	00 1c       	adc	r0, r0
 9b6:	ca f7       	brpl	.-14     	; 0x9aa <__divsf3_pse+0x2c>
 9b8:	2b d0       	rcall	.+86     	; 0xa10 <__divsf3_pse+0x92>
 9ba:	fe 2f       	mov	r31, r30
 9bc:	29 d0       	rcall	.+82     	; 0xa10 <__divsf3_pse+0x92>
 9be:	66 0f       	add	r22, r22
 9c0:	77 1f       	adc	r23, r23
 9c2:	88 1f       	adc	r24, r24
 9c4:	bb 1f       	adc	r27, r27
 9c6:	26 17       	cp	r18, r22
 9c8:	37 07       	cpc	r19, r23
 9ca:	48 07       	cpc	r20, r24
 9cc:	ab 07       	cpc	r26, r27
 9ce:	b0 e8       	ldi	r27, 0x80	; 128
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <__divsf3_pse+0x56>
 9d2:	bb 0b       	sbc	r27, r27
 9d4:	80 2d       	mov	r24, r0
 9d6:	bf 01       	movw	r22, r30
 9d8:	ff 27       	eor	r31, r31
 9da:	93 58       	subi	r25, 0x83	; 131
 9dc:	5f 4f       	sbci	r21, 0xFF	; 255
 9de:	3a f0       	brmi	.+14     	; 0x9ee <__divsf3_pse+0x70>
 9e0:	9e 3f       	cpi	r25, 0xFE	; 254
 9e2:	51 05       	cpc	r21, r1
 9e4:	78 f0       	brcs	.+30     	; 0xa04 <__divsf3_pse+0x86>
 9e6:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 9ea:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_szero>
 9ee:	5f 3f       	cpi	r21, 0xFF	; 255
 9f0:	e4 f3       	brlt	.-8      	; 0x9ea <__divsf3_pse+0x6c>
 9f2:	98 3e       	cpi	r25, 0xE8	; 232
 9f4:	d4 f3       	brlt	.-12     	; 0x9ea <__divsf3_pse+0x6c>
 9f6:	86 95       	lsr	r24
 9f8:	77 95       	ror	r23
 9fa:	67 95       	ror	r22
 9fc:	b7 95       	ror	r27
 9fe:	f7 95       	ror	r31
 a00:	9f 5f       	subi	r25, 0xFF	; 255
 a02:	c9 f7       	brne	.-14     	; 0x9f6 <__divsf3_pse+0x78>
 a04:	88 0f       	add	r24, r24
 a06:	91 1d       	adc	r25, r1
 a08:	96 95       	lsr	r25
 a0a:	87 95       	ror	r24
 a0c:	97 f9       	bld	r25, 7
 a0e:	08 95       	ret
 a10:	e1 e0       	ldi	r30, 0x01	; 1
 a12:	66 0f       	add	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	bb 1f       	adc	r27, r27
 a1a:	62 17       	cp	r22, r18
 a1c:	73 07       	cpc	r23, r19
 a1e:	84 07       	cpc	r24, r20
 a20:	ba 07       	cpc	r27, r26
 a22:	20 f0       	brcs	.+8      	; 0xa2c <__divsf3_pse+0xae>
 a24:	62 1b       	sub	r22, r18
 a26:	73 0b       	sbc	r23, r19
 a28:	84 0b       	sbc	r24, r20
 a2a:	ba 0b       	sbc	r27, r26
 a2c:	ee 1f       	adc	r30, r30
 a2e:	88 f7       	brcc	.-30     	; 0xa12 <__divsf3_pse+0x94>
 a30:	e0 95       	com	r30
 a32:	08 95       	ret

00000a34 <__fixunssfsi>:
 a34:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_splitA>
 a38:	88 f0       	brcs	.+34     	; 0xa5c <__fixunssfsi+0x28>
 a3a:	9f 57       	subi	r25, 0x7F	; 127
 a3c:	98 f0       	brcs	.+38     	; 0xa64 <__fixunssfsi+0x30>
 a3e:	b9 2f       	mov	r27, r25
 a40:	99 27       	eor	r25, r25
 a42:	b7 51       	subi	r27, 0x17	; 23
 a44:	b0 f0       	brcs	.+44     	; 0xa72 <__fixunssfsi+0x3e>
 a46:	e1 f0       	breq	.+56     	; 0xa80 <__fixunssfsi+0x4c>
 a48:	66 0f       	add	r22, r22
 a4a:	77 1f       	adc	r23, r23
 a4c:	88 1f       	adc	r24, r24
 a4e:	99 1f       	adc	r25, r25
 a50:	1a f0       	brmi	.+6      	; 0xa58 <__fixunssfsi+0x24>
 a52:	ba 95       	dec	r27
 a54:	c9 f7       	brne	.-14     	; 0xa48 <__fixunssfsi+0x14>
 a56:	14 c0       	rjmp	.+40     	; 0xa80 <__fixunssfsi+0x4c>
 a58:	b1 30       	cpi	r27, 0x01	; 1
 a5a:	91 f0       	breq	.+36     	; 0xa80 <__fixunssfsi+0x4c>
 a5c:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_zero>
 a60:	b1 e0       	ldi	r27, 0x01	; 1
 a62:	08 95       	ret
 a64:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_zero>
 a68:	67 2f       	mov	r22, r23
 a6a:	78 2f       	mov	r23, r24
 a6c:	88 27       	eor	r24, r24
 a6e:	b8 5f       	subi	r27, 0xF8	; 248
 a70:	39 f0       	breq	.+14     	; 0xa80 <__fixunssfsi+0x4c>
 a72:	b9 3f       	cpi	r27, 0xF9	; 249
 a74:	cc f3       	brlt	.-14     	; 0xa68 <__fixunssfsi+0x34>
 a76:	86 95       	lsr	r24
 a78:	77 95       	ror	r23
 a7a:	67 95       	ror	r22
 a7c:	b3 95       	inc	r27
 a7e:	d9 f7       	brne	.-10     	; 0xa76 <__fixunssfsi+0x42>
 a80:	3e f4       	brtc	.+14     	; 0xa90 <__fixunssfsi+0x5c>
 a82:	90 95       	com	r25
 a84:	80 95       	com	r24
 a86:	70 95       	com	r23
 a88:	61 95       	neg	r22
 a8a:	7f 4f       	sbci	r23, 0xFF	; 255
 a8c:	8f 4f       	sbci	r24, 0xFF	; 255
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	08 95       	ret

00000a92 <__floatunsisf>:
 a92:	e8 94       	clt
 a94:	09 c0       	rjmp	.+18     	; 0xaa8 <__floatsisf+0x12>

00000a96 <__floatsisf>:
 a96:	97 fb       	bst	r25, 7
 a98:	3e f4       	brtc	.+14     	; 0xaa8 <__floatsisf+0x12>
 a9a:	90 95       	com	r25
 a9c:	80 95       	com	r24
 a9e:	70 95       	com	r23
 aa0:	61 95       	neg	r22
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	99 23       	and	r25, r25
 aaa:	a9 f0       	breq	.+42     	; 0xad6 <__floatsisf+0x40>
 aac:	f9 2f       	mov	r31, r25
 aae:	96 e9       	ldi	r25, 0x96	; 150
 ab0:	bb 27       	eor	r27, r27
 ab2:	93 95       	inc	r25
 ab4:	f6 95       	lsr	r31
 ab6:	87 95       	ror	r24
 ab8:	77 95       	ror	r23
 aba:	67 95       	ror	r22
 abc:	b7 95       	ror	r27
 abe:	f1 11       	cpse	r31, r1
 ac0:	f8 cf       	rjmp	.-16     	; 0xab2 <__floatsisf+0x1c>
 ac2:	fa f4       	brpl	.+62     	; 0xb02 <__floatsisf+0x6c>
 ac4:	bb 0f       	add	r27, r27
 ac6:	11 f4       	brne	.+4      	; 0xacc <__floatsisf+0x36>
 ac8:	60 ff       	sbrs	r22, 0
 aca:	1b c0       	rjmp	.+54     	; 0xb02 <__floatsisf+0x6c>
 acc:	6f 5f       	subi	r22, 0xFF	; 255
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	16 c0       	rjmp	.+44     	; 0xb02 <__floatsisf+0x6c>
 ad6:	88 23       	and	r24, r24
 ad8:	11 f0       	breq	.+4      	; 0xade <__floatsisf+0x48>
 ada:	96 e9       	ldi	r25, 0x96	; 150
 adc:	11 c0       	rjmp	.+34     	; 0xb00 <__floatsisf+0x6a>
 ade:	77 23       	and	r23, r23
 ae0:	21 f0       	breq	.+8      	; 0xaea <__floatsisf+0x54>
 ae2:	9e e8       	ldi	r25, 0x8E	; 142
 ae4:	87 2f       	mov	r24, r23
 ae6:	76 2f       	mov	r23, r22
 ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <__floatsisf+0x5e>
 aea:	66 23       	and	r22, r22
 aec:	71 f0       	breq	.+28     	; 0xb0a <__floatsisf+0x74>
 aee:	96 e8       	ldi	r25, 0x86	; 134
 af0:	86 2f       	mov	r24, r22
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	60 e0       	ldi	r22, 0x00	; 0
 af6:	2a f0       	brmi	.+10     	; 0xb02 <__floatsisf+0x6c>
 af8:	9a 95       	dec	r25
 afa:	66 0f       	add	r22, r22
 afc:	77 1f       	adc	r23, r23
 afe:	88 1f       	adc	r24, r24
 b00:	da f7       	brpl	.-10     	; 0xaf8 <__floatsisf+0x62>
 b02:	88 0f       	add	r24, r24
 b04:	96 95       	lsr	r25
 b06:	87 95       	ror	r24
 b08:	97 f9       	bld	r25, 7
 b0a:	08 95       	ret

00000b0c <__fp_inf>:
 b0c:	97 f9       	bld	r25, 7
 b0e:	9f 67       	ori	r25, 0x7F	; 127
 b10:	80 e8       	ldi	r24, 0x80	; 128
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	60 e0       	ldi	r22, 0x00	; 0
 b16:	08 95       	ret

00000b18 <__fp_mpack>:
 b18:	9f 3f       	cpi	r25, 0xFF	; 255
 b1a:	31 f0       	breq	.+12     	; 0xb28 <__fp_mpack_finite+0xc>

00000b1c <__fp_mpack_finite>:
 b1c:	91 50       	subi	r25, 0x01	; 1
 b1e:	20 f4       	brcc	.+8      	; 0xb28 <__fp_mpack_finite+0xc>
 b20:	87 95       	ror	r24
 b22:	77 95       	ror	r23
 b24:	67 95       	ror	r22
 b26:	b7 95       	ror	r27
 b28:	88 0f       	add	r24, r24
 b2a:	91 1d       	adc	r25, r1
 b2c:	96 95       	lsr	r25
 b2e:	87 95       	ror	r24
 b30:	97 f9       	bld	r25, 7
 b32:	08 95       	ret

00000b34 <__fp_nan>:
 b34:	9f ef       	ldi	r25, 0xFF	; 255
 b36:	80 ec       	ldi	r24, 0xC0	; 192
 b38:	08 95       	ret

00000b3a <__fp_pscA>:
 b3a:	00 24       	eor	r0, r0
 b3c:	0a 94       	dec	r0
 b3e:	16 16       	cp	r1, r22
 b40:	17 06       	cpc	r1, r23
 b42:	18 06       	cpc	r1, r24
 b44:	09 06       	cpc	r0, r25
 b46:	08 95       	ret

00000b48 <__fp_pscB>:
 b48:	00 24       	eor	r0, r0
 b4a:	0a 94       	dec	r0
 b4c:	12 16       	cp	r1, r18
 b4e:	13 06       	cpc	r1, r19
 b50:	14 06       	cpc	r1, r20
 b52:	05 06       	cpc	r0, r21
 b54:	08 95       	ret

00000b56 <__fp_round>:
 b56:	09 2e       	mov	r0, r25
 b58:	03 94       	inc	r0
 b5a:	00 0c       	add	r0, r0
 b5c:	11 f4       	brne	.+4      	; 0xb62 <__fp_round+0xc>
 b5e:	88 23       	and	r24, r24
 b60:	52 f0       	brmi	.+20     	; 0xb76 <__fp_round+0x20>
 b62:	bb 0f       	add	r27, r27
 b64:	40 f4       	brcc	.+16     	; 0xb76 <__fp_round+0x20>
 b66:	bf 2b       	or	r27, r31
 b68:	11 f4       	brne	.+4      	; 0xb6e <__fp_round+0x18>
 b6a:	60 ff       	sbrs	r22, 0
 b6c:	04 c0       	rjmp	.+8      	; 0xb76 <__fp_round+0x20>
 b6e:	6f 5f       	subi	r22, 0xFF	; 255
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	08 95       	ret

00000b78 <__fp_split3>:
 b78:	57 fd       	sbrc	r21, 7
 b7a:	90 58       	subi	r25, 0x80	; 128
 b7c:	44 0f       	add	r20, r20
 b7e:	55 1f       	adc	r21, r21
 b80:	59 f0       	breq	.+22     	; 0xb98 <__fp_splitA+0x10>
 b82:	5f 3f       	cpi	r21, 0xFF	; 255
 b84:	71 f0       	breq	.+28     	; 0xba2 <__fp_splitA+0x1a>
 b86:	47 95       	ror	r20

00000b88 <__fp_splitA>:
 b88:	88 0f       	add	r24, r24
 b8a:	97 fb       	bst	r25, 7
 b8c:	99 1f       	adc	r25, r25
 b8e:	61 f0       	breq	.+24     	; 0xba8 <__fp_splitA+0x20>
 b90:	9f 3f       	cpi	r25, 0xFF	; 255
 b92:	79 f0       	breq	.+30     	; 0xbb2 <__fp_splitA+0x2a>
 b94:	87 95       	ror	r24
 b96:	08 95       	ret
 b98:	12 16       	cp	r1, r18
 b9a:	13 06       	cpc	r1, r19
 b9c:	14 06       	cpc	r1, r20
 b9e:	55 1f       	adc	r21, r21
 ba0:	f2 cf       	rjmp	.-28     	; 0xb86 <__fp_split3+0xe>
 ba2:	46 95       	lsr	r20
 ba4:	f1 df       	rcall	.-30     	; 0xb88 <__fp_splitA>
 ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <__fp_splitA+0x30>
 ba8:	16 16       	cp	r1, r22
 baa:	17 06       	cpc	r1, r23
 bac:	18 06       	cpc	r1, r24
 bae:	99 1f       	adc	r25, r25
 bb0:	f1 cf       	rjmp	.-30     	; 0xb94 <__fp_splitA+0xc>
 bb2:	86 95       	lsr	r24
 bb4:	71 05       	cpc	r23, r1
 bb6:	61 05       	cpc	r22, r1
 bb8:	08 94       	sec
 bba:	08 95       	ret

00000bbc <__fp_zero>:
 bbc:	e8 94       	clt

00000bbe <__fp_szero>:
 bbe:	bb 27       	eor	r27, r27
 bc0:	66 27       	eor	r22, r22
 bc2:	77 27       	eor	r23, r23
 bc4:	cb 01       	movw	r24, r22
 bc6:	97 f9       	bld	r25, 7
 bc8:	08 95       	ret

00000bca <__mulsf3>:
 bca:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__mulsf3x>
 bce:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_round>
 bd2:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_pscA>
 bd6:	38 f0       	brcs	.+14     	; 0xbe6 <__mulsf3+0x1c>
 bd8:	0e 94 a4 05 	call	0xb48	; 0xb48 <__fp_pscB>
 bdc:	20 f0       	brcs	.+8      	; 0xbe6 <__mulsf3+0x1c>
 bde:	95 23       	and	r25, r21
 be0:	11 f0       	breq	.+4      	; 0xbe6 <__mulsf3+0x1c>
 be2:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 be6:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_nan>
 bea:	11 24       	eor	r1, r1
 bec:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_szero>

00000bf0 <__mulsf3x>:
 bf0:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fp_split3>
 bf4:	70 f3       	brcs	.-36     	; 0xbd2 <__mulsf3+0x8>

00000bf6 <__mulsf3_pse>:
 bf6:	95 9f       	mul	r25, r21
 bf8:	c1 f3       	breq	.-16     	; 0xbea <__mulsf3+0x20>
 bfa:	95 0f       	add	r25, r21
 bfc:	50 e0       	ldi	r21, 0x00	; 0
 bfe:	55 1f       	adc	r21, r21
 c00:	62 9f       	mul	r22, r18
 c02:	f0 01       	movw	r30, r0
 c04:	72 9f       	mul	r23, r18
 c06:	bb 27       	eor	r27, r27
 c08:	f0 0d       	add	r31, r0
 c0a:	b1 1d       	adc	r27, r1
 c0c:	63 9f       	mul	r22, r19
 c0e:	aa 27       	eor	r26, r26
 c10:	f0 0d       	add	r31, r0
 c12:	b1 1d       	adc	r27, r1
 c14:	aa 1f       	adc	r26, r26
 c16:	64 9f       	mul	r22, r20
 c18:	66 27       	eor	r22, r22
 c1a:	b0 0d       	add	r27, r0
 c1c:	a1 1d       	adc	r26, r1
 c1e:	66 1f       	adc	r22, r22
 c20:	82 9f       	mul	r24, r18
 c22:	22 27       	eor	r18, r18
 c24:	b0 0d       	add	r27, r0
 c26:	a1 1d       	adc	r26, r1
 c28:	62 1f       	adc	r22, r18
 c2a:	73 9f       	mul	r23, r19
 c2c:	b0 0d       	add	r27, r0
 c2e:	a1 1d       	adc	r26, r1
 c30:	62 1f       	adc	r22, r18
 c32:	83 9f       	mul	r24, r19
 c34:	a0 0d       	add	r26, r0
 c36:	61 1d       	adc	r22, r1
 c38:	22 1f       	adc	r18, r18
 c3a:	74 9f       	mul	r23, r20
 c3c:	33 27       	eor	r19, r19
 c3e:	a0 0d       	add	r26, r0
 c40:	61 1d       	adc	r22, r1
 c42:	23 1f       	adc	r18, r19
 c44:	84 9f       	mul	r24, r20
 c46:	60 0d       	add	r22, r0
 c48:	21 1d       	adc	r18, r1
 c4a:	82 2f       	mov	r24, r18
 c4c:	76 2f       	mov	r23, r22
 c4e:	6a 2f       	mov	r22, r26
 c50:	11 24       	eor	r1, r1
 c52:	9f 57       	subi	r25, 0x7F	; 127
 c54:	50 40       	sbci	r21, 0x00	; 0
 c56:	9a f0       	brmi	.+38     	; 0xc7e <__mulsf3_pse+0x88>
 c58:	f1 f0       	breq	.+60     	; 0xc96 <__mulsf3_pse+0xa0>
 c5a:	88 23       	and	r24, r24
 c5c:	4a f0       	brmi	.+18     	; 0xc70 <__mulsf3_pse+0x7a>
 c5e:	ee 0f       	add	r30, r30
 c60:	ff 1f       	adc	r31, r31
 c62:	bb 1f       	adc	r27, r27
 c64:	66 1f       	adc	r22, r22
 c66:	77 1f       	adc	r23, r23
 c68:	88 1f       	adc	r24, r24
 c6a:	91 50       	subi	r25, 0x01	; 1
 c6c:	50 40       	sbci	r21, 0x00	; 0
 c6e:	a9 f7       	brne	.-22     	; 0xc5a <__mulsf3_pse+0x64>
 c70:	9e 3f       	cpi	r25, 0xFE	; 254
 c72:	51 05       	cpc	r21, r1
 c74:	80 f0       	brcs	.+32     	; 0xc96 <__mulsf3_pse+0xa0>
 c76:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 c7a:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_szero>
 c7e:	5f 3f       	cpi	r21, 0xFF	; 255
 c80:	e4 f3       	brlt	.-8      	; 0xc7a <__mulsf3_pse+0x84>
 c82:	98 3e       	cpi	r25, 0xE8	; 232
 c84:	d4 f3       	brlt	.-12     	; 0xc7a <__mulsf3_pse+0x84>
 c86:	86 95       	lsr	r24
 c88:	77 95       	ror	r23
 c8a:	67 95       	ror	r22
 c8c:	b7 95       	ror	r27
 c8e:	f7 95       	ror	r31
 c90:	e7 95       	ror	r30
 c92:	9f 5f       	subi	r25, 0xFF	; 255
 c94:	c1 f7       	brne	.-16     	; 0xc86 <__mulsf3_pse+0x90>
 c96:	fe 2b       	or	r31, r30
 c98:	88 0f       	add	r24, r24
 c9a:	91 1d       	adc	r25, r1
 c9c:	96 95       	lsr	r25
 c9e:	87 95       	ror	r24
 ca0:	97 f9       	bld	r25, 7
 ca2:	08 95       	ret

00000ca4 <pow>:
 ca4:	fa 01       	movw	r30, r20
 ca6:	ee 0f       	add	r30, r30
 ca8:	ff 1f       	adc	r31, r31
 caa:	30 96       	adiw	r30, 0x00	; 0
 cac:	21 05       	cpc	r18, r1
 cae:	31 05       	cpc	r19, r1
 cb0:	a1 f1       	breq	.+104    	; 0xd1a <pow+0x76>
 cb2:	61 15       	cp	r22, r1
 cb4:	71 05       	cpc	r23, r1
 cb6:	61 f4       	brne	.+24     	; 0xcd0 <pow+0x2c>
 cb8:	80 38       	cpi	r24, 0x80	; 128
 cba:	bf e3       	ldi	r27, 0x3F	; 63
 cbc:	9b 07       	cpc	r25, r27
 cbe:	49 f1       	breq	.+82     	; 0xd12 <pow+0x6e>
 cc0:	68 94       	set
 cc2:	90 38       	cpi	r25, 0x80	; 128
 cc4:	81 05       	cpc	r24, r1
 cc6:	61 f0       	breq	.+24     	; 0xce0 <pow+0x3c>
 cc8:	80 38       	cpi	r24, 0x80	; 128
 cca:	bf ef       	ldi	r27, 0xFF	; 255
 ccc:	9b 07       	cpc	r25, r27
 cce:	41 f0       	breq	.+16     	; 0xce0 <pow+0x3c>
 cd0:	99 23       	and	r25, r25
 cd2:	4a f5       	brpl	.+82     	; 0xd26 <pow+0x82>
 cd4:	ff 3f       	cpi	r31, 0xFF	; 255
 cd6:	e1 05       	cpc	r30, r1
 cd8:	31 05       	cpc	r19, r1
 cda:	21 05       	cpc	r18, r1
 cdc:	19 f1       	breq	.+70     	; 0xd24 <pow+0x80>
 cde:	e8 94       	clt
 ce0:	08 94       	sec
 ce2:	e7 95       	ror	r30
 ce4:	d9 01       	movw	r26, r18
 ce6:	aa 23       	and	r26, r26
 ce8:	29 f4       	brne	.+10     	; 0xcf4 <pow+0x50>
 cea:	ab 2f       	mov	r26, r27
 cec:	be 2f       	mov	r27, r30
 cee:	f8 5f       	subi	r31, 0xF8	; 248
 cf0:	d0 f3       	brcs	.-12     	; 0xce6 <pow+0x42>
 cf2:	10 c0       	rjmp	.+32     	; 0xd14 <pow+0x70>
 cf4:	ff 5f       	subi	r31, 0xFF	; 255
 cf6:	70 f4       	brcc	.+28     	; 0xd14 <pow+0x70>
 cf8:	a6 95       	lsr	r26
 cfa:	e0 f7       	brcc	.-8      	; 0xcf4 <pow+0x50>
 cfc:	f7 39       	cpi	r31, 0x97	; 151
 cfe:	50 f0       	brcs	.+20     	; 0xd14 <pow+0x70>
 d00:	19 f0       	breq	.+6      	; 0xd08 <pow+0x64>
 d02:	ff 3a       	cpi	r31, 0xAF	; 175
 d04:	38 f4       	brcc	.+14     	; 0xd14 <pow+0x70>
 d06:	9f 77       	andi	r25, 0x7F	; 127
 d08:	9f 93       	push	r25
 d0a:	0d d0       	rcall	.+26     	; 0xd26 <pow+0x82>
 d0c:	0f 90       	pop	r0
 d0e:	07 fc       	sbrc	r0, 7
 d10:	90 58       	subi	r25, 0x80	; 128
 d12:	08 95       	ret
 d14:	46 f0       	brts	.+16     	; 0xd26 <pow+0x82>
 d16:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_nan>
 d1a:	60 e0       	ldi	r22, 0x00	; 0
 d1c:	70 e0       	ldi	r23, 0x00	; 0
 d1e:	80 e8       	ldi	r24, 0x80	; 128
 d20:	9f e3       	ldi	r25, 0x3F	; 63
 d22:	08 95       	ret
 d24:	4f e7       	ldi	r20, 0x7F	; 127
 d26:	9f 77       	andi	r25, 0x7F	; 127
 d28:	5f 93       	push	r21
 d2a:	4f 93       	push	r20
 d2c:	3f 93       	push	r19
 d2e:	2f 93       	push	r18
 d30:	0e 94 4d 07 	call	0xe9a	; 0xe9a <log>
 d34:	2f 91       	pop	r18
 d36:	3f 91       	pop	r19
 d38:	4f 91       	pop	r20
 d3a:	5f 91       	pop	r21
 d3c:	0e 94 e5 05 	call	0xbca	; 0xbca <__mulsf3>
 d40:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <exp>
 d44:	29 f4       	brne	.+10     	; 0xd50 <pow+0xac>
 d46:	16 f0       	brts	.+4      	; 0xd4c <pow+0xa8>
 d48:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 d4c:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_zero>
 d50:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_nan>

00000d54 <exp>:
 d54:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_splitA>
 d58:	a8 f3       	brcs	.-22     	; 0xd44 <pow+0xa0>
 d5a:	96 38       	cpi	r25, 0x86	; 134
 d5c:	a0 f7       	brcc	.-24     	; 0xd46 <pow+0xa2>
 d5e:	07 f8       	bld	r0, 7
 d60:	0f 92       	push	r0
 d62:	e8 94       	clt
 d64:	2b e3       	ldi	r18, 0x3B	; 59
 d66:	3a ea       	ldi	r19, 0xAA	; 170
 d68:	48 eb       	ldi	r20, 0xB8	; 184
 d6a:	5f e7       	ldi	r21, 0x7F	; 127
 d6c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__mulsf3_pse>
 d70:	0f 92       	push	r0
 d72:	0f 92       	push	r0
 d74:	0f 92       	push	r0
 d76:	4d b7       	in	r20, 0x3d	; 61
 d78:	5e b7       	in	r21, 0x3e	; 62
 d7a:	0f 92       	push	r0
 d7c:	0e 94 95 07 	call	0xf2a	; 0xf2a <modf>
 d80:	e4 e5       	ldi	r30, 0x54	; 84
 d82:	f0 e0       	ldi	r31, 0x00	; 0
 d84:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_powser>
 d88:	4f 91       	pop	r20
 d8a:	5f 91       	pop	r21
 d8c:	ef 91       	pop	r30
 d8e:	ff 91       	pop	r31
 d90:	e5 95       	asr	r30
 d92:	ee 1f       	adc	r30, r30
 d94:	ff 1f       	adc	r31, r31
 d96:	49 f0       	breq	.+18     	; 0xdaa <exp+0x56>
 d98:	fe 57       	subi	r31, 0x7E	; 126
 d9a:	e0 68       	ori	r30, 0x80	; 128
 d9c:	44 27       	eor	r20, r20
 d9e:	ee 0f       	add	r30, r30
 da0:	44 1f       	adc	r20, r20
 da2:	fa 95       	dec	r31
 da4:	e1 f7       	brne	.-8      	; 0xd9e <exp+0x4a>
 da6:	41 95       	neg	r20
 da8:	55 0b       	sbc	r21, r21
 daa:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ldexp>
 dae:	0f 90       	pop	r0
 db0:	07 fe       	sbrs	r0, 7
 db2:	0c 94 03 07 	jmp	0xe06	; 0xe06 <inverse>
 db6:	08 95       	ret

00000db8 <__fp_powser>:
 db8:	df 93       	push	r29
 dba:	cf 93       	push	r28
 dbc:	1f 93       	push	r17
 dbe:	0f 93       	push	r16
 dc0:	ff 92       	push	r15
 dc2:	ef 92       	push	r14
 dc4:	df 92       	push	r13
 dc6:	7b 01       	movw	r14, r22
 dc8:	8c 01       	movw	r16, r24
 dca:	68 94       	set
 dcc:	06 c0       	rjmp	.+12     	; 0xdda <__fp_powser+0x22>
 dce:	da 2e       	mov	r13, r26
 dd0:	ef 01       	movw	r28, r30
 dd2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__mulsf3x>
 dd6:	fe 01       	movw	r30, r28
 dd8:	e8 94       	clt
 dda:	a5 91       	lpm	r26, Z+
 ddc:	25 91       	lpm	r18, Z+
 dde:	35 91       	lpm	r19, Z+
 de0:	45 91       	lpm	r20, Z+
 de2:	55 91       	lpm	r21, Z+
 de4:	a6 f3       	brts	.-24     	; 0xdce <__fp_powser+0x16>
 de6:	ef 01       	movw	r28, r30
 de8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__addsf3x>
 dec:	fe 01       	movw	r30, r28
 dee:	97 01       	movw	r18, r14
 df0:	a8 01       	movw	r20, r16
 df2:	da 94       	dec	r13
 df4:	69 f7       	brne	.-38     	; 0xdd0 <__fp_powser+0x18>
 df6:	df 90       	pop	r13
 df8:	ef 90       	pop	r14
 dfa:	ff 90       	pop	r15
 dfc:	0f 91       	pop	r16
 dfe:	1f 91       	pop	r17
 e00:	cf 91       	pop	r28
 e02:	df 91       	pop	r29
 e04:	08 95       	ret

00000e06 <inverse>:
 e06:	9b 01       	movw	r18, r22
 e08:	ac 01       	movw	r20, r24
 e0a:	60 e0       	ldi	r22, 0x00	; 0
 e0c:	70 e0       	ldi	r23, 0x00	; 0
 e0e:	80 e8       	ldi	r24, 0x80	; 128
 e10:	9f e3       	ldi	r25, 0x3F	; 63
 e12:	0c 94 a8 04 	jmp	0x950	; 0x950 <__divsf3>
 e16:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>
 e1a:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_mpack>

00000e1e <ldexp>:
 e1e:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_splitA>
 e22:	d8 f3       	brcs	.-10     	; 0xe1a <inverse+0x14>
 e24:	99 23       	and	r25, r25
 e26:	c9 f3       	breq	.-14     	; 0xe1a <inverse+0x14>
 e28:	94 0f       	add	r25, r20
 e2a:	51 1d       	adc	r21, r1
 e2c:	a3 f3       	brvs	.-24     	; 0xe16 <inverse+0x10>
 e2e:	91 50       	subi	r25, 0x01	; 1
 e30:	50 40       	sbci	r21, 0x00	; 0
 e32:	94 f0       	brlt	.+36     	; 0xe58 <ldexp+0x3a>
 e34:	59 f0       	breq	.+22     	; 0xe4c <ldexp+0x2e>
 e36:	88 23       	and	r24, r24
 e38:	32 f0       	brmi	.+12     	; 0xe46 <ldexp+0x28>
 e3a:	66 0f       	add	r22, r22
 e3c:	77 1f       	adc	r23, r23
 e3e:	88 1f       	adc	r24, r24
 e40:	91 50       	subi	r25, 0x01	; 1
 e42:	50 40       	sbci	r21, 0x00	; 0
 e44:	c1 f7       	brne	.-16     	; 0xe36 <ldexp+0x18>
 e46:	9e 3f       	cpi	r25, 0xFE	; 254
 e48:	51 05       	cpc	r21, r1
 e4a:	2c f7       	brge	.-54     	; 0xe16 <inverse+0x10>
 e4c:	88 0f       	add	r24, r24
 e4e:	91 1d       	adc	r25, r1
 e50:	96 95       	lsr	r25
 e52:	87 95       	ror	r24
 e54:	97 f9       	bld	r25, 7
 e56:	08 95       	ret
 e58:	5f 3f       	cpi	r21, 0xFF	; 255
 e5a:	ac f0       	brlt	.+42     	; 0xe86 <ldexp+0x68>
 e5c:	98 3e       	cpi	r25, 0xE8	; 232
 e5e:	9c f0       	brlt	.+38     	; 0xe86 <ldexp+0x68>
 e60:	bb 27       	eor	r27, r27
 e62:	86 95       	lsr	r24
 e64:	77 95       	ror	r23
 e66:	67 95       	ror	r22
 e68:	b7 95       	ror	r27
 e6a:	08 f4       	brcc	.+2      	; 0xe6e <ldexp+0x50>
 e6c:	b1 60       	ori	r27, 0x01	; 1
 e6e:	93 95       	inc	r25
 e70:	c1 f7       	brne	.-16     	; 0xe62 <ldexp+0x44>
 e72:	bb 0f       	add	r27, r27
 e74:	58 f7       	brcc	.-42     	; 0xe4c <ldexp+0x2e>
 e76:	11 f4       	brne	.+4      	; 0xe7c <ldexp+0x5e>
 e78:	60 ff       	sbrs	r22, 0
 e7a:	e8 cf       	rjmp	.-48     	; 0xe4c <ldexp+0x2e>
 e7c:	6f 5f       	subi	r22, 0xFF	; 255
 e7e:	7f 4f       	sbci	r23, 0xFF	; 255
 e80:	8f 4f       	sbci	r24, 0xFF	; 255
 e82:	9f 4f       	sbci	r25, 0xFF	; 255
 e84:	e3 cf       	rjmp	.-58     	; 0xe4c <ldexp+0x2e>
 e86:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__fp_szero>
 e8a:	16 f0       	brts	.+4      	; 0xe90 <ldexp+0x72>
 e8c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__fp_mpack>
 e90:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__fp_nan>
 e94:	68 94       	set
 e96:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__fp_inf>

00000e9a <log>:
 e9a:	0e 94 c4 05 	call	0xb88	; 0xb88 <__fp_splitA>
 e9e:	a8 f3       	brcs	.-22     	; 0xe8a <ldexp+0x6c>
 ea0:	99 23       	and	r25, r25
 ea2:	c1 f3       	breq	.-16     	; 0xe94 <ldexp+0x76>
 ea4:	ae f3       	brts	.-22     	; 0xe90 <ldexp+0x72>
 ea6:	df 93       	push	r29
 ea8:	cf 93       	push	r28
 eaa:	1f 93       	push	r17
 eac:	0f 93       	push	r16
 eae:	ff 92       	push	r15
 eb0:	c9 2f       	mov	r28, r25
 eb2:	dd 27       	eor	r29, r29
 eb4:	88 23       	and	r24, r24
 eb6:	2a f0       	brmi	.+10     	; 0xec2 <log+0x28>
 eb8:	21 97       	sbiw	r28, 0x01	; 1
 eba:	66 0f       	add	r22, r22
 ebc:	77 1f       	adc	r23, r23
 ebe:	88 1f       	adc	r24, r24
 ec0:	da f7       	brpl	.-10     	; 0xeb8 <log+0x1e>
 ec2:	20 e0       	ldi	r18, 0x00	; 0
 ec4:	30 e0       	ldi	r19, 0x00	; 0
 ec6:	40 e8       	ldi	r20, 0x80	; 128
 ec8:	5f eb       	ldi	r21, 0xBF	; 191
 eca:	9f e3       	ldi	r25, 0x3F	; 63
 ecc:	88 39       	cpi	r24, 0x98	; 152
 ece:	20 f0       	brcs	.+8      	; 0xed8 <log+0x3e>
 ed0:	80 3e       	cpi	r24, 0xE0	; 224
 ed2:	38 f0       	brcs	.+14     	; 0xee2 <log+0x48>
 ed4:	21 96       	adiw	r28, 0x01	; 1
 ed6:	8f 77       	andi	r24, 0x7F	; 127
 ed8:	0e 94 3c 04 	call	0x878	; 0x878 <__addsf3>
 edc:	ec e7       	ldi	r30, 0x7C	; 124
 ede:	f0 e0       	ldi	r31, 0x00	; 0
 ee0:	04 c0       	rjmp	.+8      	; 0xeea <log+0x50>
 ee2:	0e 94 3c 04 	call	0x878	; 0x878 <__addsf3>
 ee6:	e9 ea       	ldi	r30, 0xA9	; 169
 ee8:	f0 e0       	ldi	r31, 0x00	; 0
 eea:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <__fp_powser>
 eee:	8b 01       	movw	r16, r22
 ef0:	be 01       	movw	r22, r28
 ef2:	ec 01       	movw	r28, r24
 ef4:	fb 2e       	mov	r15, r27
 ef6:	6f 57       	subi	r22, 0x7F	; 127
 ef8:	71 09       	sbc	r23, r1
 efa:	75 95       	asr	r23
 efc:	77 1f       	adc	r23, r23
 efe:	88 0b       	sbc	r24, r24
 f00:	99 0b       	sbc	r25, r25
 f02:	0e 94 4b 05 	call	0xa96	; 0xa96 <__floatsisf>
 f06:	28 e1       	ldi	r18, 0x18	; 24
 f08:	32 e7       	ldi	r19, 0x72	; 114
 f0a:	41 e3       	ldi	r20, 0x31	; 49
 f0c:	5f e3       	ldi	r21, 0x3F	; 63
 f0e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__mulsf3x>
 f12:	af 2d       	mov	r26, r15
 f14:	98 01       	movw	r18, r16
 f16:	ae 01       	movw	r20, r28
 f18:	ff 90       	pop	r15
 f1a:	0f 91       	pop	r16
 f1c:	1f 91       	pop	r17
 f1e:	cf 91       	pop	r28
 f20:	df 91       	pop	r29
 f22:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__addsf3x>
 f26:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_round>

00000f2a <modf>:
 f2a:	fa 01       	movw	r30, r20
 f2c:	dc 01       	movw	r26, r24
 f2e:	aa 0f       	add	r26, r26
 f30:	bb 1f       	adc	r27, r27
 f32:	9b 01       	movw	r18, r22
 f34:	ac 01       	movw	r20, r24
 f36:	bf 57       	subi	r27, 0x7F	; 127
 f38:	28 f4       	brcc	.+10     	; 0xf44 <modf+0x1a>
 f3a:	22 27       	eor	r18, r18
 f3c:	33 27       	eor	r19, r19
 f3e:	44 27       	eor	r20, r20
 f40:	50 78       	andi	r21, 0x80	; 128
 f42:	20 c0       	rjmp	.+64     	; 0xf84 <modf+0x5a>
 f44:	b7 51       	subi	r27, 0x17	; 23
 f46:	90 f4       	brcc	.+36     	; 0xf6c <modf+0x42>
 f48:	ab 2f       	mov	r26, r27
 f4a:	00 24       	eor	r0, r0
 f4c:	46 95       	lsr	r20
 f4e:	37 95       	ror	r19
 f50:	27 95       	ror	r18
 f52:	01 1c       	adc	r0, r1
 f54:	a3 95       	inc	r26
 f56:	d2 f3       	brmi	.-12     	; 0xf4c <modf+0x22>
 f58:	00 20       	and	r0, r0
 f5a:	71 f0       	breq	.+28     	; 0xf78 <modf+0x4e>
 f5c:	22 0f       	add	r18, r18
 f5e:	33 1f       	adc	r19, r19
 f60:	44 1f       	adc	r20, r20
 f62:	b3 95       	inc	r27
 f64:	da f3       	brmi	.-10     	; 0xf5c <modf+0x32>
 f66:	0e d0       	rcall	.+28     	; 0xf84 <modf+0x5a>
 f68:	0c 94 3b 04 	jmp	0x876	; 0x876 <__subsf3>
 f6c:	61 30       	cpi	r22, 0x01	; 1
 f6e:	71 05       	cpc	r23, r1
 f70:	a0 e8       	ldi	r26, 0x80	; 128
 f72:	8a 07       	cpc	r24, r26
 f74:	b9 46       	sbci	r27, 0x69	; 105
 f76:	30 f4       	brcc	.+12     	; 0xf84 <modf+0x5a>
 f78:	9b 01       	movw	r18, r22
 f7a:	ac 01       	movw	r20, r24
 f7c:	66 27       	eor	r22, r22
 f7e:	77 27       	eor	r23, r23
 f80:	88 27       	eor	r24, r24
 f82:	90 78       	andi	r25, 0x80	; 128
 f84:	30 96       	adiw	r30, 0x00	; 0
 f86:	21 f0       	breq	.+8      	; 0xf90 <modf+0x66>
 f88:	20 83       	st	Z, r18
 f8a:	31 83       	std	Z+1, r19	; 0x01
 f8c:	42 83       	std	Z+2, r20	; 0x02
 f8e:	53 83       	std	Z+3, r21	; 0x03
 f90:	08 95       	ret

00000f92 <_exit>:
 f92:	f8 94       	cli

00000f94 <__stop_program>:
 f94:	ff cf       	rjmp	.-2      	; 0xf94 <__stop_program>
