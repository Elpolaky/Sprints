
sprints.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f16  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000f8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000f8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f7b  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4b  00000000  00000000  00003133  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001258  00000000  00000000  00003c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  00004ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d1  00000000  00000000  0000534c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001576  00000000  00000000  00005c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00007193  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
   4:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_1>
   8:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_2>
   c:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_3>
  10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
  54:	07 63       	ori	r16, 0x37	; 55
  56:	42 36       	cpi	r20, 0x62	; 98
  58:	b7 9b       	sbis	0x16, 7	; 22
  5a:	d8 a7       	std	Y+40, r29	; 0x28
  5c:	1a 39       	cpi	r17, 0x9A	; 154
  5e:	68 56       	subi	r22, 0x68	; 104
  60:	18 ae       	std	Y+56, r1	; 0x38
  62:	ba ab       	std	Y+50, r27	; 0x32
  64:	55 8c       	ldd	r5, Z+29	; 0x1d
  66:	1d 3c       	cpi	r17, 0xCD	; 205
  68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
  6a:	57 63       	ori	r21, 0x37	; 55
  6c:	bd 6d       	ori	r27, 0xDD	; 221
  6e:	ed fd       	.word	0xfded	; ????
  70:	75 3e       	cpi	r23, 0xE5	; 229
  72:	f6 17       	cp	r31, r22
  74:	72 31       	cpi	r23, 0x12	; 18
  76:	bf 00       	.word	0x00bf	; ????
  78:	00 00       	nop
  7a:	80 3f       	cpi	r24, 0xF0	; 240
  7c:	08 00       	.word	0x0008	; ????
  7e:	00 00       	nop
  80:	be 92       	st	-X, r11
  82:	24 49       	sbci	r18, 0x94	; 148
  84:	12 3e       	cpi	r17, 0xE2	; 226
  86:	ab aa       	std	Y+51, r10	; 0x33
  88:	aa 2a       	or	r10, r26
  8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
  8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
  8e:	4c 3e       	cpi	r20, 0xEC	; 236
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	be ab       	std	Y+54, r27	; 0x36
  96:	aa aa       	std	Y+50, r10	; 0x32
  98:	aa 3e       	cpi	r26, 0xEA	; 234
  9a:	00 00       	nop
  9c:	00 00       	nop
  9e:	bf 00       	.word	0x00bf	; ????
  a0:	00 00       	nop
  a2:	80 3f       	cpi	r24, 0xF0	; 240
  a4:	00 00       	nop
  a6:	00 00       	nop
  a8:	00 08       	sbc	r0, r0
  aa:	41 78       	andi	r20, 0x81	; 129
  ac:	d3 bb       	out	0x13, r29	; 19
  ae:	43 87       	std	Z+11, r20	; 0x0b
  b0:	d1 13       	cpse	r29, r17
  b2:	3d 19       	sub	r19, r13
  b4:	0e 3c       	cpi	r16, 0xCE	; 206
  b6:	c3 bd       	out	0x23, r28	; 35
  b8:	42 82       	std	Z+2, r4	; 0x02
  ba:	ad 2b       	or	r26, r29
  bc:	3e 68       	ori	r19, 0x8E	; 142
  be:	ec 82       	std	Y+4, r14	; 0x04
  c0:	76 be       	out	0x36, r7	; 54
  c2:	d9 8f       	std	Y+25, r29	; 0x19
  c4:	e1 a9       	ldd	r30, Z+49	; 0x31
  c6:	3e 4c       	sbci	r19, 0xCE	; 206
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	ff be       	out	0x3f, r15	; 63
  cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__divsf3>
  ce:	ff 7f       	andi	r31, 0xFF	; 255
  d0:	3f 00       	.word	0x003f	; ????
  d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
  d6:	11 24       	eor	r1, r1
  d8:	1f be       	out	0x3f, r1	; 63
  da:	cf e5       	ldi	r28, 0x5F	; 95
  dc:	d8 e0       	ldi	r29, 0x08	; 8
  de:	de bf       	out	0x3e, r29	; 62
  e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	a0 e6       	ldi	r26, 0x60	; 96
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e6 e1       	ldi	r30, 0x16	; 22
  ea:	ff e0       	ldi	r31, 0x0F	; 15
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
  ee:	05 90       	lpm	r0, Z+
  f0:	0d 92       	st	X+, r0
  f2:	a0 36       	cpi	r26, 0x60	; 96
  f4:	b1 07       	cpc	r27, r17
  f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	a0 e6       	ldi	r26, 0x60	; 96
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
 100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
 102:	a6 36       	cpi	r26, 0x66	; 102
 104:	b2 07       	cpc	r27, r18
 106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
 108:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
 10c:	0c 94 89 07 	jmp	0xf12	; 0xf12 <_exit>

00000110 <__bad_interrupt>:
 110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <app_init>:
uint8_t bell2[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x10 ,0x00};
uint8_t bell3[8] = {0x04, 0x0E ,0x0E ,0x0E ,0x1f ,0x00 ,0x01 ,0x00};

uint8_t key;
void app_init(void){
LCD_4_Bit_init();
 114:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCD_4_Bit_init>
I2C_init(I2C_PRESCALER_1);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 0b 03 	call	0x616	; 0x616 <I2C_init>
 11e:	08 95       	ret

00000120 <app_start>:
}


void app_start(){
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	00 d0       	rcall	.+0      	; 0x126 <app_start+0x6>
 126:	1f 92       	push	r1
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	uint8_t data ='a' ;
 12c:	81 e6       	ldi	r24, 0x61	; 97
 12e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t data2 =0 ;
 130:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t ad1 = 0x00 ;
 132:	1b 82       	std	Y+3, r1	; 0x03

EEPROM_Write(&data , &ad1);
 134:	be 01       	movw	r22, r28
 136:	6d 5f       	subi	r22, 0xFD	; 253
 138:	7f 4f       	sbci	r23, 0xFF	; 255
 13a:	ce 01       	movw	r24, r28
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	0e 94 c3 03 	call	0x786	; 0x786 <EEPROM_Write>

EEPROM_Read(&data2 ,&ad1);
 142:	be 01       	movw	r22, r28
 144:	6d 5f       	subi	r22, 0xFD	; 253
 146:	7f 4f       	sbci	r23, 0xFF	; 255
 148:	ce 01       	movw	r24, r28
 14a:	02 96       	adiw	r24, 0x02	; 2
 14c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <EEPROM_Read>

LCD_4_Bit_SendChar(data2);
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_4_Bit_SendChar>
	}

*/
	
//	LCD_4_Bit_Clear();
	}
 158:	0f 90       	pop	r0
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <LCD_4_Bit_SendCommand>:
	LCD_4_Bit_SendCommand(DISPLAY_ON_CURSOR_OFF);
	//LCD_4_Bit_SendCommand(INCREMENT_CURSOR);
	LCD_4_Bit_SendCommand(CLEAR_DISPLAY);
}

void LCD_4_Bit_SendCommand(uint8_t a_cmd){
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
	LCD_REG_DATA_PORT = (LCD_REG_DATA_PORT & 0x0f) | (a_cmd & 0xf0);
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	9c 2f       	mov	r25, r28
 16e:	90 7f       	andi	r25, 0xF0	; 240
 170:	89 2b       	or	r24, r25
 172:	85 bb       	out	0x15, r24	; 21
	DIO_write(lcd_dio_cmd_port,RS,LOW);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
	DIO_write(lcd_dio_cmd_port,RW,LOW);
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
	DIO_write(lcd_dio_cmd_port,EN,HIGH);
 188:	41 e0       	ldi	r20, 0x01	; 1
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	00 00       	nop
	_delay_us(1);
	DIO_write(lcd_dio_cmd_port,EN,LOW);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
 19e:	32 e4       	ldi	r19, 0x42	; 66
 1a0:	3a 95       	dec	r19
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_4_Bit_SendCommand+0x3c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_4_Bit_SendCommand+0x42>
	_delay_us(200);
	
	LCD_REG_DATA_PORT = (LCD_REG_DATA_PORT & 0x0f) | (a_cmd << 4);
 1a6:	25 b3       	in	r18, 0x15	; 21
 1a8:	30 e1       	ldi	r19, 0x10	; 16
 1aa:	c3 9f       	mul	r28, r19
 1ac:	c0 01       	movw	r24, r0
 1ae:	11 24       	eor	r1, r1
 1b0:	92 2f       	mov	r25, r18
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	89 2b       	or	r24, r25
 1b6:	85 bb       	out	0x15, r24	; 21
	DIO_write(lcd_dio_cmd_port,RS,LOW);
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
	DIO_write(lcd_dio_cmd_port,RW,LOW);
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
	DIO_write(lcd_dio_cmd_port,EN,HIGH);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
 1d6:	00 00       	nop
	_delay_us(1);
	DIO_write(lcd_dio_cmd_port,EN,LOW);
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	62 e0       	ldi	r22, 0x02	; 2
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	8d ee       	ldi	r24, 0xED	; 237
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_4_Bit_SendCommand+0x82>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_4_Bit_SendCommand+0x88>
 1ec:	00 00       	nop
	_delay_ms(3);
}
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <LCD_4_Bit_init>:
	LCD_8_Bit_SendCommand(CURSOR_HOME_POSITION);

}


void LCD_4_Bit_init(void){
 1f2:	cf 93       	push	r28
	
	for (uint8_t data_pins = 4 ; data_pins < 8 ; data_pins++)
 1f4:	c4 e0       	ldi	r28, 0x04	; 4
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <LCD_4_Bit_init+0x12>
	{
		DIO_init(lcd__dio_data_port,data_pins,OUTPUT);
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	6c 2f       	mov	r22, r28
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_init>
}


void LCD_4_Bit_init(void){
	
	for (uint8_t data_pins = 4 ; data_pins < 8 ; data_pins++)
 202:	cf 5f       	subi	r28, 0xFF	; 255
 204:	c8 30       	cpi	r28, 0x08	; 8
 206:	c0 f3       	brcs	.-16     	; 0x1f8 <LCD_4_Bit_init+0x6>
	{
		DIO_init(lcd__dio_data_port,data_pins,OUTPUT);
	}
	
	
	DIO_init(lcd_dio_cmd_port,RS,OUTPUT);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_init>
	DIO_init(lcd_dio_cmd_port,RW,OUTPUT);
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	61 e0       	ldi	r22, 0x01	; 1
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_init>
	DIO_init(lcd_dio_cmd_port,EN,OUTPUT);
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_init>
 226:	87 e8       	ldi	r24, 0x87	; 135
 228:	93 e1       	ldi	r25, 0x13	; 19
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_4_Bit_init+0x38>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_4_Bit_init+0x3e>
 230:	00 00       	nop
	 _delay_ms(20);
	LCD_4_Bit_SendCommand(LCD_4_BIT_MODE);
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_4_Bit_SendCommand>
	LCD_4_Bit_SendCommand(LCD_16_2_INIT_4_BIT);
 238:	88 e2       	ldi	r24, 0x28	; 40
 23a:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_4_Bit_SendCommand>
	LCD_4_Bit_SendCommand(DISPLAY_ON_CURSOR_OFF);
 23e:	8c e0       	ldi	r24, 0x0C	; 12
 240:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_4_Bit_SendCommand>
	//LCD_4_Bit_SendCommand(INCREMENT_CURSOR);
	LCD_4_Bit_SendCommand(CLEAR_DISPLAY);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_4_Bit_SendCommand>
}
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <LCD_4_Bit_SendChar>:
	_delay_ms(3);
}



void LCD_4_Bit_SendChar(uint8_t a_char){
 24e:	cf 93       	push	r28
	if(a_char!=0){
 250:	88 23       	and	r24, r24
 252:	09 f4       	brne	.+2      	; 0x256 <LCD_4_Bit_SendChar+0x8>
 254:	44 c0       	rjmp	.+136    	; 0x2de <LCD_4_Bit_SendChar+0x90>
 256:	c8 2f       	mov	r28, r24
		LCD_REG_DATA_PORT = (LCD_REG_DATA_PORT & 0x0f) | (a_char & 0xf0);
 258:	85 b3       	in	r24, 0x15	; 21
 25a:	8f 70       	andi	r24, 0x0F	; 15
 25c:	9c 2f       	mov	r25, r28
 25e:	90 7f       	andi	r25, 0xF0	; 240
 260:	89 2b       	or	r24, r25
 262:	85 bb       	out	0x15, r24	; 21
		DIO_write(lcd_dio_cmd_port,RS,HIGH);
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
		DIO_write(lcd_dio_cmd_port,RW,LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
		DIO_write(lcd_dio_cmd_port,EN,HIGH);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	00 00       	nop
		_delay_us(1);
		DIO_write(lcd_dio_cmd_port,EN,LOW);
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
 28e:	32 e4       	ldi	r19, 0x42	; 66
 290:	3a 95       	dec	r19
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_4_Bit_SendChar+0x42>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_4_Bit_SendChar+0x48>
		_delay_us(200);
	
		LCD_REG_DATA_PORT = (LCD_REG_DATA_PORT & 0x0f) | (a_char << 4);
 296:	25 b3       	in	r18, 0x15	; 21
 298:	30 e1       	ldi	r19, 0x10	; 16
 29a:	c3 9f       	mul	r28, r19
 29c:	c0 01       	movw	r24, r0
 29e:	11 24       	eor	r1, r1
 2a0:	92 2f       	mov	r25, r18
 2a2:	9f 70       	andi	r25, 0x0F	; 15
 2a4:	89 2b       	or	r24, r25
 2a6:	85 bb       	out	0x15, r24	; 21
		DIO_write(lcd_dio_cmd_port,RS,HIGH);
 2a8:	41 e0       	ldi	r20, 0x01	; 1
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
		DIO_write(lcd_dio_cmd_port,RW,LOW);
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	83 e0       	ldi	r24, 0x03	; 3
 2b8:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
		DIO_write(lcd_dio_cmd_port,EN,HIGH);
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	83 e0       	ldi	r24, 0x03	; 3
 2c2:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
 2c6:	00 00       	nop
		_delay_us(1);
		DIO_write(lcd_dio_cmd_port,EN,LOW);
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	83 ef       	ldi	r24, 0xF3	; 243
 2d4:	91 e0       	ldi	r25, 0x01	; 1
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_4_Bit_SendChar+0x88>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_4_Bit_SendChar+0x8e>
 2dc:	00 00       	nop
		_delay_ms(2);
	
	}
}
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <main>:


 
int main(void)
{
	app_init();
 2e2:	0e 94 8a 00 	call	0x114	; 0x114 <app_init>
	

	app_start();
 2e6:	0e 94 90 00 	call	0x120	; 0x120 <app_start>

		

		
	
}
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret

000002f0 <DIO_init>:
#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 2f0:	68 30       	cpi	r22, 0x08	; 8
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <DIO_init+0x6>
 2f4:	80 c0       	rjmp	.+256    	; 0x3f6 <DIO_init+0x106>
		loc_ErrorStatus = Dio_PinError ;
	}
	else{	
		switch (PortNum)
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	31 f1       	breq	.+76     	; 0x346 <DIO_init+0x56>
 2fa:	38 f0       	brcs	.+14     	; 0x30a <DIO_init+0x1a>
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	09 f4       	brne	.+2      	; 0x302 <DIO_init+0x12>
 300:	40 c0       	rjmp	.+128    	; 0x382 <DIO_init+0x92>
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	09 f4       	brne	.+2      	; 0x308 <DIO_init+0x18>
 306:	5a c0       	rjmp	.+180    	; 0x3bc <DIO_init+0xcc>
 308:	78 c0       	rjmp	.+240    	; 0x3fa <DIO_init+0x10a>
		{

			case PORT_A :
					if (direction == INPUT)
 30a:	41 11       	cpse	r20, r1
 30c:	0d c0       	rjmp	.+26     	; 0x328 <DIO_init+0x38>
					{
						CLR_BIT(DDRA,PinNum);
 30e:	2a b3       	in	r18, 0x1a	; 26
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_init+0x2a>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_init+0x26>
 31e:	80 95       	com	r24
 320:	82 23       	and	r24, r18
 322:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret

			case PORT_A :
					if (direction == INPUT)
					{
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
 328:	41 30       	cpi	r20, 0x01	; 1
 32a:	09 f0       	breq	.+2      	; 0x32e <DIO_init+0x3e>
 32c:	68 c0       	rjmp	.+208    	; 0x3fe <DIO_init+0x10e>
						SET_BIT(DDRA,PinNum);
 32e:	2a b3       	in	r18, 0x1a	; 26
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_init+0x4a>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_init+0x46>
 33e:	82 2b       	or	r24, r18
 340:	8a bb       	out	0x1a, r24	; 26
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
					}
					break;
		
		
			case PORT_B :
					if (direction == INPUT)
 346:	41 11       	cpse	r20, r1
 348:	0d c0       	rjmp	.+26     	; 0x364 <DIO_init+0x74>
					{
						CLR_BIT(DDRB,PinNum);
 34a:	27 b3       	in	r18, 0x17	; 23
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_init+0x66>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_init+0x62>
 35a:	80 95       	com	r24
 35c:	82 23       	and	r24, r18
 35e:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	08 95       	ret
		
			case PORT_B :
					if (direction == INPUT)
					{
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
 364:	41 30       	cpi	r20, 0x01	; 1
 366:	09 f0       	breq	.+2      	; 0x36a <DIO_init+0x7a>
 368:	4c c0       	rjmp	.+152    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
						SET_BIT(DDRB,PinNum);
 36a:	27 b3       	in	r18, 0x17	; 23
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_init+0x86>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_init+0x82>
 37a:	82 2b       	or	r24, r18
 37c:	87 bb       	out	0x17, r24	; 23
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	08 95       	ret
					break;
		
		
		
			case PORT_C :
					if (direction == INPUT)
 382:	41 11       	cpse	r20, r1
 384:	0d c0       	rjmp	.+26     	; 0x3a0 <DIO_init+0xb0>
					{
						CLR_BIT(DDRC,PinNum);
 386:	24 b3       	in	r18, 0x14	; 20
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_init+0xa2>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_init+0x9e>
 396:	80 95       	com	r24
 398:	82 23       	and	r24, r18
 39a:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 95       	ret
		
			case PORT_C :
					if (direction == INPUT)
					{
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
 3a0:	41 30       	cpi	r20, 0x01	; 1
 3a2:	89 f5       	brne	.+98     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
						SET_BIT(DDRC,PinNum);
 3a4:	24 b3       	in	r18, 0x14	; 20
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_init+0xc0>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_init+0xbc>
 3b4:	82 2b       	or	r24, r18
 3b6:	84 bb       	out	0x14, r24	; 20
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
					break;
		
		
		
			case PORT_D :
					if (direction == INPUT)
 3bc:	41 11       	cpse	r20, r1
 3be:	0d c0       	rjmp	.+26     	; 0x3da <DIO_init+0xea>
					{
						CLR_BIT(DDRD,PinNum);
 3c0:	21 b3       	in	r18, 0x11	; 17
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_init+0xdc>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_init+0xd8>
 3d0:	80 95       	com	r24
 3d2:	82 23       	and	r24, r18
 3d4:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
		
			case PORT_D :
					if (direction == INPUT)
					{
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
 3da:	41 30       	cpi	r20, 0x01	; 1
 3dc:	b1 f4       	brne	.+44     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
						SET_BIT(DDRD,PinNum);
 3de:	21 b3       	in	r18, 0x11	; 17
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_init+0xfa>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_init+0xf6>
 3ee:	82 2b       	or	r24, r18
 3f0:	81 bb       	out	0x11, r24	; 17
 */ 

#include "dio.h"

Dio_ErrorStatus DIO_init(PORT_NUM PortNum, PIN_NUM PinNum , PIN_DIR direction){
	Dio_ErrorStatus loc_ErrorStatus = Dio_Ok;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_ErrorStatus = Dio_PinError ;
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	08 95       	ret
					}
					break;
		
			default:
			//error handling
					loc_ErrorStatus = Dio_PortError;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	08 95       	ret
						CLR_BIT(DDRA,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRA,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	08 95       	ret
						CLR_BIT(DDRB,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRB,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 402:	84 e0       	ldi	r24, 0x04	; 4
 404:	08 95       	ret
						CLR_BIT(DDRC,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRC,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 406:	84 e0       	ldi	r24, 0x04	; 4
 408:	08 95       	ret
						CLR_BIT(DDRD,PinNum);
					}else if ( direction == OUTPUT){
						SET_BIT(DDRD,PinNum);
					}else{
						// error handling
						loc_ErrorStatus = Dio_DirectionError;
 40a:	84 e0       	ldi	r24, 0x04	; 4
		}
					}
	
	return loc_ErrorStatus ;

}
 40c:	08 95       	ret

0000040e <DIO_write>:


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
 40e:	68 30       	cpi	r22, 0x08	; 8
 410:	08 f0       	brcs	.+2      	; 0x414 <DIO_write+0x6>
 412:	80 c0       	rjmp	.+256    	; 0x514 <DIO_write+0x106>
		loc_errorStatus = Dio_PinError ;
	}
	else{
		switch (PortNum)
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	31 f1       	breq	.+76     	; 0x464 <DIO_write+0x56>
 418:	38 f0       	brcs	.+14     	; 0x428 <DIO_write+0x1a>
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	09 f4       	brne	.+2      	; 0x420 <DIO_write+0x12>
 41e:	40 c0       	rjmp	.+128    	; 0x4a0 <DIO_write+0x92>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	09 f4       	brne	.+2      	; 0x426 <DIO_write+0x18>
 424:	5a c0       	rjmp	.+180    	; 0x4da <DIO_write+0xcc>
 426:	78 c0       	rjmp	.+240    	; 0x518 <DIO_write+0x10a>
		{
			case PORT_A :
			
					if (value == LOW)
 428:	41 11       	cpse	r20, r1
 42a:	0d c0       	rjmp	.+26     	; 0x446 <DIO_write+0x38>
					{
						CLR_BIT(PORTA,PinNum);
 42c:	2b b3       	in	r18, 0x1b	; 27
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_write+0x2a>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_write+0x26>
 43c:	80 95       	com	r24
 43e:	82 23       	and	r24, r18
 440:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 95       	ret
			
					if (value == LOW)
					{
						CLR_BIT(PORTA,PinNum);
			
					}else if ( value == HIGH){
 446:	41 30       	cpi	r20, 0x01	; 1
 448:	09 f0       	breq	.+2      	; 0x44c <DIO_write+0x3e>
 44a:	68 c0       	rjmp	.+208    	; 0x51c <DIO_write+0x10e>
			
						SET_BIT(PORTA,PinNum);
 44c:	2b b3       	in	r18, 0x1b	; 27
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_write+0x4a>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	6a 95       	dec	r22
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_write+0x46>
 45c:	82 2b       	or	r24, r18
 45e:	8b bb       	out	0x1b, r24	; 27

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_B :
					if (value == LOW)
 464:	41 11       	cpse	r20, r1
 466:	0d c0       	rjmp	.+26     	; 0x482 <DIO_write+0x74>
					{
						CLR_BIT(PORTB,PinNum);
 468:	28 b3       	in	r18, 0x18	; 24
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_write+0x66>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_write+0x62>
 478:	80 95       	com	r24
 47a:	82 23       	and	r24, r18
 47c:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 95       	ret
			case PORT_B :
					if (value == LOW)
					{
						CLR_BIT(PORTB,PinNum);
			
					}else if ( value == HIGH){
 482:	41 30       	cpi	r20, 0x01	; 1
 484:	09 f0       	breq	.+2      	; 0x488 <DIO_write+0x7a>
 486:	4c c0       	rjmp	.+152    	; 0x520 <DIO_write+0x112>
			
						SET_BIT(PORTB,PinNum);
 488:	28 b3       	in	r18, 0x18	; 24
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_write+0x86>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_write+0x82>
 498:	82 2b       	or	r24, r18
 49a:	88 bb       	out	0x18, r24	; 24

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_C :
					if (value == LOW)
 4a0:	41 11       	cpse	r20, r1
 4a2:	0d c0       	rjmp	.+26     	; 0x4be <DIO_write+0xb0>
					{
						CLR_BIT(PORTC,PinNum);
 4a4:	25 b3       	in	r18, 0x15	; 21
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_write+0xa2>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_write+0x9e>
 4b4:	80 95       	com	r24
 4b6:	82 23       	and	r24, r18
 4b8:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	08 95       	ret
			case PORT_C :
					if (value == LOW)
					{
						CLR_BIT(PORTC,PinNum);
			
					}else if ( value == HIGH){
 4be:	41 30       	cpi	r20, 0x01	; 1
 4c0:	89 f5       	brne	.+98     	; 0x524 <DIO_write+0x116>
			
						SET_BIT(PORTC,PinNum);
 4c2:	25 b3       	in	r18, 0x15	; 21
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_write+0xc0>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_write+0xbc>
 4d2:	82 2b       	or	r24, r18
 4d4:	85 bb       	out	0x15, r24	; 21

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	08 95       	ret
						loc_errorStatus = Dio_ValueError ;
					}
					break;
		
			case PORT_D :
					if (value == LOW)
 4da:	41 11       	cpse	r20, r1
 4dc:	0d c0       	rjmp	.+26     	; 0x4f8 <DIO_write+0xea>
					{
						CLR_BIT(PORTD,PinNum);
 4de:	22 b3       	in	r18, 0x12	; 18
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_write+0xdc>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_write+0xd8>
 4ee:	80 95       	com	r24
 4f0:	82 23       	and	r24, r18
 4f2:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	08 95       	ret
			case PORT_D :
					if (value == LOW)
					{
						CLR_BIT(PORTD,PinNum);
			
					}else if ( value == HIGH){
 4f8:	41 30       	cpi	r20, 0x01	; 1
 4fa:	b1 f4       	brne	.+44     	; 0x528 <DIO_write+0x11a>
			
						SET_BIT(PORTD,PinNum);
 4fc:	22 b3       	in	r18, 0x12	; 18
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_write+0xfa>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_write+0xf6>
 50c:	82 2b       	or	r24, r18
 50e:	82 bb       	out	0x12, r24	; 18

}


Dio_ErrorStatus DIO_write(PORT_NUM PortNum, PIN_NUM PinNum , VALUE value){
	Dio_ErrorStatus loc_errorStatus = Dio_Ok ;
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	08 95       	ret
	
	if(PinNum<PIN_0 || PinNum>PIN_7){
		loc_errorStatus = Dio_PinError ;
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	08 95       	ret
					break;
		
		
			default:
			//error handling
				loc_errorStatus = Dio_PortError ;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTA,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 51c:	83 e0       	ldi	r24, 0x03	; 3
 51e:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTB,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	08 95       	ret
					}else if ( value == HIGH){
			
						SET_BIT(PORTC,PinNum);
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 524:	83 e0       	ldi	r24, 0x03	; 3
 526:	08 95       	ret
			
						SET_BIT(PORTD,PinNum);
			
					}else{
						// error handling
						loc_errorStatus = Dio_ValueError ;
 528:	83 e0       	ldi	r24, 0x03	; 3
				break;
		
				}
		}
	return loc_errorStatus;
	}
 52a:	08 95       	ret

0000052c <__vector_1>:
//					 ISR FUNCTION
/***************************************************/
 
/**********  ISR OF INT_0  ************/

ISR(EXT_INT_0){
 52c:	1f 92       	push	r1
 52e:	0f 92       	push	r0
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	0f 92       	push	r0
 534:	11 24       	eor	r1, r1
 536:	2f 93       	push	r18
 538:	3f 93       	push	r19
 53a:	4f 93       	push	r20
 53c:	5f 93       	push	r21
 53e:	6f 93       	push	r22
 540:	7f 93       	push	r23
 542:	8f 93       	push	r24
 544:	9f 93       	push	r25
 546:	af 93       	push	r26
 548:	bf 93       	push	r27
 54a:	ef 93       	push	r30
 54c:	ff 93       	push	r31

	
		P0_CallbackFunction();
 54e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <P0_CallbackFunction>
 552:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <P0_CallbackFunction+0x1>
 556:	09 95       	icall
	
	
}
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_2>:


/**********  ISR OF INT_1  ************/

ISR(EXT_INT_1){
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	ef 93       	push	r30
 59a:	ff 93       	push	r31

	
		P1_CallbackFunction();
 59c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <P1_CallbackFunction>
 5a0:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <P1_CallbackFunction+0x1>
 5a4:	09 95       	icall
	
	
}
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <__vector_3>:


/**********  ISR OF INT_2  ************/

ISR(EXT_INT_2){
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	2f 93       	push	r18
 5d4:	3f 93       	push	r19
 5d6:	4f 93       	push	r20
 5d8:	5f 93       	push	r21
 5da:	6f 93       	push	r22
 5dc:	7f 93       	push	r23
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	af 93       	push	r26
 5e4:	bf 93       	push	r27
 5e6:	ef 93       	push	r30
 5e8:	ff 93       	push	r31

	
		P2_CallbackFunction();
 5ea:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5ee:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5f2:	09 95       	icall
	
	
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	bf 91       	pop	r27
 5fa:	af 91       	pop	r26
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	7f 91       	pop	r23
 602:	6f 91       	pop	r22
 604:	5f 91       	pop	r21
 606:	4f 91       	pop	r20
 608:	3f 91       	pop	r19
 60a:	2f 91       	pop	r18
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <I2C_init>:
		}else {
			
			return START_NOT_SENT ;
		}
		
}
 616:	11 b8       	out	0x01, r1	; 1
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	69 f0       	breq	.+26     	; 0x636 <I2C_init+0x20>
 61c:	28 f0       	brcs	.+10     	; 0x628 <I2C_init+0x12>
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	89 f0       	breq	.+34     	; 0x644 <I2C_init+0x2e>
 622:	83 30       	cpi	r24, 0x03	; 3
 624:	b1 f0       	breq	.+44     	; 0x652 <I2C_init+0x3c>
 626:	1b c0       	rjmp	.+54     	; 0x65e <I2C_init+0x48>
 628:	81 b1       	in	r24, 0x01	; 1
 62a:	8e 7f       	andi	r24, 0xFE	; 254
 62c:	81 b9       	out	0x01, r24	; 1
 62e:	81 b1       	in	r24, 0x01	; 1
 630:	8d 7f       	andi	r24, 0xFD	; 253
 632:	81 b9       	out	0x01, r24	; 1
 634:	14 c0       	rjmp	.+40     	; 0x65e <I2C_init+0x48>
 636:	81 b1       	in	r24, 0x01	; 1
 638:	81 60       	ori	r24, 0x01	; 1
 63a:	81 b9       	out	0x01, r24	; 1
 63c:	81 b1       	in	r24, 0x01	; 1
 63e:	8d 7f       	andi	r24, 0xFD	; 253
 640:	81 b9       	out	0x01, r24	; 1
 642:	0d c0       	rjmp	.+26     	; 0x65e <I2C_init+0x48>
 644:	81 b1       	in	r24, 0x01	; 1
 646:	8e 7f       	andi	r24, 0xFE	; 254
 648:	81 b9       	out	0x01, r24	; 1
 64a:	81 b1       	in	r24, 0x01	; 1
 64c:	82 60       	ori	r24, 0x02	; 2
 64e:	81 b9       	out	0x01, r24	; 1
 650:	06 c0       	rjmp	.+12     	; 0x65e <I2C_init+0x48>
 652:	81 b1       	in	r24, 0x01	; 1
 654:	81 60       	ori	r24, 0x01	; 1
 656:	81 b9       	out	0x01, r24	; 1
 658:	81 b1       	in	r24, 0x01	; 1
 65a:	82 60       	ori	r24, 0x02	; 2
 65c:	81 b9       	out	0x01, r24	; 1
 65e:	61 b1       	in	r22, 0x01	; 1
 660:	63 70       	andi	r22, 0x03	; 3
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 0b 05 	call	0xa16	; 0xa16 <__floatsisf>
 66c:	9b 01       	movw	r18, r22
 66e:	ac 01       	movw	r20, r24
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	80 e8       	ldi	r24, 0x80	; 128
 676:	90 e4       	ldi	r25, 0x40	; 64
 678:	0e 94 12 06 	call	0xc24	; 0xc24 <pow>
 67c:	9b 01       	movw	r18, r22
 67e:	ac 01       	movw	r20, r24
 680:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__addsf3>
 684:	9b 01       	movw	r18, r22
 686:	ac 01       	movw	r20, r24
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	80 e8       	ldi	r24, 0x80	; 128
 68e:	9f e4       	ldi	r25, 0x4F	; 79
 690:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__divsf3>
 694:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__fixunssfsi>
 698:	60 b9       	out	0x00, r22	; 0
 69a:	08 95       	ret

0000069c <I2C_start>:
 69c:	86 b7       	in	r24, 0x36	; 54
 69e:	80 68       	ori	r24, 0x80	; 128
 6a0:	86 bf       	out	0x36, r24	; 54
 6a2:	86 b7       	in	r24, 0x36	; 54
 6a4:	80 62       	ori	r24, 0x20	; 32
 6a6:	86 bf       	out	0x36, r24	; 54
 6a8:	86 b7       	in	r24, 0x36	; 54
 6aa:	84 60       	ori	r24, 0x04	; 4
 6ac:	86 bf       	out	0x36, r24	; 54
 6ae:	06 b6       	in	r0, 0x36	; 54
 6b0:	07 fe       	sbrs	r0, 7
 6b2:	fd cf       	rjmp	.-6      	; 0x6ae <I2C_start+0x12>
 6b4:	81 b1       	in	r24, 0x01	; 1
 6b6:	88 7f       	andi	r24, 0xF8	; 248
 6b8:	88 30       	cpi	r24, 0x08	; 8
 6ba:	11 f4       	brne	.+4      	; 0x6c0 <I2C_start+0x24>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	08 95       	ret
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	08 95       	ret

000006c4 <I2C_addressEvent>:
 6c4:	66 23       	and	r22, r22
 6c6:	19 f0       	breq	.+6      	; 0x6ce <I2C_addressEvent+0xa>
 6c8:	61 30       	cpi	r22, 0x01	; 1
 6ca:	a9 f0       	breq	.+42     	; 0x6f6 <I2C_addressEvent+0x32>
 6cc:	29 c0       	rjmp	.+82     	; 0x720 <I2C_addressEvent+0x5c>
 6ce:	83 b9       	out	0x03, r24	; 3
 6d0:	86 b7       	in	r24, 0x36	; 54
 6d2:	80 68       	ori	r24, 0x80	; 128
 6d4:	86 bf       	out	0x36, r24	; 54
 6d6:	86 b7       	in	r24, 0x36	; 54
 6d8:	84 60       	ori	r24, 0x04	; 4
 6da:	86 bf       	out	0x36, r24	; 54
 6dc:	06 b6       	in	r0, 0x36	; 54
 6de:	07 fe       	sbrs	r0, 7
 6e0:	fd cf       	rjmp	.-6      	; 0x6dc <I2C_addressEvent+0x18>
 6e2:	81 b1       	in	r24, 0x01	; 1
 6e4:	88 7f       	andi	r24, 0xF8	; 248
 6e6:	88 31       	cpi	r24, 0x18	; 24
 6e8:	e1 f0       	breq	.+56     	; 0x722 <I2C_addressEvent+0x5e>
 6ea:	81 b1       	in	r24, 0x01	; 1
 6ec:	88 7f       	andi	r24, 0xF8	; 248
 6ee:	80 32       	cpi	r24, 0x20	; 32
 6f0:	d1 f4       	brne	.+52     	; 0x726 <I2C_addressEvent+0x62>
 6f2:	83 e0       	ldi	r24, 0x03	; 3
 6f4:	08 95       	ret
 6f6:	8f 5f       	subi	r24, 0xFF	; 255
 6f8:	83 b9       	out	0x03, r24	; 3
 6fa:	86 b7       	in	r24, 0x36	; 54
 6fc:	80 68       	ori	r24, 0x80	; 128
 6fe:	86 bf       	out	0x36, r24	; 54
 700:	86 b7       	in	r24, 0x36	; 54
 702:	84 60       	ori	r24, 0x04	; 4
 704:	86 bf       	out	0x36, r24	; 54
 706:	06 b6       	in	r0, 0x36	; 54
 708:	07 fe       	sbrs	r0, 7
 70a:	fd cf       	rjmp	.-6      	; 0x706 <I2C_addressEvent+0x42>
 70c:	81 b1       	in	r24, 0x01	; 1
 70e:	88 7f       	andi	r24, 0xF8	; 248
 710:	80 34       	cpi	r24, 0x40	; 64
 712:	59 f0       	breq	.+22     	; 0x72a <I2C_addressEvent+0x66>
 714:	81 b1       	in	r24, 0x01	; 1
 716:	88 7f       	andi	r24, 0xF8	; 248
 718:	88 34       	cpi	r24, 0x48	; 72
 71a:	49 f4       	brne	.+18     	; 0x72e <I2C_addressEvent+0x6a>
 71c:	87 e0       	ldi	r24, 0x07	; 7
 71e:	08 95       	ret
 720:	08 95       	ret
 722:	82 e0       	ldi	r24, 0x02	; 2
 724:	08 95       	ret
 726:	85 e0       	ldi	r24, 0x05	; 5
 728:	08 95       	ret
 72a:	86 e0       	ldi	r24, 0x06	; 6
 72c:	08 95       	ret
 72e:	88 e0       	ldi	r24, 0x08	; 8
 730:	08 95       	ret

00000732 <I2C_sendData>:
 732:	fc 01       	movw	r30, r24
 734:	80 81       	ld	r24, Z
 736:	83 b9       	out	0x03, r24	; 3
 738:	86 b7       	in	r24, 0x36	; 54
 73a:	80 68       	ori	r24, 0x80	; 128
 73c:	86 bf       	out	0x36, r24	; 54
 73e:	86 b7       	in	r24, 0x36	; 54
 740:	84 60       	ori	r24, 0x04	; 4
 742:	86 bf       	out	0x36, r24	; 54
 744:	06 b6       	in	r0, 0x36	; 54
 746:	07 fe       	sbrs	r0, 7
 748:	fd cf       	rjmp	.-6      	; 0x744 <I2C_sendData+0x12>
 74a:	81 b1       	in	r24, 0x01	; 1
 74c:	88 7f       	andi	r24, 0xF8	; 248
 74e:	88 32       	cpi	r24, 0x28	; 40
 750:	31 f0       	breq	.+12     	; 0x75e <I2C_sendData+0x2c>
 752:	81 b1       	in	r24, 0x01	; 1
 754:	88 7f       	andi	r24, 0xF8	; 248
 756:	80 33       	cpi	r24, 0x30	; 48
 758:	21 f4       	brne	.+8      	; 0x762 <I2C_sendData+0x30>
 75a:	8a e0       	ldi	r24, 0x0A	; 10
 75c:	08 95       	ret
 75e:	89 e0       	ldi	r24, 0x09	; 9
 760:	08 95       	ret
 762:	8b e0       	ldi	r24, 0x0B	; 11
 764:	08 95       	ret

00000766 <I2C_stop>:
 766:	86 b7       	in	r24, 0x36	; 54
 768:	8f 7d       	andi	r24, 0xDF	; 223
 76a:	86 bf       	out	0x36, r24	; 54
 76c:	86 b7       	in	r24, 0x36	; 54
 76e:	80 68       	ori	r24, 0x80	; 128
 770:	86 bf       	out	0x36, r24	; 54
 772:	86 b7       	in	r24, 0x36	; 54
 774:	80 61       	ori	r24, 0x10	; 16
 776:	86 bf       	out	0x36, r24	; 54
 778:	86 b7       	in	r24, 0x36	; 54
 77a:	84 60       	ori	r24, 0x04	; 4
 77c:	86 bf       	out	0x36, r24	; 54
 77e:	06 b6       	in	r0, 0x36	; 54
 780:	04 fc       	sbrc	r0, 4
 782:	fd cf       	rjmp	.-6      	; 0x77e <I2C_stop+0x18>
 784:	08 95       	ret

00000786 <EEPROM_Write>:



void EEPROM_Write (uint8_t *data, uint8_t *_address){
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	8c 01       	movw	r16, r24
 790:	eb 01       	movw	r28, r22
	
	if(I2C_start()==EVENT_OK){
 792:	0e 94 4e 03 	call	0x69c	; 0x69c <I2C_start>
 796:	81 11       	cpse	r24, r1
 798:	12 c0       	rjmp	.+36     	; 0x7be <EEPROM_Write+0x38>
		
		if(I2C_addressEvent(0xA0,WRITE)==AD_W_SENT_ACK_OK){
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	80 ea       	ldi	r24, 0xA0	; 160
 79e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <I2C_addressEvent>
 7a2:	82 30       	cpi	r24, 0x02	; 2
 7a4:	61 f4       	brne	.+24     	; 0x7be <EEPROM_Write+0x38>
			
			if(I2C_sendData(_address)== DATA_SENT_ACK_OK){
 7a6:	ce 01       	movw	r24, r28
 7a8:	0e 94 99 03 	call	0x732	; 0x732 <I2C_sendData>
 7ac:	89 30       	cpi	r24, 0x09	; 9
 7ae:	39 f4       	brne	.+14     	; 0x7be <EEPROM_Write+0x38>
				
				if(I2C_sendData(data)== DATA_SENT_ACK_OK){
 7b0:	c8 01       	movw	r24, r16
 7b2:	0e 94 99 03 	call	0x732	; 0x732 <I2C_sendData>
 7b6:	89 30       	cpi	r24, 0x09	; 9
 7b8:	11 f4       	brne	.+4      	; 0x7be <EEPROM_Write+0x38>
					
					I2C_stop();
 7ba:	0e 94 b3 03 	call	0x766	; 0x766 <I2C_stop>
		}
		
	}
	
	
}
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	08 95       	ret

000007c8 <EEPROM_Read>:
void EEPROM_Read ( uint8_t *data ,uint8_t* _address) {
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	ec 01       	movw	r28, r24

	if(I2C_start()==EVENT_OK){
 7ce:	0e 94 4e 03 	call	0x69c	; 0x69c <I2C_start>
 7d2:	81 11       	cpse	r24, r1
 7d4:	0d c0       	rjmp	.+26     	; 0x7f0 <EEPROM_Read+0x28>
			
		//	if(I2C_sendData(_address)== DATA_SENT_ACK_OK){
			
			//	if(I2c_Restart()==EVENT_OK){
					
					if(I2C_addressEvent(0xA0,READ)==AD_R_SENT_ACK_OK){
 7d6:	61 e0       	ldi	r22, 0x01	; 1
 7d8:	80 ea       	ldi	r24, 0xA0	; 160
 7da:	0e 94 62 03 	call	0x6c4	; 0x6c4 <I2C_addressEvent>
 7de:	86 30       	cpi	r24, 0x06	; 6
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <EEPROM_Read+0x28>
						
						if(I2C_sendData(data)== DATA_SENT_NACK_OK){
 7e2:	ce 01       	movw	r24, r28
 7e4:	0e 94 99 03 	call	0x732	; 0x732 <I2C_sendData>
 7e8:	8a 30       	cpi	r24, 0x0A	; 10
 7ea:	11 f4       	brne	.+4      	; 0x7f0 <EEPROM_Read+0x28>
							
							I2C_stop();
 7ec:	0e 94 b3 03 	call	0x766	; 0x766 <I2C_stop>
		
		
	}
	
	
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	08 95       	ret

000007f6 <__subsf3>:
 7f6:	50 58       	subi	r21, 0x80	; 128

000007f8 <__addsf3>:
 7f8:	bb 27       	eor	r27, r27
 7fa:	aa 27       	eor	r26, r26
 7fc:	0e 94 13 04 	call	0x826	; 0x826 <__addsf3x>
 800:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_round>
 804:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_pscA>
 808:	38 f0       	brcs	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80a:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_pscB>
 80e:	20 f0       	brcs	.+8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 810:	39 f4       	brne	.+14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 812:	9f 3f       	cpi	r25, 0xFF	; 255
 814:	19 f4       	brne	.+6      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 816:	26 f4       	brtc	.+8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 818:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_nan>
 81c:	0e f4       	brtc	.+2      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81e:	e0 95       	com	r30
 820:	e7 fb       	bst	r30, 7
 822:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_inf>

00000826 <__addsf3x>:
 826:	e9 2f       	mov	r30, r25
 828:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_split3>
 82c:	58 f3       	brcs	.-42     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 82e:	ba 17       	cp	r27, r26
 830:	62 07       	cpc	r22, r18
 832:	73 07       	cpc	r23, r19
 834:	84 07       	cpc	r24, r20
 836:	95 07       	cpc	r25, r21
 838:	20 f0       	brcs	.+8      	; 0x842 <__addsf3x+0x1c>
 83a:	79 f4       	brne	.+30     	; 0x85a <__addsf3x+0x34>
 83c:	a6 f5       	brtc	.+104    	; 0x8a6 <__stack+0x47>
 83e:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_zero>
 842:	0e f4       	brtc	.+2      	; 0x846 <__addsf3x+0x20>
 844:	e0 95       	com	r30
 846:	0b 2e       	mov	r0, r27
 848:	ba 2f       	mov	r27, r26
 84a:	a0 2d       	mov	r26, r0
 84c:	0b 01       	movw	r0, r22
 84e:	b9 01       	movw	r22, r18
 850:	90 01       	movw	r18, r0
 852:	0c 01       	movw	r0, r24
 854:	ca 01       	movw	r24, r20
 856:	a0 01       	movw	r20, r0
 858:	11 24       	eor	r1, r1
 85a:	ff 27       	eor	r31, r31
 85c:	59 1b       	sub	r21, r25
 85e:	99 f0       	breq	.+38     	; 0x886 <__stack+0x27>
 860:	59 3f       	cpi	r21, 0xF9	; 249
 862:	50 f4       	brcc	.+20     	; 0x878 <__stack+0x19>
 864:	50 3e       	cpi	r21, 0xE0	; 224
 866:	68 f1       	brcs	.+90     	; 0x8c2 <__stack+0x63>
 868:	1a 16       	cp	r1, r26
 86a:	f0 40       	sbci	r31, 0x00	; 0
 86c:	a2 2f       	mov	r26, r18
 86e:	23 2f       	mov	r18, r19
 870:	34 2f       	mov	r19, r20
 872:	44 27       	eor	r20, r20
 874:	58 5f       	subi	r21, 0xF8	; 248
 876:	f3 cf       	rjmp	.-26     	; 0x85e <__addsf3x+0x38>
 878:	46 95       	lsr	r20
 87a:	37 95       	ror	r19
 87c:	27 95       	ror	r18
 87e:	a7 95       	ror	r26
 880:	f0 40       	sbci	r31, 0x00	; 0
 882:	53 95       	inc	r21
 884:	c9 f7       	brne	.-14     	; 0x878 <__stack+0x19>
 886:	7e f4       	brtc	.+30     	; 0x8a6 <__stack+0x47>
 888:	1f 16       	cp	r1, r31
 88a:	ba 0b       	sbc	r27, r26
 88c:	62 0b       	sbc	r22, r18
 88e:	73 0b       	sbc	r23, r19
 890:	84 0b       	sbc	r24, r20
 892:	ba f0       	brmi	.+46     	; 0x8c2 <__stack+0x63>
 894:	91 50       	subi	r25, 0x01	; 1
 896:	a1 f0       	breq	.+40     	; 0x8c0 <__stack+0x61>
 898:	ff 0f       	add	r31, r31
 89a:	bb 1f       	adc	r27, r27
 89c:	66 1f       	adc	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	88 1f       	adc	r24, r24
 8a2:	c2 f7       	brpl	.-16     	; 0x894 <__stack+0x35>
 8a4:	0e c0       	rjmp	.+28     	; 0x8c2 <__stack+0x63>
 8a6:	ba 0f       	add	r27, r26
 8a8:	62 1f       	adc	r22, r18
 8aa:	73 1f       	adc	r23, r19
 8ac:	84 1f       	adc	r24, r20
 8ae:	48 f4       	brcc	.+18     	; 0x8c2 <__stack+0x63>
 8b0:	87 95       	ror	r24
 8b2:	77 95       	ror	r23
 8b4:	67 95       	ror	r22
 8b6:	b7 95       	ror	r27
 8b8:	f7 95       	ror	r31
 8ba:	9e 3f       	cpi	r25, 0xFE	; 254
 8bc:	08 f0       	brcs	.+2      	; 0x8c0 <__stack+0x61>
 8be:	b0 cf       	rjmp	.-160    	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 8c0:	93 95       	inc	r25
 8c2:	88 0f       	add	r24, r24
 8c4:	08 f0       	brcs	.+2      	; 0x8c8 <__stack+0x69>
 8c6:	99 27       	eor	r25, r25
 8c8:	ee 0f       	add	r30, r30
 8ca:	97 95       	ror	r25
 8cc:	87 95       	ror	r24
 8ce:	08 95       	ret

000008d0 <__divsf3>:
 8d0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <__divsf3x>
 8d4:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_round>
 8d8:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_pscB>
 8dc:	58 f0       	brcs	.+22     	; 0x8f4 <__divsf3+0x24>
 8de:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_pscA>
 8e2:	40 f0       	brcs	.+16     	; 0x8f4 <__divsf3+0x24>
 8e4:	29 f4       	brne	.+10     	; 0x8f0 <__divsf3+0x20>
 8e6:	5f 3f       	cpi	r21, 0xFF	; 255
 8e8:	29 f0       	breq	.+10     	; 0x8f4 <__divsf3+0x24>
 8ea:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_inf>
 8ee:	51 11       	cpse	r21, r1
 8f0:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_szero>
 8f4:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_nan>

000008f8 <__divsf3x>:
 8f8:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_split3>
 8fc:	68 f3       	brcs	.-38     	; 0x8d8 <__divsf3+0x8>

000008fe <__divsf3_pse>:
 8fe:	99 23       	and	r25, r25
 900:	b1 f3       	breq	.-20     	; 0x8ee <__divsf3+0x1e>
 902:	55 23       	and	r21, r21
 904:	91 f3       	breq	.-28     	; 0x8ea <__divsf3+0x1a>
 906:	95 1b       	sub	r25, r21
 908:	55 0b       	sbc	r21, r21
 90a:	bb 27       	eor	r27, r27
 90c:	aa 27       	eor	r26, r26
 90e:	62 17       	cp	r22, r18
 910:	73 07       	cpc	r23, r19
 912:	84 07       	cpc	r24, r20
 914:	38 f0       	brcs	.+14     	; 0x924 <__divsf3_pse+0x26>
 916:	9f 5f       	subi	r25, 0xFF	; 255
 918:	5f 4f       	sbci	r21, 0xFF	; 255
 91a:	22 0f       	add	r18, r18
 91c:	33 1f       	adc	r19, r19
 91e:	44 1f       	adc	r20, r20
 920:	aa 1f       	adc	r26, r26
 922:	a9 f3       	breq	.-22     	; 0x90e <__divsf3_pse+0x10>
 924:	35 d0       	rcall	.+106    	; 0x990 <__divsf3_pse+0x92>
 926:	0e 2e       	mov	r0, r30
 928:	3a f0       	brmi	.+14     	; 0x938 <__divsf3_pse+0x3a>
 92a:	e0 e8       	ldi	r30, 0x80	; 128
 92c:	32 d0       	rcall	.+100    	; 0x992 <__divsf3_pse+0x94>
 92e:	91 50       	subi	r25, 0x01	; 1
 930:	50 40       	sbci	r21, 0x00	; 0
 932:	e6 95       	lsr	r30
 934:	00 1c       	adc	r0, r0
 936:	ca f7       	brpl	.-14     	; 0x92a <__divsf3_pse+0x2c>
 938:	2b d0       	rcall	.+86     	; 0x990 <__divsf3_pse+0x92>
 93a:	fe 2f       	mov	r31, r30
 93c:	29 d0       	rcall	.+82     	; 0x990 <__divsf3_pse+0x92>
 93e:	66 0f       	add	r22, r22
 940:	77 1f       	adc	r23, r23
 942:	88 1f       	adc	r24, r24
 944:	bb 1f       	adc	r27, r27
 946:	26 17       	cp	r18, r22
 948:	37 07       	cpc	r19, r23
 94a:	48 07       	cpc	r20, r24
 94c:	ab 07       	cpc	r26, r27
 94e:	b0 e8       	ldi	r27, 0x80	; 128
 950:	09 f0       	breq	.+2      	; 0x954 <__divsf3_pse+0x56>
 952:	bb 0b       	sbc	r27, r27
 954:	80 2d       	mov	r24, r0
 956:	bf 01       	movw	r22, r30
 958:	ff 27       	eor	r31, r31
 95a:	93 58       	subi	r25, 0x83	; 131
 95c:	5f 4f       	sbci	r21, 0xFF	; 255
 95e:	3a f0       	brmi	.+14     	; 0x96e <__divsf3_pse+0x70>
 960:	9e 3f       	cpi	r25, 0xFE	; 254
 962:	51 05       	cpc	r21, r1
 964:	78 f0       	brcs	.+30     	; 0x984 <__divsf3_pse+0x86>
 966:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_inf>
 96a:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_szero>
 96e:	5f 3f       	cpi	r21, 0xFF	; 255
 970:	e4 f3       	brlt	.-8      	; 0x96a <__divsf3_pse+0x6c>
 972:	98 3e       	cpi	r25, 0xE8	; 232
 974:	d4 f3       	brlt	.-12     	; 0x96a <__divsf3_pse+0x6c>
 976:	86 95       	lsr	r24
 978:	77 95       	ror	r23
 97a:	67 95       	ror	r22
 97c:	b7 95       	ror	r27
 97e:	f7 95       	ror	r31
 980:	9f 5f       	subi	r25, 0xFF	; 255
 982:	c9 f7       	brne	.-14     	; 0x976 <__divsf3_pse+0x78>
 984:	88 0f       	add	r24, r24
 986:	91 1d       	adc	r25, r1
 988:	96 95       	lsr	r25
 98a:	87 95       	ror	r24
 98c:	97 f9       	bld	r25, 7
 98e:	08 95       	ret
 990:	e1 e0       	ldi	r30, 0x01	; 1
 992:	66 0f       	add	r22, r22
 994:	77 1f       	adc	r23, r23
 996:	88 1f       	adc	r24, r24
 998:	bb 1f       	adc	r27, r27
 99a:	62 17       	cp	r22, r18
 99c:	73 07       	cpc	r23, r19
 99e:	84 07       	cpc	r24, r20
 9a0:	ba 07       	cpc	r27, r26
 9a2:	20 f0       	brcs	.+8      	; 0x9ac <__divsf3_pse+0xae>
 9a4:	62 1b       	sub	r22, r18
 9a6:	73 0b       	sbc	r23, r19
 9a8:	84 0b       	sbc	r24, r20
 9aa:	ba 0b       	sbc	r27, r26
 9ac:	ee 1f       	adc	r30, r30
 9ae:	88 f7       	brcc	.-30     	; 0x992 <__divsf3_pse+0x94>
 9b0:	e0 95       	com	r30
 9b2:	08 95       	ret

000009b4 <__fixunssfsi>:
 9b4:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_splitA>
 9b8:	88 f0       	brcs	.+34     	; 0x9dc <__fixunssfsi+0x28>
 9ba:	9f 57       	subi	r25, 0x7F	; 127
 9bc:	98 f0       	brcs	.+38     	; 0x9e4 <__fixunssfsi+0x30>
 9be:	b9 2f       	mov	r27, r25
 9c0:	99 27       	eor	r25, r25
 9c2:	b7 51       	subi	r27, 0x17	; 23
 9c4:	b0 f0       	brcs	.+44     	; 0x9f2 <__fixunssfsi+0x3e>
 9c6:	e1 f0       	breq	.+56     	; 0xa00 <__fixunssfsi+0x4c>
 9c8:	66 0f       	add	r22, r22
 9ca:	77 1f       	adc	r23, r23
 9cc:	88 1f       	adc	r24, r24
 9ce:	99 1f       	adc	r25, r25
 9d0:	1a f0       	brmi	.+6      	; 0x9d8 <__fixunssfsi+0x24>
 9d2:	ba 95       	dec	r27
 9d4:	c9 f7       	brne	.-14     	; 0x9c8 <__fixunssfsi+0x14>
 9d6:	14 c0       	rjmp	.+40     	; 0xa00 <__fixunssfsi+0x4c>
 9d8:	b1 30       	cpi	r27, 0x01	; 1
 9da:	91 f0       	breq	.+36     	; 0xa00 <__fixunssfsi+0x4c>
 9dc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__fp_zero>
 9e0:	b1 e0       	ldi	r27, 0x01	; 1
 9e2:	08 95       	ret
 9e4:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_zero>
 9e8:	67 2f       	mov	r22, r23
 9ea:	78 2f       	mov	r23, r24
 9ec:	88 27       	eor	r24, r24
 9ee:	b8 5f       	subi	r27, 0xF8	; 248
 9f0:	39 f0       	breq	.+14     	; 0xa00 <__fixunssfsi+0x4c>
 9f2:	b9 3f       	cpi	r27, 0xF9	; 249
 9f4:	cc f3       	brlt	.-14     	; 0x9e8 <__fixunssfsi+0x34>
 9f6:	86 95       	lsr	r24
 9f8:	77 95       	ror	r23
 9fa:	67 95       	ror	r22
 9fc:	b3 95       	inc	r27
 9fe:	d9 f7       	brne	.-10     	; 0x9f6 <__fixunssfsi+0x42>
 a00:	3e f4       	brtc	.+14     	; 0xa10 <__fixunssfsi+0x5c>
 a02:	90 95       	com	r25
 a04:	80 95       	com	r24
 a06:	70 95       	com	r23
 a08:	61 95       	neg	r22
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	08 95       	ret

00000a12 <__floatunsisf>:
 a12:	e8 94       	clt
 a14:	09 c0       	rjmp	.+18     	; 0xa28 <__floatsisf+0x12>

00000a16 <__floatsisf>:
 a16:	97 fb       	bst	r25, 7
 a18:	3e f4       	brtc	.+14     	; 0xa28 <__floatsisf+0x12>
 a1a:	90 95       	com	r25
 a1c:	80 95       	com	r24
 a1e:	70 95       	com	r23
 a20:	61 95       	neg	r22
 a22:	7f 4f       	sbci	r23, 0xFF	; 255
 a24:	8f 4f       	sbci	r24, 0xFF	; 255
 a26:	9f 4f       	sbci	r25, 0xFF	; 255
 a28:	99 23       	and	r25, r25
 a2a:	a9 f0       	breq	.+42     	; 0xa56 <__floatsisf+0x40>
 a2c:	f9 2f       	mov	r31, r25
 a2e:	96 e9       	ldi	r25, 0x96	; 150
 a30:	bb 27       	eor	r27, r27
 a32:	93 95       	inc	r25
 a34:	f6 95       	lsr	r31
 a36:	87 95       	ror	r24
 a38:	77 95       	ror	r23
 a3a:	67 95       	ror	r22
 a3c:	b7 95       	ror	r27
 a3e:	f1 11       	cpse	r31, r1
 a40:	f8 cf       	rjmp	.-16     	; 0xa32 <__floatsisf+0x1c>
 a42:	fa f4       	brpl	.+62     	; 0xa82 <__floatsisf+0x6c>
 a44:	bb 0f       	add	r27, r27
 a46:	11 f4       	brne	.+4      	; 0xa4c <__floatsisf+0x36>
 a48:	60 ff       	sbrs	r22, 0
 a4a:	1b c0       	rjmp	.+54     	; 0xa82 <__floatsisf+0x6c>
 a4c:	6f 5f       	subi	r22, 0xFF	; 255
 a4e:	7f 4f       	sbci	r23, 0xFF	; 255
 a50:	8f 4f       	sbci	r24, 0xFF	; 255
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	16 c0       	rjmp	.+44     	; 0xa82 <__floatsisf+0x6c>
 a56:	88 23       	and	r24, r24
 a58:	11 f0       	breq	.+4      	; 0xa5e <__floatsisf+0x48>
 a5a:	96 e9       	ldi	r25, 0x96	; 150
 a5c:	11 c0       	rjmp	.+34     	; 0xa80 <__floatsisf+0x6a>
 a5e:	77 23       	and	r23, r23
 a60:	21 f0       	breq	.+8      	; 0xa6a <__floatsisf+0x54>
 a62:	9e e8       	ldi	r25, 0x8E	; 142
 a64:	87 2f       	mov	r24, r23
 a66:	76 2f       	mov	r23, r22
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <__floatsisf+0x5e>
 a6a:	66 23       	and	r22, r22
 a6c:	71 f0       	breq	.+28     	; 0xa8a <__floatsisf+0x74>
 a6e:	96 e8       	ldi	r25, 0x86	; 134
 a70:	86 2f       	mov	r24, r22
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	60 e0       	ldi	r22, 0x00	; 0
 a76:	2a f0       	brmi	.+10     	; 0xa82 <__floatsisf+0x6c>
 a78:	9a 95       	dec	r25
 a7a:	66 0f       	add	r22, r22
 a7c:	77 1f       	adc	r23, r23
 a7e:	88 1f       	adc	r24, r24
 a80:	da f7       	brpl	.-10     	; 0xa78 <__floatsisf+0x62>
 a82:	88 0f       	add	r24, r24
 a84:	96 95       	lsr	r25
 a86:	87 95       	ror	r24
 a88:	97 f9       	bld	r25, 7
 a8a:	08 95       	ret

00000a8c <__fp_inf>:
 a8c:	97 f9       	bld	r25, 7
 a8e:	9f 67       	ori	r25, 0x7F	; 127
 a90:	80 e8       	ldi	r24, 0x80	; 128
 a92:	70 e0       	ldi	r23, 0x00	; 0
 a94:	60 e0       	ldi	r22, 0x00	; 0
 a96:	08 95       	ret

00000a98 <__fp_mpack>:
 a98:	9f 3f       	cpi	r25, 0xFF	; 255
 a9a:	31 f0       	breq	.+12     	; 0xaa8 <__fp_mpack_finite+0xc>

00000a9c <__fp_mpack_finite>:
 a9c:	91 50       	subi	r25, 0x01	; 1
 a9e:	20 f4       	brcc	.+8      	; 0xaa8 <__fp_mpack_finite+0xc>
 aa0:	87 95       	ror	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	88 0f       	add	r24, r24
 aaa:	91 1d       	adc	r25, r1
 aac:	96 95       	lsr	r25
 aae:	87 95       	ror	r24
 ab0:	97 f9       	bld	r25, 7
 ab2:	08 95       	ret

00000ab4 <__fp_nan>:
 ab4:	9f ef       	ldi	r25, 0xFF	; 255
 ab6:	80 ec       	ldi	r24, 0xC0	; 192
 ab8:	08 95       	ret

00000aba <__fp_pscA>:
 aba:	00 24       	eor	r0, r0
 abc:	0a 94       	dec	r0
 abe:	16 16       	cp	r1, r22
 ac0:	17 06       	cpc	r1, r23
 ac2:	18 06       	cpc	r1, r24
 ac4:	09 06       	cpc	r0, r25
 ac6:	08 95       	ret

00000ac8 <__fp_pscB>:
 ac8:	00 24       	eor	r0, r0
 aca:	0a 94       	dec	r0
 acc:	12 16       	cp	r1, r18
 ace:	13 06       	cpc	r1, r19
 ad0:	14 06       	cpc	r1, r20
 ad2:	05 06       	cpc	r0, r21
 ad4:	08 95       	ret

00000ad6 <__fp_round>:
 ad6:	09 2e       	mov	r0, r25
 ad8:	03 94       	inc	r0
 ada:	00 0c       	add	r0, r0
 adc:	11 f4       	brne	.+4      	; 0xae2 <__fp_round+0xc>
 ade:	88 23       	and	r24, r24
 ae0:	52 f0       	brmi	.+20     	; 0xaf6 <__fp_round+0x20>
 ae2:	bb 0f       	add	r27, r27
 ae4:	40 f4       	brcc	.+16     	; 0xaf6 <__fp_round+0x20>
 ae6:	bf 2b       	or	r27, r31
 ae8:	11 f4       	brne	.+4      	; 0xaee <__fp_round+0x18>
 aea:	60 ff       	sbrs	r22, 0
 aec:	04 c0       	rjmp	.+8      	; 0xaf6 <__fp_round+0x20>
 aee:	6f 5f       	subi	r22, 0xFF	; 255
 af0:	7f 4f       	sbci	r23, 0xFF	; 255
 af2:	8f 4f       	sbci	r24, 0xFF	; 255
 af4:	9f 4f       	sbci	r25, 0xFF	; 255
 af6:	08 95       	ret

00000af8 <__fp_split3>:
 af8:	57 fd       	sbrc	r21, 7
 afa:	90 58       	subi	r25, 0x80	; 128
 afc:	44 0f       	add	r20, r20
 afe:	55 1f       	adc	r21, r21
 b00:	59 f0       	breq	.+22     	; 0xb18 <__fp_splitA+0x10>
 b02:	5f 3f       	cpi	r21, 0xFF	; 255
 b04:	71 f0       	breq	.+28     	; 0xb22 <__fp_splitA+0x1a>
 b06:	47 95       	ror	r20

00000b08 <__fp_splitA>:
 b08:	88 0f       	add	r24, r24
 b0a:	97 fb       	bst	r25, 7
 b0c:	99 1f       	adc	r25, r25
 b0e:	61 f0       	breq	.+24     	; 0xb28 <__fp_splitA+0x20>
 b10:	9f 3f       	cpi	r25, 0xFF	; 255
 b12:	79 f0       	breq	.+30     	; 0xb32 <__fp_splitA+0x2a>
 b14:	87 95       	ror	r24
 b16:	08 95       	ret
 b18:	12 16       	cp	r1, r18
 b1a:	13 06       	cpc	r1, r19
 b1c:	14 06       	cpc	r1, r20
 b1e:	55 1f       	adc	r21, r21
 b20:	f2 cf       	rjmp	.-28     	; 0xb06 <__fp_split3+0xe>
 b22:	46 95       	lsr	r20
 b24:	f1 df       	rcall	.-30     	; 0xb08 <__fp_splitA>
 b26:	08 c0       	rjmp	.+16     	; 0xb38 <__fp_splitA+0x30>
 b28:	16 16       	cp	r1, r22
 b2a:	17 06       	cpc	r1, r23
 b2c:	18 06       	cpc	r1, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	f1 cf       	rjmp	.-30     	; 0xb14 <__fp_splitA+0xc>
 b32:	86 95       	lsr	r24
 b34:	71 05       	cpc	r23, r1
 b36:	61 05       	cpc	r22, r1
 b38:	08 94       	sec
 b3a:	08 95       	ret

00000b3c <__fp_zero>:
 b3c:	e8 94       	clt

00000b3e <__fp_szero>:
 b3e:	bb 27       	eor	r27, r27
 b40:	66 27       	eor	r22, r22
 b42:	77 27       	eor	r23, r23
 b44:	cb 01       	movw	r24, r22
 b46:	97 f9       	bld	r25, 7
 b48:	08 95       	ret

00000b4a <__mulsf3>:
 b4a:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3x>
 b4e:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_round>
 b52:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_pscA>
 b56:	38 f0       	brcs	.+14     	; 0xb66 <__mulsf3+0x1c>
 b58:	0e 94 64 05 	call	0xac8	; 0xac8 <__fp_pscB>
 b5c:	20 f0       	brcs	.+8      	; 0xb66 <__mulsf3+0x1c>
 b5e:	95 23       	and	r25, r21
 b60:	11 f0       	breq	.+4      	; 0xb66 <__mulsf3+0x1c>
 b62:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_inf>
 b66:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_nan>
 b6a:	11 24       	eor	r1, r1
 b6c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_szero>

00000b70 <__mulsf3x>:
 b70:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__fp_split3>
 b74:	70 f3       	brcs	.-36     	; 0xb52 <__mulsf3+0x8>

00000b76 <__mulsf3_pse>:
 b76:	95 9f       	mul	r25, r21
 b78:	c1 f3       	breq	.-16     	; 0xb6a <__mulsf3+0x20>
 b7a:	95 0f       	add	r25, r21
 b7c:	50 e0       	ldi	r21, 0x00	; 0
 b7e:	55 1f       	adc	r21, r21
 b80:	62 9f       	mul	r22, r18
 b82:	f0 01       	movw	r30, r0
 b84:	72 9f       	mul	r23, r18
 b86:	bb 27       	eor	r27, r27
 b88:	f0 0d       	add	r31, r0
 b8a:	b1 1d       	adc	r27, r1
 b8c:	63 9f       	mul	r22, r19
 b8e:	aa 27       	eor	r26, r26
 b90:	f0 0d       	add	r31, r0
 b92:	b1 1d       	adc	r27, r1
 b94:	aa 1f       	adc	r26, r26
 b96:	64 9f       	mul	r22, r20
 b98:	66 27       	eor	r22, r22
 b9a:	b0 0d       	add	r27, r0
 b9c:	a1 1d       	adc	r26, r1
 b9e:	66 1f       	adc	r22, r22
 ba0:	82 9f       	mul	r24, r18
 ba2:	22 27       	eor	r18, r18
 ba4:	b0 0d       	add	r27, r0
 ba6:	a1 1d       	adc	r26, r1
 ba8:	62 1f       	adc	r22, r18
 baa:	73 9f       	mul	r23, r19
 bac:	b0 0d       	add	r27, r0
 bae:	a1 1d       	adc	r26, r1
 bb0:	62 1f       	adc	r22, r18
 bb2:	83 9f       	mul	r24, r19
 bb4:	a0 0d       	add	r26, r0
 bb6:	61 1d       	adc	r22, r1
 bb8:	22 1f       	adc	r18, r18
 bba:	74 9f       	mul	r23, r20
 bbc:	33 27       	eor	r19, r19
 bbe:	a0 0d       	add	r26, r0
 bc0:	61 1d       	adc	r22, r1
 bc2:	23 1f       	adc	r18, r19
 bc4:	84 9f       	mul	r24, r20
 bc6:	60 0d       	add	r22, r0
 bc8:	21 1d       	adc	r18, r1
 bca:	82 2f       	mov	r24, r18
 bcc:	76 2f       	mov	r23, r22
 bce:	6a 2f       	mov	r22, r26
 bd0:	11 24       	eor	r1, r1
 bd2:	9f 57       	subi	r25, 0x7F	; 127
 bd4:	50 40       	sbci	r21, 0x00	; 0
 bd6:	9a f0       	brmi	.+38     	; 0xbfe <__mulsf3_pse+0x88>
 bd8:	f1 f0       	breq	.+60     	; 0xc16 <__mulsf3_pse+0xa0>
 bda:	88 23       	and	r24, r24
 bdc:	4a f0       	brmi	.+18     	; 0xbf0 <__mulsf3_pse+0x7a>
 bde:	ee 0f       	add	r30, r30
 be0:	ff 1f       	adc	r31, r31
 be2:	bb 1f       	adc	r27, r27
 be4:	66 1f       	adc	r22, r22
 be6:	77 1f       	adc	r23, r23
 be8:	88 1f       	adc	r24, r24
 bea:	91 50       	subi	r25, 0x01	; 1
 bec:	50 40       	sbci	r21, 0x00	; 0
 bee:	a9 f7       	brne	.-22     	; 0xbda <__mulsf3_pse+0x64>
 bf0:	9e 3f       	cpi	r25, 0xFE	; 254
 bf2:	51 05       	cpc	r21, r1
 bf4:	80 f0       	brcs	.+32     	; 0xc16 <__mulsf3_pse+0xa0>
 bf6:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_inf>
 bfa:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_szero>
 bfe:	5f 3f       	cpi	r21, 0xFF	; 255
 c00:	e4 f3       	brlt	.-8      	; 0xbfa <__mulsf3_pse+0x84>
 c02:	98 3e       	cpi	r25, 0xE8	; 232
 c04:	d4 f3       	brlt	.-12     	; 0xbfa <__mulsf3_pse+0x84>
 c06:	86 95       	lsr	r24
 c08:	77 95       	ror	r23
 c0a:	67 95       	ror	r22
 c0c:	b7 95       	ror	r27
 c0e:	f7 95       	ror	r31
 c10:	e7 95       	ror	r30
 c12:	9f 5f       	subi	r25, 0xFF	; 255
 c14:	c1 f7       	brne	.-16     	; 0xc06 <__mulsf3_pse+0x90>
 c16:	fe 2b       	or	r31, r30
 c18:	88 0f       	add	r24, r24
 c1a:	91 1d       	adc	r25, r1
 c1c:	96 95       	lsr	r25
 c1e:	87 95       	ror	r24
 c20:	97 f9       	bld	r25, 7
 c22:	08 95       	ret

00000c24 <pow>:
 c24:	fa 01       	movw	r30, r20
 c26:	ee 0f       	add	r30, r30
 c28:	ff 1f       	adc	r31, r31
 c2a:	30 96       	adiw	r30, 0x00	; 0
 c2c:	21 05       	cpc	r18, r1
 c2e:	31 05       	cpc	r19, r1
 c30:	a1 f1       	breq	.+104    	; 0xc9a <pow+0x76>
 c32:	61 15       	cp	r22, r1
 c34:	71 05       	cpc	r23, r1
 c36:	61 f4       	brne	.+24     	; 0xc50 <pow+0x2c>
 c38:	80 38       	cpi	r24, 0x80	; 128
 c3a:	bf e3       	ldi	r27, 0x3F	; 63
 c3c:	9b 07       	cpc	r25, r27
 c3e:	49 f1       	breq	.+82     	; 0xc92 <pow+0x6e>
 c40:	68 94       	set
 c42:	90 38       	cpi	r25, 0x80	; 128
 c44:	81 05       	cpc	r24, r1
 c46:	61 f0       	breq	.+24     	; 0xc60 <pow+0x3c>
 c48:	80 38       	cpi	r24, 0x80	; 128
 c4a:	bf ef       	ldi	r27, 0xFF	; 255
 c4c:	9b 07       	cpc	r25, r27
 c4e:	41 f0       	breq	.+16     	; 0xc60 <pow+0x3c>
 c50:	99 23       	and	r25, r25
 c52:	4a f5       	brpl	.+82     	; 0xca6 <pow+0x82>
 c54:	ff 3f       	cpi	r31, 0xFF	; 255
 c56:	e1 05       	cpc	r30, r1
 c58:	31 05       	cpc	r19, r1
 c5a:	21 05       	cpc	r18, r1
 c5c:	19 f1       	breq	.+70     	; 0xca4 <pow+0x80>
 c5e:	e8 94       	clt
 c60:	08 94       	sec
 c62:	e7 95       	ror	r30
 c64:	d9 01       	movw	r26, r18
 c66:	aa 23       	and	r26, r26
 c68:	29 f4       	brne	.+10     	; 0xc74 <pow+0x50>
 c6a:	ab 2f       	mov	r26, r27
 c6c:	be 2f       	mov	r27, r30
 c6e:	f8 5f       	subi	r31, 0xF8	; 248
 c70:	d0 f3       	brcs	.-12     	; 0xc66 <pow+0x42>
 c72:	10 c0       	rjmp	.+32     	; 0xc94 <pow+0x70>
 c74:	ff 5f       	subi	r31, 0xFF	; 255
 c76:	70 f4       	brcc	.+28     	; 0xc94 <pow+0x70>
 c78:	a6 95       	lsr	r26
 c7a:	e0 f7       	brcc	.-8      	; 0xc74 <pow+0x50>
 c7c:	f7 39       	cpi	r31, 0x97	; 151
 c7e:	50 f0       	brcs	.+20     	; 0xc94 <pow+0x70>
 c80:	19 f0       	breq	.+6      	; 0xc88 <pow+0x64>
 c82:	ff 3a       	cpi	r31, 0xAF	; 175
 c84:	38 f4       	brcc	.+14     	; 0xc94 <pow+0x70>
 c86:	9f 77       	andi	r25, 0x7F	; 127
 c88:	9f 93       	push	r25
 c8a:	0d d0       	rcall	.+26     	; 0xca6 <pow+0x82>
 c8c:	0f 90       	pop	r0
 c8e:	07 fc       	sbrc	r0, 7
 c90:	90 58       	subi	r25, 0x80	; 128
 c92:	08 95       	ret
 c94:	46 f0       	brts	.+16     	; 0xca6 <pow+0x82>
 c96:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_nan>
 c9a:	60 e0       	ldi	r22, 0x00	; 0
 c9c:	70 e0       	ldi	r23, 0x00	; 0
 c9e:	80 e8       	ldi	r24, 0x80	; 128
 ca0:	9f e3       	ldi	r25, 0x3F	; 63
 ca2:	08 95       	ret
 ca4:	4f e7       	ldi	r20, 0x7F	; 127
 ca6:	9f 77       	andi	r25, 0x7F	; 127
 ca8:	5f 93       	push	r21
 caa:	4f 93       	push	r20
 cac:	3f 93       	push	r19
 cae:	2f 93       	push	r18
 cb0:	0e 94 0d 07 	call	0xe1a	; 0xe1a <log>
 cb4:	2f 91       	pop	r18
 cb6:	3f 91       	pop	r19
 cb8:	4f 91       	pop	r20
 cba:	5f 91       	pop	r21
 cbc:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__mulsf3>
 cc0:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <exp>
 cc4:	29 f4       	brne	.+10     	; 0xcd0 <pow+0xac>
 cc6:	16 f0       	brts	.+4      	; 0xccc <pow+0xa8>
 cc8:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_inf>
 ccc:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_zero>
 cd0:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_nan>

00000cd4 <exp>:
 cd4:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_splitA>
 cd8:	a8 f3       	brcs	.-22     	; 0xcc4 <pow+0xa0>
 cda:	96 38       	cpi	r25, 0x86	; 134
 cdc:	a0 f7       	brcc	.-24     	; 0xcc6 <pow+0xa2>
 cde:	07 f8       	bld	r0, 7
 ce0:	0f 92       	push	r0
 ce2:	e8 94       	clt
 ce4:	2b e3       	ldi	r18, 0x3B	; 59
 ce6:	3a ea       	ldi	r19, 0xAA	; 170
 ce8:	48 eb       	ldi	r20, 0xB8	; 184
 cea:	5f e7       	ldi	r21, 0x7F	; 127
 cec:	0e 94 bb 05 	call	0xb76	; 0xb76 <__mulsf3_pse>
 cf0:	0f 92       	push	r0
 cf2:	0f 92       	push	r0
 cf4:	0f 92       	push	r0
 cf6:	4d b7       	in	r20, 0x3d	; 61
 cf8:	5e b7       	in	r21, 0x3e	; 62
 cfa:	0f 92       	push	r0
 cfc:	0e 94 55 07 	call	0xeaa	; 0xeaa <modf>
 d00:	e4 e5       	ldi	r30, 0x54	; 84
 d02:	f0 e0       	ldi	r31, 0x00	; 0
 d04:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_powser>
 d08:	4f 91       	pop	r20
 d0a:	5f 91       	pop	r21
 d0c:	ef 91       	pop	r30
 d0e:	ff 91       	pop	r31
 d10:	e5 95       	asr	r30
 d12:	ee 1f       	adc	r30, r30
 d14:	ff 1f       	adc	r31, r31
 d16:	49 f0       	breq	.+18     	; 0xd2a <exp+0x56>
 d18:	fe 57       	subi	r31, 0x7E	; 126
 d1a:	e0 68       	ori	r30, 0x80	; 128
 d1c:	44 27       	eor	r20, r20
 d1e:	ee 0f       	add	r30, r30
 d20:	44 1f       	adc	r20, r20
 d22:	fa 95       	dec	r31
 d24:	e1 f7       	brne	.-8      	; 0xd1e <exp+0x4a>
 d26:	41 95       	neg	r20
 d28:	55 0b       	sbc	r21, r21
 d2a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <ldexp>
 d2e:	0f 90       	pop	r0
 d30:	07 fe       	sbrs	r0, 7
 d32:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <inverse>
 d36:	08 95       	ret

00000d38 <__fp_powser>:
 d38:	df 93       	push	r29
 d3a:	cf 93       	push	r28
 d3c:	1f 93       	push	r17
 d3e:	0f 93       	push	r16
 d40:	ff 92       	push	r15
 d42:	ef 92       	push	r14
 d44:	df 92       	push	r13
 d46:	7b 01       	movw	r14, r22
 d48:	8c 01       	movw	r16, r24
 d4a:	68 94       	set
 d4c:	06 c0       	rjmp	.+12     	; 0xd5a <__fp_powser+0x22>
 d4e:	da 2e       	mov	r13, r26
 d50:	ef 01       	movw	r28, r30
 d52:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3x>
 d56:	fe 01       	movw	r30, r28
 d58:	e8 94       	clt
 d5a:	a5 91       	lpm	r26, Z+
 d5c:	25 91       	lpm	r18, Z+
 d5e:	35 91       	lpm	r19, Z+
 d60:	45 91       	lpm	r20, Z+
 d62:	55 91       	lpm	r21, Z+
 d64:	a6 f3       	brts	.-24     	; 0xd4e <__fp_powser+0x16>
 d66:	ef 01       	movw	r28, r30
 d68:	0e 94 13 04 	call	0x826	; 0x826 <__addsf3x>
 d6c:	fe 01       	movw	r30, r28
 d6e:	97 01       	movw	r18, r14
 d70:	a8 01       	movw	r20, r16
 d72:	da 94       	dec	r13
 d74:	69 f7       	brne	.-38     	; 0xd50 <__fp_powser+0x18>
 d76:	df 90       	pop	r13
 d78:	ef 90       	pop	r14
 d7a:	ff 90       	pop	r15
 d7c:	0f 91       	pop	r16
 d7e:	1f 91       	pop	r17
 d80:	cf 91       	pop	r28
 d82:	df 91       	pop	r29
 d84:	08 95       	ret

00000d86 <inverse>:
 d86:	9b 01       	movw	r18, r22
 d88:	ac 01       	movw	r20, r24
 d8a:	60 e0       	ldi	r22, 0x00	; 0
 d8c:	70 e0       	ldi	r23, 0x00	; 0
 d8e:	80 e8       	ldi	r24, 0x80	; 128
 d90:	9f e3       	ldi	r25, 0x3F	; 63
 d92:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__divsf3>
 d96:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_inf>
 d9a:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__fp_mpack>

00000d9e <ldexp>:
 d9e:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_splitA>
 da2:	d8 f3       	brcs	.-10     	; 0xd9a <inverse+0x14>
 da4:	99 23       	and	r25, r25
 da6:	c9 f3       	breq	.-14     	; 0xd9a <inverse+0x14>
 da8:	94 0f       	add	r25, r20
 daa:	51 1d       	adc	r21, r1
 dac:	a3 f3       	brvs	.-24     	; 0xd96 <inverse+0x10>
 dae:	91 50       	subi	r25, 0x01	; 1
 db0:	50 40       	sbci	r21, 0x00	; 0
 db2:	94 f0       	brlt	.+36     	; 0xdd8 <ldexp+0x3a>
 db4:	59 f0       	breq	.+22     	; 0xdcc <ldexp+0x2e>
 db6:	88 23       	and	r24, r24
 db8:	32 f0       	brmi	.+12     	; 0xdc6 <ldexp+0x28>
 dba:	66 0f       	add	r22, r22
 dbc:	77 1f       	adc	r23, r23
 dbe:	88 1f       	adc	r24, r24
 dc0:	91 50       	subi	r25, 0x01	; 1
 dc2:	50 40       	sbci	r21, 0x00	; 0
 dc4:	c1 f7       	brne	.-16     	; 0xdb6 <ldexp+0x18>
 dc6:	9e 3f       	cpi	r25, 0xFE	; 254
 dc8:	51 05       	cpc	r21, r1
 dca:	2c f7       	brge	.-54     	; 0xd96 <inverse+0x10>
 dcc:	88 0f       	add	r24, r24
 dce:	91 1d       	adc	r25, r1
 dd0:	96 95       	lsr	r25
 dd2:	87 95       	ror	r24
 dd4:	97 f9       	bld	r25, 7
 dd6:	08 95       	ret
 dd8:	5f 3f       	cpi	r21, 0xFF	; 255
 dda:	ac f0       	brlt	.+42     	; 0xe06 <ldexp+0x68>
 ddc:	98 3e       	cpi	r25, 0xE8	; 232
 dde:	9c f0       	brlt	.+38     	; 0xe06 <ldexp+0x68>
 de0:	bb 27       	eor	r27, r27
 de2:	86 95       	lsr	r24
 de4:	77 95       	ror	r23
 de6:	67 95       	ror	r22
 de8:	b7 95       	ror	r27
 dea:	08 f4       	brcc	.+2      	; 0xdee <ldexp+0x50>
 dec:	b1 60       	ori	r27, 0x01	; 1
 dee:	93 95       	inc	r25
 df0:	c1 f7       	brne	.-16     	; 0xde2 <ldexp+0x44>
 df2:	bb 0f       	add	r27, r27
 df4:	58 f7       	brcc	.-42     	; 0xdcc <ldexp+0x2e>
 df6:	11 f4       	brne	.+4      	; 0xdfc <ldexp+0x5e>
 df8:	60 ff       	sbrs	r22, 0
 dfa:	e8 cf       	rjmp	.-48     	; 0xdcc <ldexp+0x2e>
 dfc:	6f 5f       	subi	r22, 0xFF	; 255
 dfe:	7f 4f       	sbci	r23, 0xFF	; 255
 e00:	8f 4f       	sbci	r24, 0xFF	; 255
 e02:	9f 4f       	sbci	r25, 0xFF	; 255
 e04:	e3 cf       	rjmp	.-58     	; 0xdcc <ldexp+0x2e>
 e06:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__fp_szero>
 e0a:	16 f0       	brts	.+4      	; 0xe10 <ldexp+0x72>
 e0c:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__fp_mpack>
 e10:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_nan>
 e14:	68 94       	set
 e16:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__fp_inf>

00000e1a <log>:
 e1a:	0e 94 84 05 	call	0xb08	; 0xb08 <__fp_splitA>
 e1e:	a8 f3       	brcs	.-22     	; 0xe0a <ldexp+0x6c>
 e20:	99 23       	and	r25, r25
 e22:	c1 f3       	breq	.-16     	; 0xe14 <ldexp+0x76>
 e24:	ae f3       	brts	.-22     	; 0xe10 <ldexp+0x72>
 e26:	df 93       	push	r29
 e28:	cf 93       	push	r28
 e2a:	1f 93       	push	r17
 e2c:	0f 93       	push	r16
 e2e:	ff 92       	push	r15
 e30:	c9 2f       	mov	r28, r25
 e32:	dd 27       	eor	r29, r29
 e34:	88 23       	and	r24, r24
 e36:	2a f0       	brmi	.+10     	; 0xe42 <log+0x28>
 e38:	21 97       	sbiw	r28, 0x01	; 1
 e3a:	66 0f       	add	r22, r22
 e3c:	77 1f       	adc	r23, r23
 e3e:	88 1f       	adc	r24, r24
 e40:	da f7       	brpl	.-10     	; 0xe38 <log+0x1e>
 e42:	20 e0       	ldi	r18, 0x00	; 0
 e44:	30 e0       	ldi	r19, 0x00	; 0
 e46:	40 e8       	ldi	r20, 0x80	; 128
 e48:	5f eb       	ldi	r21, 0xBF	; 191
 e4a:	9f e3       	ldi	r25, 0x3F	; 63
 e4c:	88 39       	cpi	r24, 0x98	; 152
 e4e:	20 f0       	brcs	.+8      	; 0xe58 <log+0x3e>
 e50:	80 3e       	cpi	r24, 0xE0	; 224
 e52:	38 f0       	brcs	.+14     	; 0xe62 <log+0x48>
 e54:	21 96       	adiw	r28, 0x01	; 1
 e56:	8f 77       	andi	r24, 0x7F	; 127
 e58:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__addsf3>
 e5c:	ec e7       	ldi	r30, 0x7C	; 124
 e5e:	f0 e0       	ldi	r31, 0x00	; 0
 e60:	04 c0       	rjmp	.+8      	; 0xe6a <log+0x50>
 e62:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__addsf3>
 e66:	e9 ea       	ldi	r30, 0xA9	; 169
 e68:	f0 e0       	ldi	r31, 0x00	; 0
 e6a:	0e 94 9c 06 	call	0xd38	; 0xd38 <__fp_powser>
 e6e:	8b 01       	movw	r16, r22
 e70:	be 01       	movw	r22, r28
 e72:	ec 01       	movw	r28, r24
 e74:	fb 2e       	mov	r15, r27
 e76:	6f 57       	subi	r22, 0x7F	; 127
 e78:	71 09       	sbc	r23, r1
 e7a:	75 95       	asr	r23
 e7c:	77 1f       	adc	r23, r23
 e7e:	88 0b       	sbc	r24, r24
 e80:	99 0b       	sbc	r25, r25
 e82:	0e 94 0b 05 	call	0xa16	; 0xa16 <__floatsisf>
 e86:	28 e1       	ldi	r18, 0x18	; 24
 e88:	32 e7       	ldi	r19, 0x72	; 114
 e8a:	41 e3       	ldi	r20, 0x31	; 49
 e8c:	5f e3       	ldi	r21, 0x3F	; 63
 e8e:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3x>
 e92:	af 2d       	mov	r26, r15
 e94:	98 01       	movw	r18, r16
 e96:	ae 01       	movw	r20, r28
 e98:	ff 90       	pop	r15
 e9a:	0f 91       	pop	r16
 e9c:	1f 91       	pop	r17
 e9e:	cf 91       	pop	r28
 ea0:	df 91       	pop	r29
 ea2:	0e 94 13 04 	call	0x826	; 0x826 <__addsf3x>
 ea6:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_round>

00000eaa <modf>:
 eaa:	fa 01       	movw	r30, r20
 eac:	dc 01       	movw	r26, r24
 eae:	aa 0f       	add	r26, r26
 eb0:	bb 1f       	adc	r27, r27
 eb2:	9b 01       	movw	r18, r22
 eb4:	ac 01       	movw	r20, r24
 eb6:	bf 57       	subi	r27, 0x7F	; 127
 eb8:	28 f4       	brcc	.+10     	; 0xec4 <modf+0x1a>
 eba:	22 27       	eor	r18, r18
 ebc:	33 27       	eor	r19, r19
 ebe:	44 27       	eor	r20, r20
 ec0:	50 78       	andi	r21, 0x80	; 128
 ec2:	20 c0       	rjmp	.+64     	; 0xf04 <modf+0x5a>
 ec4:	b7 51       	subi	r27, 0x17	; 23
 ec6:	90 f4       	brcc	.+36     	; 0xeec <modf+0x42>
 ec8:	ab 2f       	mov	r26, r27
 eca:	00 24       	eor	r0, r0
 ecc:	46 95       	lsr	r20
 ece:	37 95       	ror	r19
 ed0:	27 95       	ror	r18
 ed2:	01 1c       	adc	r0, r1
 ed4:	a3 95       	inc	r26
 ed6:	d2 f3       	brmi	.-12     	; 0xecc <modf+0x22>
 ed8:	00 20       	and	r0, r0
 eda:	71 f0       	breq	.+28     	; 0xef8 <modf+0x4e>
 edc:	22 0f       	add	r18, r18
 ede:	33 1f       	adc	r19, r19
 ee0:	44 1f       	adc	r20, r20
 ee2:	b3 95       	inc	r27
 ee4:	da f3       	brmi	.-10     	; 0xedc <modf+0x32>
 ee6:	0e d0       	rcall	.+28     	; 0xf04 <modf+0x5a>
 ee8:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__subsf3>
 eec:	61 30       	cpi	r22, 0x01	; 1
 eee:	71 05       	cpc	r23, r1
 ef0:	a0 e8       	ldi	r26, 0x80	; 128
 ef2:	8a 07       	cpc	r24, r26
 ef4:	b9 46       	sbci	r27, 0x69	; 105
 ef6:	30 f4       	brcc	.+12     	; 0xf04 <modf+0x5a>
 ef8:	9b 01       	movw	r18, r22
 efa:	ac 01       	movw	r20, r24
 efc:	66 27       	eor	r22, r22
 efe:	77 27       	eor	r23, r23
 f00:	88 27       	eor	r24, r24
 f02:	90 78       	andi	r25, 0x80	; 128
 f04:	30 96       	adiw	r30, 0x00	; 0
 f06:	21 f0       	breq	.+8      	; 0xf10 <modf+0x66>
 f08:	20 83       	st	Z, r18
 f0a:	31 83       	std	Z+1, r19	; 0x01
 f0c:	42 83       	std	Z+2, r20	; 0x02
 f0e:	53 83       	std	Z+3, r21	; 0x03
 f10:	08 95       	ret

00000f12 <_exit>:
 f12:	f8 94       	cli

00000f14 <__stop_program>:
 f14:	ff cf       	rjmp	.-2      	; 0xf14 <__stop_program>
